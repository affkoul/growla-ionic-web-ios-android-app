{"version":3,"sources":["./src/addons/notifications/components/actions/addon-notifications-actions.html","./src/addons/notifications/components/site-onboarding/site-onboarding.html","./src/addons/notifications/pages/list/list.html","./src/addons/notifications/components/actions/actions.ts","./src/addons/notifications/components/components.module.ts","./src/addons/notifications/components/site-onboarding/site-onboarding.scss","./src/addons/notifications/components/site-onboarding/site-onboarding.ts","./src/addons/notifications/pages/list/list.module.ts","./src/addons/notifications/pages/list/list.scss","./src/addons/notifications/pages/list/list.ts"],"names":[],"mappings":"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","file":"pages-list-list-module.js","sourcesContent":["export default \"<ion-row *ngIf=\\\"actions && actions.length > 0\\\" class=\\\"justify-content-around\\\">\\n    <ion-col *ngFor=\\\"let action of actions\\\">\\n        <ion-button fill=\\\"clear\\\" expand=\\\"block\\\" (click)=\\\"action.action()\\\">\\n            <ion-icon slot=\\\"start\\\" name=\\\"{{action.icon}}\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n            {{ action.message | translate }}\\n        </ion-button>\\n    </ion-col>\\n</ion-row>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"end\\\">\\n                <ion-button fill=\\\"clear\\\"  (click)=\\\"skip($event)\\\">\\n                    {{planstatuscomplete}}\\n                </ion-button>\\n        </ion-buttons> \\n    </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"ion-padding\\\">\\n    <core-iframe  class=\\\"rej\\\" [src]=\\\"iframeSrc\\\" frameborder=\\\"0\\\"></core-iframe>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.notifications.notifications' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!notificationsLoaded\\\" (ionRefresh)=\\\"refreshNotifications($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"notificationsLoaded\\\">\\n        <div class=\\\"ion-padding\\\" *ngIf=\\\"canMarkAllNotificationsAsRead\\\">\\n            <ion-button [disabled]=\\\"loadingMarkAllNotificationsAsRead\\\" expand=\\\"block\\\" (click)=\\\"markAllNotificationsAsRead()\\\"\\n                color=\\\"light\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"fas-check\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"!loadingMarkAllNotificationsAsRead\\\"></ion-icon>\\n                <ion-spinner slot=\\\"start\\\" [attr.aria-label]=\\\"'core.loading' | translate\\\" *ngIf=\\\"loadingMarkAllNotificationsAsRead\\\">\\n                </ion-spinner>\\n                {{ 'addon.notifications.markallread' | translate }}\\n            </ion-button>\\n        </div>\\n\\n        <ion-card *ngFor=\\\"let notification of notifications\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\"\\n                [attr.aria-label]=\\\"\\n                    notification.timeread\\n                    ? notification.subject\\n                    : 'addon.notifications.unreadnotification' | translate: {$a: notification.subject}\\\">\\n                <core-user-avatar *ngIf=\\\"notification.useridfrom > 0\\\" [user]=\\\"notification\\\" slot=\\\"start\\\"\\n                    [profileUrl]=\\\"notification.profileimageurlfrom\\\" [fullname]=\\\"notification.userfromfullname\\\"\\n                    [userId]=\\\"notification.useridfrom\\\" [extraIcon]=\\\"notification.iconurl\\\"></core-user-avatar>\\n\\n                <img *ngIf=\\\"notification.useridfrom <= 0 && notification.iconurl\\\" [src]=\\\"notification.iconurl\\\" alt=\\\"\\\"\\n                    role=\\\"presentation\\\" class=\\\"core-notification-icon\\\" slot=\\\"start\\\">\\n\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">{{ notification.subject }}</p>\\n                    <p *ngIf=\\\"notification.userfromfullname\\\">{{ notification.userfromfullname }}</p>\\n                </ion-label>\\n                <ion-note slot=\\\"end\\\" class=\\\"ion-float-end ion-text-end\\\">\\n                    {{ notification.timecreated | coreDateDayOrTime }}\\n                    <span *ngIf=\\\"!notification.timeread\\\">\\n                        <ion-icon name=\\\"fas-circle\\\" color=\\\"primary\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    </span>\\n                </ion-note>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <core-format-text [text]=\\\"notification.mobiletext | coreCreateLinks\\\" contextLevel=\\\"system\\\"\\n                    [contextInstanceId]=\\\"0\\\" [maxHeight]=\\\"notification.displayfullhtml ? 120 : null\\\">\\n                    </core-format-text>\\n                </ion-label>\\n            </ion-item>\\n            <addon-notifications-actions [contextUrl]=\\\"notification.contexturl\\\" [courseId]=\\\"notification.courseid\\\"\\n                [data]=\\\"notification.customdata\\\">\\n            </addon-notifications-actions>\\n        </ion-card>\\n\\n        <core-empty-box *ngIf=\\\"!notifications || notifications.length <= 0\\\" icon=\\\"far-bell\\\"\\n            [message]=\\\"'addon.notifications.therearentnotificationsyet' | translate\\\">\\n        </core-empty-box>\\n\\n        <core-infinite-loading [enabled]=\\\"canLoadMore\\\" (action)=\\\"loadMoreNotifications($event)\\\" [error]=\\\"loadMoreError\\\">\\n        </core-infinite-loading>\\n    </core-loading>\\n</ion-content>\\n\";","// // (C) Copyright 2015 GROWLA Pty Ltd.\n// //\n// // Licensed under the Apache License, Version 2.0 (the \"License\");\n// // you may not use this file except in compliance with the License.\n// // You may obtain a copy of the License at\n// //\n// //     http://www.apache.org/licenses/LICENSE-2.0\n// //\n// // Unless required by applicable law or agreed to in writing, software\n// // distributed under the License is distributed on an \"AS IS\" BASIS,\n// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// // See the License for the specific language governing permissions and\n// // limitations under the License.\n\n// import { Component, Input, OnInit } from '@angular/core';\n\n// import { CoreSites } from '@services/sites';\n// import { CoreContentLinksDelegate, CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\n// import { Http } from '@singletons';\n// import { CoreDomUtils } from '@services/utils/dom';\n// import { CoreLoginSitesComponent } from '../site-onboarding/site-onboarding';\n// import { DomSanitizer } from '@singletons';\n// /**\n//  * Component that displays the actions for a notification.\n//  */\n// @Component({\n//     selector: 'addon-notifications-actions',\n//     templateUrl: 'addon-notifications-actions.html',\n// })\n// export class AddonNotificationsActionsComponent implements OnInit {\n\n//     @Input() contextUrl?: string;\n//     @Input() courseId?: number;\n//     @Input() data?: Record<string, unknown>; // Extra data to handle the URL.\n//     @Input() iframeSrc?:any\n\n//     actions: CoreContentLinksAction[] = [];\n//     /**\n//      * Component being initialized.\n//      */\n//     async ngOnInit(): Promise<void> {\n//         if (!this.contextUrl && (!this.data || !this.data.appurl)) {\n//             // No URL, nothing to do.\n//             return;\n//         }\n\n//         let actions: CoreContentLinksAction[] = [];\n\n//         // Treat appurl first if any.\n//         if (this.data?.appurl) {\n//             actions = await CoreContentLinksDelegate.getActionsFor(\n//                 <string> this.data.appurl,\n//                 this.courseId,\n//                 undefined,\n//                 this.data,\n//             );\n//         }\n\n//         if (!actions.length && this.contextUrl) {\n//             // No appurl or cannot handle it. Try with contextUrl.\n//             actions = await CoreContentLinksDelegate.getActionsFor(this.contextUrl, this.courseId, undefined, this.data);\n//         }\n\n//         if (!actions.length) {\n//             // URL is not supported. Add an action to open it in browser.\n//             actions.push({\n//                 message: 'core.view',\n//                 icon: 'fas-eye',\n//                 action: this.openInBrowser.bind(this),\n//             });\n//         }\n//         this.actions = actions;\n//     }\n\n//     /**\n//      * Default action. Open in browser.\n//      *\n//      * @param siteId Site ID to use.\n//      */\n//     protected async openInBrowser(siteId?: string): Promise<void> {\n//         const url = <string> this.data?.appurl || this.contextUrl;\n\n//         if (!url) {\n//             return;\n//         }\n//         let params = url.split(\"?\")[1]\n//         let address = url.split(\"/\")\n//         let data: any = await Http.get('https://ipinfo.io?token=258330d34cc6b3').toPromise()\n//         if (data.country == 'CN') {\n//             address[2]=\"growlaasia.com\"\n//             // this.iframeSrc =address.join(\"/\")\n//             this.iframeSrc = \"https://test.growlaasia.com/report/insights/insights.php?modelid=2&contextid=1\"\n//             console.log(this.iframeSrc)\n//            // this.iframeSrc = DomSanitizer.bypassSecurityTrustResourceUrl('https://growlaasia.com/report/insights/insights.php?'+params)\n//         } else {\n//             address[2]=\"growlaasia.com\"\n//             this.iframeSrc = address.join(\"/\")\n//            // this.iframeSrc =  DomSanitizer.bypassSecurityTrustResourceUrl('https://growlaglobal.com/report/insights/insights.php?'+params)\n//         }\n//         // const site = await CoreSites.getSite(siteId);\n\n//            await CoreDomUtils.openModal({\n//             component: CoreLoginSitesComponent,\n//             cssClass: 'core-modal-fullscreen',\n//             componentProps: {\n//                 shows:false,\n//                 iframeSrc:this.iframeSrc\n//             }\n//         });\n//     }\n// }\n\n\nimport { Component, Input, OnInit } from '@angular/core';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreContentLinksDelegate, CoreContentLinksAction } from '@features/contentlinks/services/contentlinks-delegate';\n\n/**\n * Component that displays the actions for a notification.\n */\n@Component({\n    selector: 'addon-notifications-actions',\n    templateUrl: 'addon-notifications-actions.html',\n})\nexport class AddonNotificationsActionsComponent implements OnInit {\n\n    @Input() contextUrl?: string;\n    @Input() courseId?: number;\n    @Input() data?: Record<string, unknown>; // Extra data to handle the URL.\n\n    actions: CoreContentLinksAction[] = [];\n\n    /**\n     * Component being initialized.\n     */\n    async ngOnInit(): Promise<void> {\n        if (!this.contextUrl && (!this.data || !this.data.appurl)) {\n            // No URL, nothing to do.\n            return;\n        }\n\n        let actions: CoreContentLinksAction[] = [];\n\n        // Treat appurl first if any.\n        if (this.data?.appurl) {\n            actions = await CoreContentLinksDelegate.getActionsFor(\n                <string> this.data.appurl,\n                this.courseId,\n                undefined,\n                this.data,\n            );\n        }\n\n        if (!actions.length && this.contextUrl) {\n            // No appurl or cannot handle it. Try with contextUrl.\n            actions = await CoreContentLinksDelegate.getActionsFor(this.contextUrl, this.courseId, undefined, this.data);\n        }\n\n        if (!actions.length) {\n            // URL is not supported. Add an action to open it in browser.\n            actions.push({\n                message: 'core.view',\n                icon: 'fas-eye',\n                action: this.openInBrowser.bind(this),\n            });\n        }\n\n        this.actions = actions;\n    }\n\n    /**\n     * Default action. Open in browser.\n     *\n     * @param siteId Site ID to use.\n     */\n    protected async openInBrowser(siteId?: string): Promise<void> {\n        const url = <string> this.data?.appurl || this.contextUrl;\n\n        if (!url) {\n            return;\n        }\n\n        const site = await CoreSites.getSite(siteId);\n\n        site.openInBrowserWithAutoLogin(url);\n    }\n\n}\n","// (C) Copyright 2015 GROWLA Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { AddonNotificationsActionsComponent } from './actions/actions';\nimport { CoreLoginSitesComponent } from './site-onboarding/site-onboarding';\n@NgModule({\n    declarations: [\n        AddonNotificationsActionsComponent,\n        CoreLoginSitesComponent\n    ],\n    imports: [\n        CoreSharedModule,\n    ],\n    exports: [\n        AddonNotificationsActionsComponent,\n        CoreLoginSitesComponent\n    ],\n})\nexport class AddonNotificationsComponentsModule {}\n","export default \".rej {\\n  width: 100%;\\n  height: 100%;\\n  position: fixed;\\n  left: 0;\\n  top: -8px;\\n  z-index: 100;\\n}\\n\\n:host .core-login-onboarding-step {\\n  padding: 10px 20px;\\n  text-align: center;\\n  margin: 0 auto;\\n}\\n\\n@media (min-width: 768px) {\\n  :host .core-login-onboarding-step {\\n    max-width: 80%;\\n  }\\n}\\n\\n:host .core-login-onboarding-step p {\\n  margin-bottom: 10px;\\n}\\n\\n:host .core-login-onboarding-step ul {\\n  margin-bottom: 30px;\\n  list-style-type: none;\\n  -webkit-padding-start: 10px;\\n          padding-inline-start: 10px;\\n}\\n\\n:host .core-login-onboarding-step ul li {\\n  margin-bottom: 10px;\\n}\\n\\n:host .core-login-onboarding-step .button-block {\\n  margin-top: 20px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbm90aWZpY2F0aW9ucy9jb21wb25lbnRzL3NpdGUtb25ib2FyZGluZy9zaXRlLW9uYm9hcmRpbmcuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EsZUFBQTtFQUNBLE9BQUE7RUFDQSxTQUFBO0VBQ0EsWUFBQTtBQUNKOztBQUVJO0VBQ0ksa0JBQUE7RUFDQSxrQkFBQTtFQUlBLGNBQUE7QUFGUjs7QUFEUTtFQUhKO0lBSVEsY0FBQTtFQUlWO0FBQ0Y7O0FBRFE7RUFDSSxtQkFBQTtBQUdaOztBQUFRO0VBQ0ksbUJBQUE7RUFDQSxxQkFBQTtFQUNBLDJCQUFBO1VBQUEsMEJBQUE7QUFFWjs7QUFEWTtFQUNJLG1CQUFBO0FBR2hCOztBQUNRO0VBQ0ksZ0JBQUE7QUFDWiIsImZpbGUiOiJzcmMvYWRkb25zL25vdGlmaWNhdGlvbnMvY29tcG9uZW50cy9zaXRlLW9uYm9hcmRpbmcvc2l0ZS1vbmJvYXJkaW5nLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucmVqe1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBwb3NpdGlvbjogZml4ZWQ7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IC04cHg7XG4gICAgei1pbmRleDogMTAwO1xufVxuOmhvc3Qge1xuICAgIC5jb3JlLWxvZ2luLW9uYm9hcmRpbmctc3RlcCB7XG4gICAgICAgIHBhZGRpbmc6IDEwcHggMjBweDtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBAbWVkaWEgKG1pbi13aWR0aDogNzY4cHgpIHtcbiAgICAgICAgICAgIG1heC13aWR0aDogODAlO1xuICAgICAgICB9XG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xuXG4gICAgICAgIHAge1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuXG4gICAgICAgIHVsIHtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gICAgICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgICAgICAgICBwYWRkaW5nLWlubGluZS1zdGFydDogMTBweDtcbiAgICAgICAgICAgIGxpIHtcbiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxMHB4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLmJ1dHRvbi1ibG9jayB7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgICAgICB9XG4gICAgfVxufVxuIl19 */\";","// (C) Copyright 2015 GROWLA Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component,Input } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CoreConfig } from '@services/config';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreLoginHelperProvider } from '@features/login/services/login-helper';\nimport { DomSanitizer, ModalController } from '@singletons';\n\nimport { Http } from '@singletons';\nimport { async } from '@angular/core/testing';\nimport { promises } from 'fs';\nimport { CoreLang } from '@services/lang';\n/**\n * Component that displays onboarding help regarding the CoreLoginSitePage.\n */\n@Component({\n    selector: 'core-login-site-onboarding',\n    templateUrl: 'site-onboarding.html',\n    styleUrls: ['site-onboarding.scss'],\n})\nexport class CoreLoginSitesComponent {\n    @Input() shows=true;\n    @Input() iframeSrc: any = \"\"\n    step = 0;\n    isShow: boolean = true\n    selectedLanguage:any\n    planstatuscomplete?:string\n    constructor(\n        protected router: Router,\n    ) { }\n   async ngOnInit() {\n        this.selectedLanguage = await CoreLang.getCurrentLanguage();\n        if (this.selectedLanguage == \"zh-cn\"){\n            this.planstatuscomplete = \"关闭\"\n        }else{\n            this.planstatuscomplete = \"close\"\n        }\n    }\n    /**\n     * Go to next step.\n     *\n     * @param e Click event.\n     */\n    next(e: Event): void {\n        e.stopPropagation();\n\n        this.step++;\n    }\n\n    /**\n     * Go to previous step.\n     *\n     * @param e Click event.\n     */\n    previous(e: Event): void {\n        e.stopPropagation();\n\n        if (this.step == 0) {\n            ModalController.dismiss();\n        } else {\n            this.step--;\n        }\n    }\n\n    /**\n     * Close modal.\n     *\n     * @param e Click event.\n     */\n    skip(e: Event): void {\n        e.stopPropagation();\n\n        this.saveOnboardingDone();\n        ModalController.dismiss();\n    }\n\n    /**\n     * Create a site.\n     *\n     * @param e Click event.\n     */\n    async gotoWeb(e: Event): Promise<void> {\n        e.stopPropagation();\n\n        this.saveOnboardingDone();\n\n        let data: any = await Http.get('https://ipinfo.io?token=258330d34cc6b3').toPromise()\n        if (data.country == 'CN') {\n            this.iframeSrc =  DomSanitizer.bypassSecurityTrustResourceUrl('https://growlaasia.com/register.php#cn')\n        } else {\n            this.iframeSrc = 'https://growlaglobal.com/register.php#en'\n        }\n        this.isShow = false\n        // ModalController.dismiss();\n    }\n    // async function reqAddress() {\n    //     let param = {\n    //         url: 'https://ipinfo.io?token=258330d34cc6b3'\n    //     }\n    //     let data = await request(param)\n    //     if( data.country == 'CN') {\n    //         $('#phonenumber-box').css('display', 'block')\n    //     } else {\n    //         $('#phonenumber-box').css('display', 'none')\n    //     }\n    // }\n    /**\n     * Saves the onboarding has finished.\n     * 设置是否进入开机模式\n     */\n    protected saveOnboardingDone(): void {\n        CoreConfig.set(CoreLoginHelperProvider.ONBOARDING_DONE, 1);\n    }\n\n}\n","// (C) Copyright 2015 GROWLA Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonNotificationsComponentsModule } from '../../components/components.module';\nimport { AddonNotificationsListPage } from './list';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonNotificationsListPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonNotificationsComponentsModule,\n    ],\n    declarations: [\n        AddonNotificationsListPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonNotificationsListPageModule {}\n","export default \":host .core-notification-icon {\\n  width: 34px;\\n  height: 34px;\\n  margin: 10px !important;\\n}\\n:host .item core-format-text ::ng-deep .forumpost {\\n  border: 1px solid var(--gray-light);\\n  width: 100%;\\n  margin: 0 0 1em 0;\\n}\\n:host .item core-format-text ::ng-deep .forumpost td {\\n  padding: 10px;\\n}\\n:host .item core-format-text ::ng-deep .forumpost .header {\\n  background-color: var(--gray-lighter);\\n}\\n:host .item core-format-text ::ng-deep .forumpost .picture {\\n  width: auto;\\n  text-align: center;\\n}\\n:host .item core-format-text ::ng-deep .forumpost .subject {\\n  font-weight: 700;\\n  margin-bottom: 1rem;\\n}\\n:host .item core-format-text ::ng-deep a {\\n  text-decoration: none;\\n}\\n:host .item core-format-text ::ng-deep .userpicture {\\n  border-radius: 50%;\\n}\\n:host .item core-format-text ::ng-deep .mdl-right {\\n  text-align: end;\\n}\\n:host .item core-format-text ::ng-deep .mdl-right a {\\n  display: none;\\n}\\n:host .item core-format-text ::ng-deep .mdl-right font {\\n  font-size: 0.9em;\\n}\\n:host .item core-format-text ::ng-deep .commands {\\n  display: none;\\n}\\n:host .item core-format-text ::ng-deep hr {\\n  margin-top: 1.5rem;\\n  margin-bottom: 1.5rem;\\n  background-color: var(--gray-light);\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbm90aWZpY2F0aW9ucy9wYWdlcy9saXN0L2xpc3Quc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDSTtFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EsdUJBQUE7QUFBUjtBQUlRO0VBQ0ksbUNBQUE7RUFDQSxXQUFBO0VBQ0EsaUJBQUE7QUFGWjtBQUlZO0VBQ0ksYUFBQTtBQUZoQjtBQUtZO0VBQ0kscUNBQUE7QUFIaEI7QUFNWTtFQUNJLFdBQUE7RUFDQSxrQkFBQTtBQUpoQjtBQU9ZO0VBQ0ksZ0JBQUE7RUFDQSxtQkFBQTtBQUxoQjtBQVNRO0VBQ0kscUJBQUE7QUFQWjtBQVVRO0VBQ0ksa0JBQUE7QUFSWjtBQVdRO0VBQ0ksZUFBQTtBQVRaO0FBVVk7RUFDSSxhQUFBO0FBUmhCO0FBVVk7RUFDSSxnQkFBQTtBQVJoQjtBQVlRO0VBQ0ksYUFBQTtBQVZaO0FBYVE7RUFDSSxrQkFBQTtFQUNBLHFCQUFBO0VBQ0EsbUNBQUE7QUFYWiIsImZpbGUiOiJzcmMvYWRkb25zL25vdGlmaWNhdGlvbnMvcGFnZXMvbGlzdC9saXN0LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gICAgLmNvcmUtbm90aWZpY2F0aW9uLWljb24ge1xuICAgICAgICB3aWR0aDogMzRweDtcbiAgICAgICAgaGVpZ2h0OiAzNHB4O1xuICAgICAgICBtYXJnaW46IDEwcHggIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAuaXRlbSBjb3JlLWZvcm1hdC10ZXh0IDo6bmctZGVlcCB7XG4gICAgICAgIC5mb3J1bXBvc3Qge1xuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ3JheS1saWdodCk7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIG1hcmdpbjogMCAwIDFlbSAwO1xuXG4gICAgICAgICAgICB0ZCB7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLmhlYWRlciB7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZ3JheS1saWdodGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLnBpY3R1cmUge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLnN1YmplY3Qge1xuICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA3MDA7XG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGEge1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICB9XG5cbiAgICAgICAgLnVzZXJwaWN0dXJlIHtcbiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZGwtcmlnaHQge1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogZW5kO1xuICAgICAgICAgICAgYSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvbnQge1xuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAuY29tbWFuZHMge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhyIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEuNXJlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWdyYXktbGlnaHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19 */\";","// (C) Copyright 2015 GROWLA Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { Subscription } from 'rxjs';\n\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEvents, CoreEventObserver } from '@singletons/events';\nimport { AddonNotifications, AddonNotificationsAnyNotification, AddonNotificationsProvider } from '../../services/notifications';\nimport { AddonNotificationsHelper } from '../../services/notifications-helper';\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\n\n/**\n * Page that displays the list of notifications.\n */\n@Component({\n    selector: 'page-addon-notifications-list',\n    templateUrl: 'list.html',\n    styleUrls: ['list.scss'],\n})\nexport class AddonNotificationsListPage implements OnInit, OnDestroy {\n\n    notifications: FormattedNotification[] = [];\n    notificationsLoaded = false;\n    canLoadMore = false;\n    loadMoreError = false;\n    canMarkAllNotificationsAsRead = false;\n    loadingMarkAllNotificationsAsRead = false;\n\n    protected isCurrentView?: boolean;\n    protected cronObserver?: CoreEventObserver;\n    protected pushObserver?: Subscription;\n    protected pendingRefresh = false;\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        this.fetchNotifications();\n\n        this.cronObserver = CoreEvents.on(AddonNotificationsProvider.READ_CRON_EVENT, () => {\n            if (!this.isCurrentView) {\n                return;\n            }\n\n            this.notificationsLoaded = false;\n            this.refreshNotifications();\n        }, CoreSites.getCurrentSiteId());\n\n        this.pushObserver = CorePushNotificationsDelegate.on('receive').subscribe((notification) => {\n            // New notification received. If it's from current site, refresh the data.\n            if (!this.isCurrentView) {\n                this.pendingRefresh = true;\n\n                return;\n            }\n\n            if (!CoreUtils.isTrueOrOne(notification.notif) || !CoreSites.isCurrentSite(notification.site)) {\n                return;\n            }\n\n            this.notificationsLoaded = false;\n            this.refreshNotifications();\n        });\n    }\n\n    /**\n     * Convenience function to get notifications. Gets unread notifications first.\n     *\n     * @param refreh Whether we're refreshing data.\n     * @return Resolved when done.\n     */\n    protected async fetchNotifications(refresh?: boolean): Promise<void> {\n        this.loadMoreError = false;\n\n        try {\n            const result = await AddonNotificationsHelper.getNotifications(refresh ? [] : this.notifications);\n\n            const notifications = result.notifications.map((notification) => this.formatText(notification));\n\n            if (refresh) {\n                this.notifications = notifications;\n            } else {\n                this.notifications = this.notifications.concat(notifications);\n            }\n            this.canLoadMore = result.canLoadMore;\n\n            this.markNotificationsAsRead(notifications);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.notifications.errorgetnotifications', true);\n            this.loadMoreError = true; // Set to prevent infinite calls with infinite-loading.\n        } finally {\n            this.notificationsLoaded = true;\n        }\n    }\n\n    /**\n     * Mark all notifications as read.\n     *\n     * @return Promise resolved when done.\n     */\n    async markAllNotificationsAsRead(): Promise<void> {\n        this.loadingMarkAllNotificationsAsRead = true;\n\n        await CoreUtils.ignoreErrors(AddonNotifications.markAllNotificationsAsRead());\n\n        CoreEvents.trigger(AddonNotificationsProvider.READ_CHANGED_EVENT, {}, CoreSites.getCurrentSiteId());\n\n        // All marked as read, refresh the list.\n        this.notificationsLoaded = false;\n\n        await this.refreshNotifications();\n    }\n\n    /**\n     * Mark notifications as read.\n     *\n     * @param notifications Array of notification objects.\n     */\n    protected async markNotificationsAsRead(notifications: FormattedNotification[]): Promise<void> {\n        if (notifications.length > 0) {\n            const promises = notifications.map(async (notification) => {\n                if (notification.read) {\n                    // Already read, don't mark it.\n                    return;\n                }\n\n                await AddonNotifications.markNotificationRead(notification.id);\n            });\n\n            await CoreUtils.ignoreErrors(Promise.all(promises));\n\n            await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationsList());\n\n            CoreEvents.trigger(AddonNotificationsProvider.READ_CHANGED_EVENT, {}, CoreSites.getCurrentSiteId());\n        }\n\n        // Check if mark all notifications as read is enabled and there are some to read.\n        if (!AddonNotifications.isMarkAllNotificationsAsReadEnabled()) {\n            this.canMarkAllNotificationsAsRead = false;\n\n            return;\n        }\n\n        try {\n            this.loadingMarkAllNotificationsAsRead = true;\n\n            const unread = await AddonNotifications.getUnreadNotificationsCount();\n\n            this.canMarkAllNotificationsAsRead = unread > 0;\n        } finally {\n            this.loadingMarkAllNotificationsAsRead = false;\n        }\n    }\n\n    /**\n     * Refresh notifications.\n     *\n     * @param refresher Refresher.\n     * @return Promise<any> Promise resolved when done.\n     */\n    async refreshNotifications(refresher?: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(AddonNotifications.invalidateNotificationsList());\n\n        try {\n            await this.fetchNotifications(true);\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Load more results.\n     *\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     */\n    async loadMoreNotifications(infiniteComplete?: () => void): Promise<void> {\n        try {\n            await this.fetchNotifications();\n        } finally {\n            infiniteComplete?.();\n        }\n    }\n\n    /**\n     * Formats the text of a notification.\n     *\n     * @param notification The notification object.\n     */\n    protected formatText(notification: AddonNotificationsAnyNotification): FormattedNotification {\n        const formattedNotification: FormattedNotification = notification;\n        formattedNotification.displayfullhtml = this.shouldDisplayFullHtml(notification);\n        formattedNotification.iconurl = formattedNotification.iconurl || undefined; // Make sure the property exists.\n\n        formattedNotification.mobiletext = formattedNotification.displayfullhtml ?\n            notification.fullmessagehtml :\n            CoreTextUtils.replaceNewLines(formattedNotification.mobiletext!.replace(/-{4,}/ig, ''), '<br>');\n\n        return formattedNotification;\n    }\n\n    /**\n     * Check whether we should display full HTML of the notification.\n     *\n     * @param notification Notification.\n     * @return Whether to display full HTML.\n     */\n    protected shouldDisplayFullHtml(notification: FormattedNotification): boolean {\n        return notification.component == 'mod_forum' && notification.eventtype == 'digests';\n    }\n\n    /**\n     * User entered the page.\n     */\n    ionViewDidEnter(): void {\n        this.isCurrentView = true;\n\n        if (!this.pendingRefresh) {\n            return;\n        }\n\n        this.pendingRefresh = false;\n        this.notificationsLoaded = false;\n\n        this.refreshNotifications();\n    }\n\n    /**\n     * User left the page.\n     */\n    ionViewDidLeave(): void {\n        this.isCurrentView = false;\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.cronObserver?.off();\n        this.pushObserver?.unsubscribe();\n    }\n\n}\n\ntype FormattedNotification = AddonNotificationsAnyNotification & {\n    displayfullhtml?: boolean; // Whether to display the full HTML of the notification.\n    iconurl?: string;\n};\n"],"sourceRoot":"webpack:///"}