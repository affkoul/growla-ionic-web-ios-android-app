{"version":3,"sources":["./src/addons/mod/glossary/pages/entry/entry.html","./src/addons/mod/glossary/pages/entry/entry.module.ts","./src/addons/mod/glossary/pages/entry/entry.ts"],"names":[],"mappings":"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","file":"pages-entry-entry-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1 *ngIf=\\\"entry\\\">\\n            <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <ng-container *ngIf=\\\"entry && loaded\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"showAuthor\\\">\\n                <core-user-avatar [user]=\\\"entry\\\" slot=\\\"start\\\"></core-user-avatar>\\n                <ion-label>\\n                    <h2>\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\"\\n                            [courseId]=\\\"courseId\\\">\\n                        </core-format-text>\\n                    </h2>\\n                    <p>{{ entry.userfullname }}</p>\\n                </ion-label>\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate\\\">{{ entry.timemodified | coreDateDayOrTime }}</ion-note>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!showAuthor\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">\\n                        <core-format-text [text]=\\\"entry.concept\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\">\\n                        </core-format-text>\\n                    </p>\\n                </ion-label>\\n                <ion-note slot=\\\"end\\\" *ngIf=\\\"showDate\\\">{{ entry.timemodified | coreDateDayOrTime }}</ion-note>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"entry.definition\\\"\\n                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"componentId\\\" [courseId]=\\\"courseId\\\">\\n                    </core-format-text>\\n                </ion-label>\\n            </ion-item>\\n            <div *ngIf=\\\"entry.attachment\\\" lines=\\\"none\\\">\\n                <core-file *ngFor=\\\"let file of entry.attachments\\\" [file]=\\\"file\\\" [component]=\\\"component\\\"\\n                    [componentId]=\\\"componentId\\\">\\n                </core-file>\\n            </div>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"tagsEnabled && entry && entry.tags && entry.tags.length > 0\\\">\\n                <ion-label>\\n                    <div slot=\\\"start\\\">{{ 'core.tag.tags' | translate }}:</div>\\n                    <core-tag-list [tags]=\\\"entry.tags\\\"></core-tag-list>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!entry.approved\\\">\\n                <ion-label><p><em>{{ 'addon.mod_glossary.entrypendingapproval' | translate }}</em></p></ion-label>\\n            </ion-item>\\n            <core-comments *ngIf=\\\"glossary && glossary.allowcomments && entry && entry.id > 0 && commentsEnabled\\\"\\n                contextLevel=\\\"module\\\" [instanceId]=\\\"glossary.coursemodule\\\" component=\\\"mod_glossary\\\"\\n                [itemId]=\\\"entry.id\\\" area=\\\"glossary_entry\\\" [courseId]=\\\"glossary.course\\\" [showItem]=\\\"true\\\">\\n            </core-comments>\\n            <core-rating-rate *ngIf=\\\"glossary && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"entry.id\\\" [itemSetId]=\\\"0\\\" [courseId]=\\\"glossary.course\\\"\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\" [userId]=\\\"entry.userid\\\"\\n                (onUpdate)=\\\"ratingUpdated()\\\">\\n            </core-rating-rate>\\n            <core-rating-aggregate *ngIf=\\\"glossary && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\n                [instanceId]=\\\"glossary.coursemodule\\\" [itemId]=\\\"entry.id\\\" [courseId]=\\\"glossary.course\\\"\\n                [aggregateMethod]=\\\"glossary.assessed\\\" [scaleId]=\\\"glossary.scale\\\">\\n            </core-rating-aggregate>\\n        </ng-container>\\n\\n        <ion-card *ngIf=\\\"!entry\\\" class=\\\"core-warning-card\\\">\\n            <ion-item>\\n                <ion-label>{{ 'addon.mod_glossary.errorloadingentry' | translate }}</ion-label>\\n            </ion-item>\\n        </ion-card>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModGlossaryEntryPage } from './entry';\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\nimport { CoreRatingComponentsModule } from '@features/rating/components/components.module';\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [{\n    path: '',\n    component: AddonModGlossaryEntryPage,\n}];\n\n@NgModule({\n    declarations: [\n        AddonModGlossaryEntryPage,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreCommentsComponentsModule,\n        CoreRatingComponentsModule,\n        CoreTagComponentsModule,\n    ],\n})\nexport class AddonModGlossaryEntryPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreRatingInfo } from '@features/rating/services/rating';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport {\n    AddonModGlossary,\n    AddonModGlossaryEntry,\n    AddonModGlossaryGlossary,\n    AddonModGlossaryProvider,\n} from '../../services/glossary';\n\n/**\n * Page that displays a glossary entry.\n */\n@Component({\n    selector: 'page-addon-mod-glossary-entry',\n    templateUrl: 'entry.html',\n})\nexport class AddonModGlossaryEntryPage implements OnInit {\n\n    @ViewChild(CoreCommentsCommentsComponent) comments?: CoreCommentsCommentsComponent;\n\n    component = AddonModGlossaryProvider.COMPONENT;\n    componentId?: number;\n    entry?: AddonModGlossaryEntry;\n    glossary?: AddonModGlossaryGlossary;\n    loaded = false;\n    showAuthor = false;\n    showDate = false;\n    ratingInfo?: CoreRatingInfo;\n    tagsEnabled = false;\n    commentsEnabled = false;\n    courseId!: number;\n\n    protected entryId!: number;\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.entryId = CoreNavigator.getRouteNumberParam('entryId')!;\n        this.tagsEnabled = CoreTag.areTagsAvailableInSite();\n        this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n\n        try {\n            await this.fetchEntry();\n\n            if (!this.glossary) {\n                return;\n            }\n\n            await CoreUtils.ignoreErrors(AddonModGlossary.logEntryView(this.entryId, this.componentId!, this.glossary.name));\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    async doRefresh(refresher?: IonRefresher): Promise<void> {\n        if (this.glossary?.allowcomments && this.entry && this.entry.id > 0 && this.commentsEnabled && this.comments) {\n            // Refresh comments. Don't add it to promises because we don't want the comments fetch to block the entry fetch.\n            CoreUtils.ignoreErrors(this.comments.doRefresh());\n        }\n\n        try {\n            await CoreUtils.ignoreErrors(AddonModGlossary.invalidateEntry(this.entryId));\n\n            await this.fetchEntry();\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Convenience function to get the glossary entry.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchEntry(): Promise<void> {\n        try {\n            const result = await AddonModGlossary.getEntry(this.entryId);\n\n            this.entry = result.entry;\n            this.ratingInfo = result.ratinginfo;\n\n            if (this.glossary) {\n                // Glossary already loaded, nothing else to load.\n                return;\n            }\n\n            // Load the glossary.\n            this.glossary = await AddonModGlossary.getGlossaryById(this.courseId, this.entry.glossaryid);\n            this.componentId = this.glossary.coursemodule;\n\n            switch (this.glossary.displayformat) {\n                case 'fullwithauthor':\n                case 'encyclopedia':\n                    this.showAuthor = true;\n                    this.showDate = true;\n                    break;\n                case 'fullwithoutauthor':\n                    this.showAuthor = false;\n                    this.showDate = true;\n                    break;\n                default: // Default, and faq, simple, entrylist, continuous.\n                    this.showAuthor = false;\n                    this.showDate = false;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_glossary.errorloadingentry', true);\n        }\n    }\n\n    /**\n     * Function called when rating is updated online.\n     */\n    ratingUpdated(): void {\n        AddonModGlossary.invalidateEntry(this.entryId);\n    }\n\n}\n"],"sourceRoot":"webpack:///"}