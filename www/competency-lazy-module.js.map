{"version":3,"sources":["./src/addons/competency/pages/competencies/competencies.html","./src/addons/competency/pages/competency/competency.html","./src/addons/competency/pages/competencysummary/competencysummary.html","./src/addons/competency/pages/plan/plan.html","./src/addons/competency/pages/planlist/planlist.html","./src/addons/competency/competency-lazy.module.ts","./src/addons/competency/pages/competencies/competencies.ts","./src/addons/competency/pages/competency/competency.ts","./src/addons/competency/pages/competencysummary/competencysummary.ts","./src/addons/competency/pages/plan/plan.ts","./src/addons/competency/pages/planlist/planlist.ts"],"names":[],"mappings":"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","file":"competency-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ title }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competencies.loaded\\\" (ionRefresh)=\\\"refreshCompetencies($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n        <core-loading [hideUntil]=\\\"competencies.loaded\\\">\\n            <ion-list>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let competency of competencies.items\\\"\\n                    [attr.aria-label]=\\\"competency.competency.shortname\\\" (click)=\\\"competencies.select(competency)\\\"\\n                    [attr.aria-current]=\\\"competencies.getItemAriaCurrent(competency)\\\" button detail=\\\"true\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ competency.competency.shortname }} <em>{{competency.competency.idnumber}}</em></p>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"competency.usercompetency\\\"\\n                        [color]=\\\"competency.usercompetency.proficiency ? 'success' : 'danger'\\\">\\n                        {{ competency.usercompetency.gradename }}\\n                    </ion-badge>\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"competency.usercompetencycourse\\\"\\n                        [color]=\\\"competency.usercompetencycourse.proficiency ? 'success' : 'danger'\\\">\\n                        {{ competency.usercompetencycourse.gradename }}\\n                    </ion-badge>\\n                </ion-item>\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1 *ngIf=\\\"competency\\\">\\n            {{ competency.competency.competency.shortname }} <small>{{ competency.competency.competency.idnumber }}</small>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competencyLoaded\\\" (ionRefresh)=\\\"refreshCompetency($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"competencyLoaded\\\">\\n        <ion-card *ngIf=\\\"user\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\n                <ion-label><h2>{{ user.fullname }}</h2></ion-label>\\n            </ion-item>\\n        </ion-card>\\n\\n        <ion-card *ngIf=\\\"competency\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competency.competency.competency.description\\\">\\n                <ion-label>\\n                    <core-format-text [text]=\\\"competency.competency.competency.description\\\" [contextLevel]=\\\"contextLevel\\\"\\n                        [contextInstanceId]=\\\"contextInstanceId\\\">\\n                    </core-format-text>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap only-links\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.path' | translate }}</p>\\n                    <p>\\n                        <a *ngIf=\\\"competency.competency.comppath.showlinks\\\"\\n                            [href]=\\\"competency.competency.comppath.pluginbaseurl + '/competencies.php?competencyframeworkid=' +\\n                            competency.competency.comppath.framework.id + '&pagecontextid=' +\\n                            competency.competency.comppath.pagecontextid\\\"\\n                            core-link>\\n                            {{ competency.competency.comppath.framework.name }}\\n                        </a>\\n                        <ng-container *ngIf=\\\"!competency.competency.comppath.showlinks\\\">\\n                            {{ competency.competency.comppath.framework.name }}\\n                        </ng-container>\\n                        &nbsp;/&nbsp;\\n                        <ng-container *ngFor=\\\"let ancestor of competency.competency.comppath.ancestors\\\">\\n                            <button *ngIf=\\\"competency.competency.comppath.showlinks\\\" (click)=\\\"openCompetencySummary(ancestor.id)\\\"\\n                                class=\\\"as-link\\\">\\n                                {{ ancestor.name }}\\n                            </button>\\n                            <ng-container *ngIf=\\\"!competency.competency.comppath.showlinks\\\">{{ ancestor.name }}</ng-container>\\n                            <ng-container *ngIf=\\\"!ancestor.last\\\">&nbsp;/&nbsp;</ng-container>\\n                        </ng-container>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.crossreferencedcompetencies' | translate }}</p>\\n                    <p *ngIf=\\\"!competency.competency.hasrelatedcompetencies\\\">\\n                        {{ 'addon.competency.nocrossreferencedcompetencies' | translate }}\\n                    </p>\\n                    <ng-container *ngIf=\\\"competency.competency.hasrelatedcompetencies\\\">\\n                        <p *ngFor=\\\"let relatedcomp of competency.competency.relatedcompetencies\\\">\\n                            <button (click)=\\\"openCompetencySummary(relatedcomp.id)\\\" class=\\\"as-link\\\">\\n                                {{ relatedcomp.shortname }} - {{ relatedcomp.idnumber }}\\n                            </button>\\n                        </p>\\n                    </ng-container>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"coursemodules\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.activities' | translate }}</p>\\n                    <p *ngIf=\\\"coursemodules.length == 0\\\">\\n                        {{ 'addon.competency.noactivities' | translate }}\\n                    </p>\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let activity of coursemodules\\\" [href]=\\\"activity.url\\\"\\n                        [attr.aria-label]=\\\"activity.name\\\" core-link capture=\\\"true\\\">\\n                        <img slot=\\\"start\\\" core-external-content [src]=\\\"activity.iconurl\\\" alt=\\\"\\\" *ngIf=\\\"activity.iconurl\\\"\\n                            class=\\\"core-module-icon\\\">\\n                        <ion-label>\\n                            <core-format-text [text]=\\\"activity.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"activity.id\\\"\\n                                [courseId]=\\\"courseId\\\">\\n                            </core-format-text>\\n                        </ion-label>\\n                    </ion-item>\\n                </ion-label>\\n            </ion-item>\\n            <ng-container *ngIf=\\\"userCompetency\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competency.usercompetency && competency.usercompetency!.status\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.reviewstatus' | translate }}</p>\\n                        <p>{{ competency.usercompetency!.statusname }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.proficient' | translate }}</p>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" color=\\\"success\\\" *ngIf=\\\"userCompetency.proficiency\\\">\\n                        {{ 'core.yes' | translate }}\\n                    </ion-badge>\\n                    <ion-badge slot=\\\"end\\\" color=\\\"danger\\\" *ngIf=\\\"!userCompetency.proficiency\\\">\\n                        {{ 'core.no' | translate }}\\n                    </ion-badge>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.rating' | translate }}</p>\\n                    </ion-label>\\n                    <ion-badge color=\\\"dark\\\" slot=\\\"end\\\">{{ userCompetency.gradename }}</ion-badge>\\n                </ion-item>\\n            </ng-container>\\n        </ion-card>\\n\\n        <div *ngIf=\\\"competency\\\">\\n            <h3 class=\\\"ion-margin-horizontal\\\">{{ 'addon.competency.evidence' | translate }}</h3>\\n            <p class=\\\"ion-margin-horizontal\\\" *ngIf=\\\"competency.evidence.length == 0\\\">\\n                {{ 'addon.competency.noevidence' | translate }}\\n            </p>\\n            <ion-card *ngFor=\\\"let evidence of competency.evidence\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"evidence.actionuser\\\" core-user-link [userId]=\\\"evidence.actionuser.id\\\"\\n                    [courseId]=\\\"courseId\\\">\\n                    <core-user-avatar [user]=\\\"evidence.actionuser\\\" slot=\\\"start\\\"></core-user-avatar>\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ evidence.actionuser.fullname }}</p>\\n                        <p>{{ evidence.timemodified * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <p><ion-badge color=\\\"dark\\\">{{ evidence.gradename }}</ion-badge></p>\\n                        <p class=\\\"ion-margin-top\\\" *ngIf=\\\"evidence.description\\\">{{ evidence.description }}</p>\\n                        <blockquote *ngIf=\\\"evidence.note\\\">{{ evidence.note }}</blockquote>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-card>\\n        </div>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1 *ngIf=\\\"competency\\\">\\n            {{ competency.competency.shortname }} <small>{{ competency.competency.idnumber }}</small>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competencyLoaded\\\" (ionRefresh)=\\\"refreshCompetency($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"competencyLoaded\\\">\\n        <ion-card *ngIf=\\\"competency\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competency.competency.description\\\">\\n                <ion-label>\\n                    <core-format-text [text]=\\\"competency.competency.description\\\" [contextLevel]=\\\"contextLevel\\\"\\n                        [contextInstanceId]=\\\"contextInstanceId\\\">\\n                    </core-format-text>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.path' | translate }}</p>\\n                    <p>{{ competency.comppath.framework.name }}\\n                        <ng-container *ngFor=\\\"let ancestor of competency.comppath.ancestors\\\">\\n                            &nbsp;/&nbsp;\\n                            <button class=\\\"as-link\\\" (click)=\\\"openCompetencySummary(ancestor.id)\\\">\\n                                {{ ancestor.name }}\\n                            </button>\\n                        </ng-container>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-card>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1 *ngIf=\\\"plan\\\">{{plan.plan.name}}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshLearningPlan($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <ion-card *ngIf=\\\"user\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\n                    <h2>{{ user.fullname }}</h2>\\n                </ion-label>\\n            </ion-item>\\n       </ion-card>\\n        <ion-card *ngIf=\\\"plan\\\">\\n            <ion-list>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.plan.description\\\" lines=\\\"none\\\">\\n                    <ion-label>\\n                        <p>\\n                            <core-format-text [text]=\\\"plan.plan.description\\\" contextLevel=\\\"user\\\"\\n                                [contextInstanceId]=\\\"plan.plan.userid\\\">\\n                            </core-format-text>\\n                        </p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.status' | translate }}</p>\\n                        <p>{{ plan.plan.statusname }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.plan.duedate > 0\\\" lines=\\\"none\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.duedate' | translate }}</p>\\n                        <p>{{ plan.plan.duedate * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.plan.template\\\" lines=\\\"none\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.template' | translate }}</p>\\n                        <p>{{ plan.plan.template.shortname }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\n                    <ion-label id=\\\"addon-competency-plan-{{plan.plan.id}}-progress\\\">\\n                        <p class=\\\"item-heading\\\">{{ 'addon.competency.progress' | translate }}</p>\\n                        <p>\\n                            {{ 'addon.competency.xcompetenciesproficientoutofy' | translate:\\n                                {$a: {x: plan.proficientcompetencycount, y: plan.competencycount} } }}\\n                        </p>\\n                        <core-progress-bar [progress]=\\\"plan.proficientcompetencypercentage\\\"\\n                            [text]=\\\"plan.proficientcompetencypercentageformatted\\\"\\n                            ariaDescribedBy=\\\"addon-competency-plan-{{plan.plan.id}}-progress\\\">\\n                        </core-progress-bar>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-list>\\n        </ion-card>\\n        <ion-card *ngIf=\\\"plan\\\">\\n            <ion-card-header class=\\\"ion-text-wrap\\\">\\n                <ion-card-title>{{ 'addon.competency.learningplancompetencies' | translate }}</ion-card-title>\\n            </ion-card-header>\\n            <ion-list>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"plan.competencycount == 0\\\">\\n                    <ion-label>\\n                        <p>{{ 'addon.competency.nocompetencies' | translate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let competency of plan.competencies\\\"\\n                    (click)=\\\"openCompetency(competency.competency.id)\\\"\\n                    [attr.aria-label]=\\\"competency.competency.shortname\\\" detail=\\\"true\\\" button>\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{competency.competency.shortname}} <em>{{competency.competency.idnumber}}</em></p>\\n                    </ion-label>\\n                    <ion-badge *ngIf=\\\"competency.usercompetencyplan\\\" slot=\\\"end\\\"\\n                        [color]=\\\"competency.usercompetencyplan.proficiency ? 'success' : 'danger'\\\">\\n                            {{ competency.usercompetencyplan.gradename }}\\n                        </ion-badge>\\n                    <ion-badge *ngIf=\\\"!competency.usercompetencyplan\\\" slot=\\\"end\\\"\\n                        [color]=\\\"competency.usercompetency.proficiency ? 'success' : 'danger'\\\">\\n                        {{ competency.usercompetency.gradename }}\\n                    </ion-badge>\\n                </ion-item>\\n            </ion-list>\\n        </ion-card>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.competency.userplans' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!plans.loaded\\\" (ionRefresh)=\\\"refreshLearningPlans($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n        <core-loading [hideUntil]=\\\"plans.loaded\\\">\\n            <core-empty-box *ngIf=\\\"plans.empty\\\" icon=\\\"fas-route\\\" [message]=\\\"'addon.competency.noplanswerecreated' | translate\\\">\\n\\n            </core-empty-box>\\n            <ion-list *ngIf=\\\"!plans.empty\\\" class=\\\"ion-no-margin\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let plan of plans.items\\\" [attr.aria-label]=\\\"plan.name\\\"\\n                    (click)=\\\"plans.select(plan)\\\" [attr.aria-current]=\\\"plans.getItemAriaCurrent(plan)\\\" button detail=\\\"true\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ plan.name }}</p>\\n                        <p *ngIf=\\\"plan.duedate > 0\\\">\\n                            {{ 'addon.competency.duedate' | translate }}:&nbsp;\\n                            {{ plan.duedate * 1000 | coreFormatDate :'strftimedatetimeshort' }}\\n                        </p>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" class=\\\"ion-text-wrap\\\" [color]=\\\"plan.statuscolor\\\">{{ plan.statusname }}</ion-badge>\\n                </ion-item>\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n    </ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonCompetencyPlanPage } from './pages/plan/plan';\nimport { AddonCompetencyPlanListPage } from './pages/planlist/planlist';\nimport { AddonCompetencyCompetenciesPage } from './pages/competencies/competencies';\nimport { AddonCompetencyCompetencyPage } from './pages/competency/competency';\nimport { AddonCompetencyCompetencySummaryPage } from './pages/competencysummary/competencysummary';\nimport { AddonCompetencyCourseCompetenciesPage } from './pages/coursecompetencies/coursecompetencies.page';\nimport { AddonCompetencyCourseCompetenciesPageModule } from './pages/coursecompetencies/coursecompetencies.module';\nimport { AddonCompetencyMainMenuHandlerService } from './services/handlers/mainmenu';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        data: {\n            mainMenuTabRoot: AddonCompetencyMainMenuHandlerService.PAGE_NAME,\n        },\n        component: AddonCompetencyPlanListPage,\n    },\n    {\n        path: 'competencies',\n        component: AddonCompetencyCompetenciesPage,\n    },\n    {\n        path: 'competencies/:competencyId',\n        component: AddonCompetencyCompetencyPage,\n    },\n    {\n        path: 'course/:courseId',\n        component: AddonCompetencyCourseCompetenciesPage,\n    },\n    {\n        path: 'summary/:competencyId',\n        component: AddonCompetencyCompetencySummaryPage,\n    },\n    {\n        path: ':planId',\n        component: AddonCompetencyPlanPage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: 'summary/:competencyId',\n        component: AddonCompetencyCompetencySummaryPage,\n    },\n    {\n        path: 'competencies',\n        component: AddonCompetencyCompetenciesPage,\n        children: [\n            {\n                path: ':competencyId',\n                component: AddonCompetencyCompetencyPage,\n            },\n        ],\n    },\n    {\n        path: 'course/:courseId',\n        component: AddonCompetencyCourseCompetenciesPage,\n    },\n    {\n        path: '',\n        data: {\n            mainMenuTabRoot: AddonCompetencyMainMenuHandlerService.PAGE_NAME,\n        },\n        component: AddonCompetencyPlanListPage,\n        children: [\n            {\n                path: ':planId',\n                component: AddonCompetencyPlanPage,\n            },\n\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonCompetencyCourseCompetenciesPageModule,\n    ],\n    declarations: [\n        AddonCompetencyPlanPage,\n        AddonCompetencyPlanListPage,\n        AddonCompetencyCompetenciesPage,\n        AddonCompetencyCompetencyPage,\n        AddonCompetencyCompetencySummaryPage,\n    ],\n})\nexport class AddonCompetencyLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport {\n    AddonCompetencyDataForPlanPageCompetency, AddonCompetencyDataForCourseCompetenciesPageCompetency, AddonCompetency,\n} from '../../services/competency';\nimport { Params, ActivatedRoute } from '@angular/router';\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\nimport { Translate } from '@singletons';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreError } from '@classes/errors/error';\n\n/**\n * Page that displays the list of competencies of a learning plan.\n */\n@Component({\n    selector: 'page-addon-competency-competencies',\n    templateUrl: 'competencies.html',\n})\nexport class AddonCompetencyCompetenciesPage implements AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected planId?: number;\n    protected courseId?: number;\n    protected userId?: number;\n\n    competenciesLoaded = false;\n    competencies: AddonCompetencyListManager;\n    title = '';\n\n    constructor(protected route: ActivatedRoute) {\n        this.planId = CoreNavigator.getRouteNumberParam('planId', { route });\n        if (!this.planId) {\n            this.courseId = CoreNavigator.getRouteNumberParam('courseId', { route });\n            this.userId = CoreNavigator.getRouteNumberParam('userId', { route });\n        }\n\n        this.competencies =\n            new AddonCompetencyListManager(AddonCompetencyCompetenciesPage, this.planId, this.courseId, this.userId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchCompetencies();\n\n        this.competencies.start(this.splitView);\n    }\n\n    /**\n     * Fetches the competencies and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchCompetencies(): Promise<void> {\n        try {\n            if (this.planId) {\n\n                const response = await AddonCompetency.getLearningPlan(this.planId);\n\n                if (response.competencycount <= 0) {\n                    throw new CoreError(Translate.instant('addon.competency.errornocompetenciesfound'));\n                }\n\n                this.title = response.plan.name;\n                this.userId = response.plan.userid;\n\n                this.competencies.setItems(response.competencies);\n            } else if (this.courseId) {\n                const response = await AddonCompetency.getCourseCompetencies(this.courseId, this.userId);\n                this.title = Translate.instant('addon.competency.coursecompetencies');\n\n                this.competencies.setItems(response.competencies);\n            } else {\n                throw null;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting competencies data.');\n        }\n    }\n\n    /**\n     * Refreshes the competencies.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshCompetencies(refresher?: IonRefresher): Promise<void> {\n        try {\n            if (this.planId) {\n                await AddonCompetency.invalidateLearningPlan(this.planId);\n            } else {\n                await AddonCompetency.invalidateCourseCompetencies(this.courseId!, this.userId);\n            }\n\n        } finally {\n            this.fetchCompetencies().finally(() => {\n                refresher?.complete();\n            });\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.competencies.destroy();\n    }\n\n}\n\ntype AddonCompetencyDataForPlanPageCompetencyFormatted =\n    AddonCompetencyDataForPlanPageCompetency | AddonCompetencyDataForCourseCompetenciesPageCompetency;\n\n/**\n * Helper class to manage competencies list.\n */\nclass AddonCompetencyListManager extends CorePageItemsListManager<AddonCompetencyDataForPlanPageCompetencyFormatted> {\n\n    planId?: number;\n    courseId?: number;\n    userId?: number;\n\n    constructor(pageComponent: unknown, planId?: number, courseId?: number, userId?: number) {\n        super(pageComponent);\n        this.planId = planId;\n        this.courseId = courseId;\n        this.userId = userId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemPath(competency: AddonCompetencyDataForPlanPageCompetencyFormatted): string {\n        return String(competency.competency.id);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemQueryParams(): Params {\n        if (this.planId) {\n            return { planId: this.planId };\n        } else {\n            return { courseId: this.courseId, userId: this.userId };\n        }\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonCompetencyHelper } from '@addons/competency/services/competency-helper';\nimport { Component, OnInit } from '@angular/core';\nimport { CoreCourseModuleSummary } from '@features/course/services/course';\nimport { CoreUserSummary } from '@features/user/services/user';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { Translate } from '@singletons';\nimport {\n    AddonCompetencyDataForUserCompetencySummaryWSResponse,\n    AddonCompetencyUserCompetencyPlan,\n    AddonCompetencyUserCompetency,\n    AddonCompetencyUserCompetencyCourse,\n    AddonCompetency,\n    AddonCompetencyDataForUserCompetencySummaryInPlanWSResponse,\n    AddonCompetencyDataForUserCompetencySummaryInCourseWSResponse,\n} from '@addons/competency/services/competency';\nimport { CoreNavigator } from '@services/navigator';\nimport { IonRefresher } from '@ionic/angular';\nimport { ContextLevel } from '@/core/constants';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonCompetencyMainMenuHandlerService } from '@addons/competency/services/handlers/mainmenu';\n\n/**\n * Page that displays the competency information.\n */\n@Component({\n    selector: 'page-addon-competency-competency',\n    templateUrl: 'competency.html',\n})\nexport class AddonCompetencyCompetencyPage implements OnInit {\n\n    competencyLoaded = false;\n    competencyId!: number;\n    planId?: number;\n    courseId?: number;\n    userId?: number;\n    planStatus?: number;\n    coursemodules?: CoreCourseModuleSummary[];\n    user?: CoreUserSummary;\n    competency?: AddonCompetencyDataForUserCompetencySummaryWSResponse;\n    userCompetency?: AddonCompetencyUserCompetencyPlan | AddonCompetencyUserCompetency | AddonCompetencyUserCompetencyCourse;\n    contextLevel?: string;\n    contextInstanceId?: number;\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.competencyId = CoreNavigator.getRouteNumberParam('competencyId')!;\n        this.planId = CoreNavigator.getRouteNumberParam('planId');\n        if (!this.planId) {\n            this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n            this.userId = CoreNavigator.getRouteNumberParam('userId');\n        }\n\n        try {\n            await this.fetchCompetency();\n\n            const name = this.competency && this.competency.competency && this.competency.competency.competency &&\n                    this.competency.competency.competency.shortname;\n\n            if (this.planId) {\n                CoreUtils.ignoreErrors(AddonCompetency.logCompetencyInPlanView(\n                    this.planId,\n                    this.competencyId,\n                    this.planStatus!,\n                    name,\n                    this.userId,\n                ));\n            } else {\n                CoreUtils.ignoreErrors(\n                    AddonCompetency.logCompetencyInCourseView(this.courseId!, this.competencyId, name, this.userId),\n                );\n            }\n        } finally {\n            this.competencyLoaded = true;\n        }\n    }\n\n    /**\n     * Fetches the competency and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchCompetency(): Promise<void> {\n\n        try {\n            let competency: AddonCompetencyDataForUserCompetencySummaryInPlanWSResponse |\n            AddonCompetencyDataForUserCompetencySummaryInCourseWSResponse;\n\n            if (this.planId) {\n                this.planStatus = undefined;\n\n                competency = await AddonCompetency.getCompetencyInPlan(this.planId, this.competencyId);\n            } else if (this.courseId) {\n                competency = await AddonCompetency.getCompetencyInCourse(this.courseId, this.competencyId, this.userId);\n            } else {\n                throw null;\n            }\n\n            // Calculate the context.\n            if (this.courseId) {\n                this.contextLevel = ContextLevel.COURSE;\n                this.contextInstanceId = this.courseId;\n            } else {\n                this.contextLevel = ContextLevel.USER;\n                this.contextInstanceId = this.userId || competency.usercompetencysummary.user.id;\n            }\n\n            this.competency = competency.usercompetencysummary;\n            this.userCompetency = this.competency.usercompetencyplan || this.competency.usercompetency;\n\n            if ('plan' in competency) {\n                this.planStatus = competency.plan.status;\n                this.competency.usercompetency!.statusname =\n                    AddonCompetencyHelper.getCompetencyStatusName(this.competency.usercompetency!.status);\n            } else {\n                this.userCompetency = this.competency.usercompetencycourse;\n                this.coursemodules = competency.coursemodules;\n            }\n\n            if (this.competency.user.id != CoreSites.getCurrentSiteUserId()) {\n                // Get the user profile from the returned object.\n                this.user = this.competency.user;\n            }\n\n            this.competency.evidence.forEach((evidence) => {\n                if (evidence.descidentifier) {\n                    const key = 'addon.competency.' + evidence.descidentifier;\n                    evidence.description = Translate.instant(key, { $a: evidence.desca });\n                }\n            });\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting competency data.');\n        }\n    }\n\n    /**\n     * Refreshes the competency.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshCompetency(refresher: IonRefresher): Promise<void> {\n        try {\n            if (this.planId) {\n                await AddonCompetency.invalidateCompetencyInPlan(this.planId, this.competencyId);\n            } else {\n                await AddonCompetency.invalidateCompetencyInCourse(this.courseId!, this.competencyId);\n            }\n\n        } finally {\n            this.fetchCompetency().finally(() => {\n                refresher?.complete();\n            });\n        }\n    }\n\n    /**\n     * Opens the summary of a competency.\n     *\n     * @param competencyId\n     */\n    openCompetencySummary(competencyId: number): void {\n        CoreNavigator.navigateToSitePath(\n            '/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/summary/' + competencyId,\n            {\n                params: { contextLevel: this.contextLevel, contextInstanceId: this.contextInstanceId },\n            },\n        );\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { ContextLevel } from '@/core/constants';\nimport { AddonCompetencySummary, AddonCompetency } from '@addons/competency/services/competency';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonCompetencyMainMenuHandlerService } from '@addons/competency/services/handlers/mainmenu';\n\n/**\n * Page that displays the competency summary.\n */\n@Component({\n    selector: 'page-addon-competency-competency-summary',\n    templateUrl: 'competencysummary.html',\n})\nexport class AddonCompetencyCompetencySummaryPage implements OnInit {\n\n    competencyLoaded = false;\n    competencyId!: number;\n    competency?: AddonCompetencySummary;\n    contextLevel?: ContextLevel;\n    contextInstanceId?: number;\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.competencyId = CoreNavigator.getRouteNumberParam('competencyId')!;\n        this.contextLevel = CoreNavigator.getRouteParam<ContextLevel>('contextLevel');\n        this.contextInstanceId = CoreNavigator.getRouteNumberParam('contextInstanceId');\n\n        try {\n            await this.fetchCompetency();\n            const name = this.competency!.competency && this.competency!.competency.shortname;\n\n            CoreUtils.ignoreErrors(AddonCompetency.logCompetencyView(this.competencyId, name));\n        } finally {\n            this.competencyLoaded = true;\n        }\n    }\n\n    /**\n     * Fetches the competency summary and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchCompetency(): Promise<void> {\n        try {\n            const result = await AddonCompetency.getCompetencySummary(this.competencyId);\n            if (!this.contextLevel || typeof this.contextInstanceId == 'undefined') {\n                // Context not specified, use user context.\n                this.contextLevel = ContextLevel.USER;\n                this.contextInstanceId = result.usercompetency!.userid;\n            }\n\n            this.competency = result.competency;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting competency summary data.');\n        }\n    }\n\n    /**\n     * Refreshes the competency summary.\n     *\n     * @param refresher Refresher.\n     */\n    refreshCompetency(refresher: IonRefresher): void {\n        AddonCompetency.invalidateCompetencySummary(this.competencyId).finally(() => {\n            this.fetchCompetency().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * Opens the summary of a competency.\n     *\n     * @param competencyId\n     */\n    openCompetencySummary(competencyId: number): void {\n        CoreNavigator.navigateToSitePath(\n            '/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/summary/' + competencyId,\n            {\n                params: { contextLevel: this.contextLevel, contextInstanceId: this.contextInstanceId },\n            },\n        );\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { AddonCompetencyDataForPlanPageWSResponse, AddonCompetency } from '../../services/competency';\nimport { AddonCompetencyHelper } from '../../services/competency-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreUserProfile } from '@features/user/services/user';\nimport { IonRefresher } from '@ionic/angular';\nimport { AddonCompetencyMainMenuHandlerService } from '@addons/competency/services/handlers/mainmenu';\n\n/**\n * Page that displays a learning plan.\n */\n@Component({\n    selector: 'page-addon-competency-plan',\n    templateUrl: 'plan.html',\n})\nexport class AddonCompetencyPlanPage implements OnInit {\n\n    protected planId!: number;\n    loaded = false;\n    plan?: AddonCompetencyDataForPlanPageWSResponse;\n    user?: CoreUserProfile;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.planId = CoreNavigator.getRouteNumberParam('planId')!;\n\n        this.fetchLearningPlan().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Fetches the learning plan and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchLearningPlan(): Promise<void> {\n        try {\n            const plan = await AddonCompetency.getLearningPlan(this.planId);\n            plan.plan.statusname = AddonCompetencyHelper.getPlanStatusName(plan.plan.status);\n\n            // Get the user profile image.\n            this.user = await AddonCompetencyHelper.getProfile(plan.plan.userid);\n\n            this.plan = plan;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting learning plan data.');\n        }\n    }\n\n    /**\n     * Navigates to a particular competency.\n     *\n     * @param competencyId\n     */\n    openCompetency(competencyId: number): void {\n        CoreNavigator.navigateToSitePath(\n            '/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/competencies/' + competencyId,\n            { params: { planId: this.planId } },\n        );\n    }\n\n    /**\n     * Refreshes the learning plan.\n     *\n     * @param refresher Refresher.\n     */\n    refreshLearningPlan(refresher: IonRefresher): void {\n        AddonCompetency.invalidateLearningPlan(this.planId).finally(() => {\n            this.fetchLearningPlan().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { AddonCompetencyProvider, AddonCompetencyPlan, AddonCompetency } from '../../services/competency';\nimport { AddonCompetencyHelper } from '../../services/competency-helper';\nimport { CoreNavigator } from '@services/navigator';\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\n\n/**\n * Page that displays the list of learning plans.\n */\n@Component({\n    selector: 'page-addon-competency-planlist',\n    templateUrl: 'planlist.html',\n})\nexport class AddonCompetencyPlanListPage implements OnInit, AfterViewInit, OnDestroy {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected userId?: number;\n    plans: AddonCompetencyPlanListManager;\n\n    constructor() {\n        this.plans = new AddonCompetencyPlanListManager(AddonCompetencyPlanListPage);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.userId = CoreNavigator.getRouteNumberParam('userId');\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchLearningPlans();\n\n        this.plans.start(this.splitView);\n    }\n\n    /**\n     * Fetches the learning plans and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchLearningPlans(): Promise<void> {\n        try {\n            const plans = await AddonCompetency.getLearningPlans(this.userId);\n            plans.forEach((plan: AddonCompetencyPlanFormatted) => {\n                plan.statusname = AddonCompetencyHelper.getPlanStatusName(plan.status);\n                switch (plan.status) {\n                    case AddonCompetencyProvider.STATUS_ACTIVE:\n                        plan.statuscolor = 'success';\n                        break;\n                    case AddonCompetencyProvider.STATUS_COMPLETE:\n                        plan.statuscolor = 'danger';\n                        break;\n                    default:\n                        plan.statuscolor = 'warning';\n                        break;\n                }\n            });\n            this.plans.setItems(plans);\n\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting learning plans data.');\n        }\n    }\n\n    /**\n     * Refreshes the learning plans.\n     *\n     * @param refresher Refresher.\n     */\n    refreshLearningPlans(refresher: IonRefresher): void {\n        AddonCompetency.invalidateLearningPlans(this.userId).finally(() => {\n            this.fetchLearningPlans().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.plans.destroy();\n    }\n\n}\n\n/**\n * Competency plan with some calculated data.\n */\ntype AddonCompetencyPlanFormatted = AddonCompetencyPlan & {\n    statuscolor?: string; // Calculated in the app. Color of the plan's status.\n};\n\n/**\n * Helper class to manage plan list.\n */\nclass AddonCompetencyPlanListManager extends CorePageItemsListManager<AddonCompetencyPlanFormatted> {\n\n    constructor(pageComponent: unknown) {\n        super(pageComponent);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemPath(plan: AddonCompetencyPlanFormatted): string {\n        return String(plan.id);\n    }\n\n}\n"],"sourceRoot":"webpack:///"}