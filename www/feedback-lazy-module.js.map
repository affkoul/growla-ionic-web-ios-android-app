{"version":3,"sources":["./src/addons/mod/feedback/pages/index/index.html","./src/addons/mod/feedback/pages/respondents/respondents.html","./src/addons/mod/feedback/feedback-lazy.module.ts","./src/addons/mod/feedback/pages/index/index.ts","./src/addons/mod/feedback/pages/respondents/respondents.ts"],"names":[],"mappings":"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","file":"feedback-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module?.id\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <!-- The buttons defined by the component will be added in here. -->\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!activityComponent?.loaded\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n\\n    <addon-mod-feedback-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" [group]=\\\"selectedGroup\\\" [tab]=\\\"selectedTab\\\"\\n        (dataRetrieved)=\\\"updateData($event)\\\"></addon-mod-feedback-index>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.mod_feedback.responses' |translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshFeedback($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n        <core-loading [hideUntil]=\\\"loaded\\\">\\n            <ion-list class=\\\"ion-no-margin\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"groupInfo && (groupInfo.separateGroups || groupInfo.visibleGroups)\\\">\\n                    <ion-label id=\\\"addon-feedback-groupslabel\\\">\\n                        <ng-container *ngIf=\\\"groupInfo.separateGroups\\\">{{'core.groupsseparate' | translate }}</ng-container>\\n                        <ng-container *ngIf=\\\"groupInfo.visibleGroups\\\">{{'core.groupsvisible' | translate }}</ng-container>\\n                    </ion-label>\\n                    <ion-select [(ngModel)]=\\\"selectedGroup\\\" (ionChange)=\\\"loadAttempts(selectedGroup)\\\"\\n                        aria-labelledby=\\\"addon-feedback-groupslabel\\\" interface=\\\"action-sheet\\\"\\n                        [interfaceOptions]=\\\"{header: 'core.group' | translate}\\\">\\n                        <ion-select-option *ngFor=\\\"let groupOpt of groupInfo.groups\\\" [value]=\\\"groupOpt.id\\\">\\n                            {{groupOpt.name}}\\n                        </ion-select-option>\\n                    </ion-select>\\n                </ion-item>\\n\\n                <ng-container *ngIf=\\\"responses.responses.total > 0\\\">\\n                    <ion-item-divider>\\n                        <ion-label>\\n                            <h2>{{ 'addon.mod_feedback.non_anonymous_entries' | translate : {$a: responses.responses.total } }}</h2>\\n                        </ion-label>\\n                    </ion-item-divider>\\n                    <ion-item *ngFor=\\\"let attempt of responses.responses.attempts\\\" class=\\\"ion-text-wrap\\\" button detail=\\\"true\\\"\\n                        (click)=\\\"responses.select(attempt)\\\" [attr.aria-current]=\\\"responses.getItemAriaCurrent(attempt)\\\">\\n                        <core-user-avatar [user]=\\\"attempt\\\" slot=\\\"start\\\"></core-user-avatar>\\n                        <ion-label>\\n                            <p class=\\\"item-heading\\\">{{ attempt.fullname }}</p>\\n                            <p *ngIf=\\\"attempt.timemodified\\\">{{attempt.timemodified * 1000 | coreFormatDate }}</p>\\n                        </ion-label>\\n                    </ion-item>\\n\\n                    <!-- Button and spinner to show more attempts. -->\\n                    <ion-button *ngIf=\\\"responses.responses.canLoadMore && !loadingMore\\\" class=\\\"ion-margin\\\" expand=\\\"block\\\"\\n                        (click)=\\\"loadAttempts()\\\">\\n                        {{ 'core.loadmore' | translate }}\\n                    </ion-button>\\n                    <ion-item *ngIf=\\\"responses.responses.canLoadMore && loadingMore\\\" class=\\\"ion-text-center\\\">\\n                        <ion-label><ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner></ion-label>\\n                    </ion-item>\\n                </ng-container>\\n\\n                <ng-container *ngIf=\\\"responses.anonResponses.total > 0\\\">\\n                    <ion-item-divider>\\n                        <ion-label>\\n                            <h2>{{ 'addon.mod_feedback.anonymous_entries' |translate : {$a: responses.anonResponses.total } }}</h2>\\n                        </ion-label>\\n                    </ion-item-divider>\\n                    <ion-item *ngFor=\\\"let attempt of responses.anonResponses.attempts\\\" class=\\\"ion-text-wrap\\\" button detail=\\\"true\\\"\\n                        (click)=\\\"responses.select(attempt)\\\" [attr.aria-current]=\\\"responses.getItemAriaCurrent(attempt)\\\">\\n                        <ion-label>\\n                            <h2>{{ 'addon.mod_feedback.response_nr' |translate }}: {{attempt.number}}</h2>\\n                        </ion-label>\\n                    </ion-item>\\n\\n                    <!-- Button and spinner to show more attempts. -->\\n                    <ion-button *ngIf=\\\"responses.anonResponses.canLoadMore && !loadingMore\\\" class=\\\"ion-margin\\\" expand=\\\"block\\\"\\n                        (click)=\\\"loadAttempts()\\\">\\n                        {{ 'core.loadmore' | translate }}\\n                    </ion-button>\\n                    <ion-item *ngIf=\\\"responses.anonResponses.canLoadMore && loadingMore\\\" class=\\\"ion-text-center\\\">\\n                        <ion-label><ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner></ion-label>\\n                    </ion-item>\\n                </ng-container>\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModFeedbackComponentsModule } from './components/components.module';\nimport { AddonModFeedbackIndexPage } from './pages/index/index';\nimport { AddonModFeedbackRespondentsPage } from './pages/respondents/respondents';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\n\nconst commonRoutes: Routes = [\n    {\n        path: ':courseId/:cmId',\n        component: AddonModFeedbackIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/form',\n        loadChildren: () => import('./pages/form/form.module').then(m => m.AddonModFeedbackFormPageModule),\n    },\n    {\n        path: ':courseId/:cmId/nonrespondents',\n        loadChildren: () => import('./pages/nonrespondents/nonrespondents.module')\n            .then(m => m.AddonModFeedbackNonRespondentsPageModule),\n    },\n];\n\nconst mobileRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/respondents',\n        component: AddonModFeedbackRespondentsPage,\n    },\n    {\n        path: ':courseId/:cmId/respondents/attempt/:attemptId',\n        loadChildren: () => import('./pages/attempt/attempt.module').then(m => m.AddonModFeedbackAttemptPageModule),\n    },\n];\n\nconst tabletRoutes: Routes = [\n    ...commonRoutes,\n    {\n        path: ':courseId/:cmId/respondents',\n        component: AddonModFeedbackRespondentsPage,\n        children: [\n            {\n                path: 'attempt/:attemptId',\n                loadChildren: () => import('./pages/attempt/attempt.module').then(m => m.AddonModFeedbackAttemptPageModule),\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonModFeedbackComponentsModule,\n    ],\n    declarations: [\n        AddonModFeedbackIndexPage,\n        AddonModFeedbackRespondentsPage,\n    ],\n})\nexport class AddonModFeedbackLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\nimport { CoreNavigator } from '@services/navigator';\nimport { AddonModFeedbackIndexComponent } from '../../components/index/index';\n\n/**\n * Page that displays a feedback.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-index',\n    templateUrl: 'index.html',\n})\nexport class AddonModFeedbackIndexPage extends CoreCourseModuleMainActivityPage<AddonModFeedbackIndexComponent> implements OnInit {\n\n    @ViewChild(AddonModFeedbackIndexComponent) activityComponent?: AddonModFeedbackIndexComponent;\n\n    selectedTab?: string;\n    selectedGroup?: number;\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        super.ngOnInit();\n        this.selectedTab = CoreNavigator.getRouteParam('tab');\n        this.selectedGroup = CoreNavigator.getRouteNumberParam('group');\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackWSAnonAttempt,\n    AddonModFeedbackWSAttempt,\n    AddonModFeedbackWSFeedback,\n} from '../../services/feedback';\nimport { AddonModFeedbackHelper, AddonModFeedbackResponsesAnalysis } from '../../services/feedback-helper';\n\n/**\n * Page that displays feedback respondents.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-respondents',\n    templateUrl: 'respondents.html',\n})\nexport class AddonModFeedbackRespondentsPage implements AfterViewInit {\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    protected cmId!: number;\n    protected courseId!: number;\n    protected page = 0;\n    protected feedback?: AddonModFeedbackWSFeedback;\n\n    responses: AddonModFeedbackResponsesManager;\n    selectedGroup!: number;\n    groupInfo?: CoreGroupInfo;\n    loaded = false;\n    loadingMore = false;\n\n    constructor(\n        route: ActivatedRoute,\n    ) {\n        this.responses = new AddonModFeedbackResponsesManager(\n            route.component,\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n\n        await this.fetchData();\n\n        this.responses.start(this.splitView);\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @param refresh Empty events array first.\n     * @return Promise resolved when done.\n     */\n    async fetchData(refresh: boolean = false): Promise<void> {\n        this.page = 0;\n        this.responses.resetItems();\n\n        try {\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            this.groupInfo = await CoreGroups.getActivityGroupInfo(this.cmId);\n\n            this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, this.groupInfo);\n\n            await this.loadGroupAttempts(this.selectedGroup);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n\n            if (!refresh) {\n                // Some call failed on first fetch, go back.\n                CoreNavigator.back();\n            }\n        }\n    }\n\n    /**\n     * Load Group attempts.\n     *\n     * @param groupId If defined it will change group if not, it will load more attempts for the same group.\n     * @return Resolved with the attempts loaded.\n     */\n    protected async loadGroupAttempts(groupId?: number): Promise<void> {\n        if (typeof groupId == 'undefined') {\n            this.page++;\n            this.loadingMore = true;\n        } else {\n            this.selectedGroup = groupId;\n            this.page = 0;\n            this.responses.resetItems();\n        }\n\n        try {\n            const responses = await AddonModFeedbackHelper.getResponsesAnalysis(this.feedback!.id, {\n                groupId: this.selectedGroup,\n                page: this.page,\n                cmId: this.cmId,\n            });\n\n            this.responses.setResponses(responses);\n        } finally {\n            this.loadingMore = false;\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Change selected group or load more attempts.\n     *\n     * @param groupId Group ID selected. If not defined, it will load more attempts.\n     */\n    async loadAttempts(groupId?: number): Promise<void> {\n        try {\n            await this.loadGroupAttempts(groupId);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        }\n    }\n\n    /**\n     * Refresh the attempts.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshFeedback(refresher: IonRefresher): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(CoreGroups.invalidateActivityGroupInfo(this.cmId));\n        if (this.feedback) {\n            promises.push(AddonModFeedback.invalidateResponsesAnalysisData(this.feedback.id));\n        }\n\n        try {\n            await CoreUtils.ignoreErrors(Promise.all(promises));\n\n            await this.fetchData(true);\n        } finally {\n            refresher.complete();\n        }\n    }\n\n}\n\n/**\n * Type of items that can be held by the entries manager.\n */\ntype EntryItem = AddonModFeedbackWSAttempt | AddonModFeedbackWSAnonAttempt;\n\n/**\n * Entries manager.\n */\nclass AddonModFeedbackResponsesManager extends CorePageItemsListManager<EntryItem> {\n\n    responses: AddonModFeedbackResponses = {\n        attempts: [],\n        total: 0,\n        canLoadMore: false,\n    };\n\n    anonResponses: AddonModFeedbackAnonResponses = {\n        attempts: [],\n        total: 0,\n        canLoadMore: false,\n    };\n\n    constructor(pageComponent: unknown) {\n        super(pageComponent);\n    }\n\n    /**\n     * Update responses.\n     *\n     * @param responses Responses.\n     */\n    setResponses(responses: AddonModFeedbackResponsesAnalysis): void {\n        this.responses.total = responses.totalattempts;\n        this.anonResponses.total = responses.totalanonattempts;\n\n        if (this.anonResponses.attempts.length < responses.totalanonattempts) {\n            this.anonResponses.attempts = this.anonResponses.attempts.concat(responses.anonattempts);\n        }\n        if (this.responses.attempts.length < responses.totalattempts) {\n            this.responses.attempts = this.responses.attempts.concat(responses.attempts);\n        }\n\n        this.anonResponses.canLoadMore = this.anonResponses.attempts.length < responses.totalanonattempts;\n        this.responses.canLoadMore = this.responses.attempts.length < responses.totalattempts;\n\n        this.setItems((<EntryItem[]> this.responses.attempts).concat(this.anonResponses.attempts));\n    }\n\n    /**\n     * @inheritdoc\n     */\n    resetItems(): void {\n        super.resetItems();\n        this.responses.total = 0;\n        this.responses.attempts = [];\n        this.anonResponses.total = 0;\n        this.anonResponses.attempts = [];\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemPath(entry: EntryItem): string {\n        return `attempt/${entry.id}`;\n    }\n\n}\n\ntype AddonModFeedbackResponses = {\n    attempts: AddonModFeedbackWSAttempt[];\n    total: number;\n    canLoadMore: boolean;\n};\n\ntype AddonModFeedbackAnonResponses = {\n    attempts: AddonModFeedbackWSAnonAttempt[];\n    total: number;\n    canLoadMore: boolean;\n};\n"],"sourceRoot":"webpack:///"}