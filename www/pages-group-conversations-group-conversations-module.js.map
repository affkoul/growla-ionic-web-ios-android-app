{"version":3,"sources":["./src/addons/messages/pages/group-conversations/group-conversations.html","./src/addons/messages/pages/group-conversations/group-conversations.module.ts","./src/addons/messages/pages/group-conversations/group-conversations.page.ts"],"names":[],"mappings":"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","file":"pages-group-conversations-group-conversations-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.messages.messages' | translate }}</h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button fill=\\\"clear\\\" (click)=\\\"gotoSearch()\\\" [attr.aria-label]=\\\"'addon.messages.searchcombined' | translate\\\">\\n                <ion-icon name=\\\"fas-search\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n            </ion-button>\\n            <ion-button (click)=\\\"gotoSettings()\\\" [attr.aria-label]=\\\"'addon.messages.messagepreferences' | translate\\\">\\n                <ion-icon name=\\\"fas-cog\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n            </ion-button>\\n            <!-- Add an empty context menu so discussion page can add items in split view,\\n                otherwise the menu disappears in some cases. -->\\n            <core-context-menu></core-context-menu>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded || !currentListEl\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\n            <ion-list>\\n                <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" (click)=\\\"gotoContacts()\\\" detail=\\\"true\\\" button>\\n                    <ion-icon name=\\\"fas-address-book\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    <ion-label><h2>{{ 'addon.messages.contacts' | translate }}</h2></ion-label>\\n                    <ion-badge *ngIf=\\\"contactRequestsCount > 0\\\" slot=\\\"end\\\" aria-hidden=\\\"true\\\">{{contactRequestsCount}}</ion-badge>\\n                    <span *ngIf=\\\"contactRequestsCount > 0\\\" class=\\\"sr-only\\\">\\n                        {{ 'addon.messages.pendingcontactrequests' | translate:{$a: contactRequestsCount} }}\\n                    </span>\\n                </ion-item>\\n                <!-- Favourite conversations. -->\\n                <ion-item\\n                    button\\n                    class=\\\"ion-text-wrap divider\\\"\\n                    (click)=\\\"toggle(favourites)\\\"\\n                    sticky=\\\"true\\\"\\n                    [attr.aria-label]=\\\"(favourites.expanded ? 'core.collapse' : 'core.expand') | translate\\\"\\n                    [attr.aria-expanded]=\\\"favourites.expanded\\\"\\n                    aria-controls=\\\"addon-messages-groupconversations-favourite\\\"\\n                    role=\\\"heading\\\"\\n                    detail=\\\"false\\\"\\n                >\\n                    <ion-icon *ngIf=\\\"!favourites.expanded\\\" name=\\\"fas-caret-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\">\\n                    </ion-icon>\\n                    <ion-icon *ngIf=\\\"favourites.expanded\\\" name=\\\"fas-caret-down\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    <ion-label><h2>{{ 'core.favourites' | translate }} ({{ favourites.count }})</h2></ion-label>\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"favourites.unread\\\" aria-hidden=\\\"true\\\">{{ favourites.unread }}</ion-badge>\\n                    <span *ngIf=\\\"favourites.unread\\\" class=\\\"sr-only\\\">\\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: favourites.unread} }}\\n                    </span>\\n                </ion-item>\\n                <div [hidden]=\\\"!favourites.conversations || !favourites.expanded || favourites.loading\\\" #favlist\\n                    id=\\\"addon-messages-groupconversations-favourite\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"conversationsTemplate; context: {conversations: favourites.conversations}\\\">\\n                    </ng-container>\\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\n                    <core-infinite-loading [enabled]=\\\"favourites.canLoadMore\\\" (action)=\\\"loadMoreConversations(favourites, $event)\\\"\\n                        [error]=\\\"favourites.loadMoreError\\\"></core-infinite-loading>\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"favourites.conversations && favourites.conversations.length == 0\\\">\\n                        <ion-label><p>{{ 'addon.messages.nofavourites' | translate }}</p></ion-label>\\n                    </ion-item>\\n                </div>\\n                <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"favourites.loading\\\">\\n                    <ion-label><ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner></ion-label>\\n                </ion-item>\\n\\n                <!-- Group conversations. -->\\n                <ion-item\\n                    button\\n                    class=\\\"divider ion-text-wrap\\\"\\n                    (click)=\\\"toggle(group)\\\"\\n                    sticky=\\\"true\\\"\\n                    [attr.aria-label]=\\\"(group.expanded ? 'core.collapse' : 'core.expand') | translate\\\"\\n                    [attr.aria-expanded]=\\\"group.expanded\\\"\\n                    aria-controls=\\\"addon-messages-groupconversations-group\\\"\\n                    role=\\\"heading\\\"\\n                    detail=\\\"false\\\"\\n                >\\n                    <ion-icon *ngIf=\\\"!group.expanded\\\" name=\\\"fas-caret-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    <ion-icon *ngIf=\\\"group.expanded\\\" name=\\\"fas-caret-down\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    <ion-label><h2>{{ 'addon.messages.groupconversations' | translate }} ({{ group.count }})</h2></ion-label>\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"group.unread\\\" aria-hidden=\\\"true\\\">{{ group.unread }}</ion-badge>\\n                    <span *ngIf=\\\"group.unread\\\" class=\\\"sr-only\\\">\\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: group.unread} }}\\n                    </span>\\n                </ion-item>\\n                <div [hidden]=\\\"!group.conversations || !group.expanded || group.loading\\\" #grouplist\\n                    id=\\\"addon-messages-groupconversations-group\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"conversationsTemplate; context: {conversations: group.conversations}\\\">\\n                    </ng-container>\\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\n                    <core-infinite-loading [enabled]=\\\"group.canLoadMore\\\" (action)=\\\"loadMoreConversations(group, $event)\\\"\\n                        [error]=\\\"group.loadMoreError\\\"></core-infinite-loading>\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"group.conversations && group.conversations.length == 0\\\">\\n                        <ion-label><p>{{ 'addon.messages.nogroupconversations' | translate }}</p></ion-label>\\n                    </ion-item>\\n                </div>\\n                <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"group.loading\\\">\\n                    <ion-label><ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner></ion-label>\\n                </ion-item>\\n\\n                <ion-item\\n                    button\\n                    class=\\\"divider ion-text-wrap\\\"\\n                    (click)=\\\"toggle(individual)\\\"\\n                    sticky=\\\"true\\\"\\n                    [attr.aria-label]=\\\"(individual.expanded ? 'core.collapse' : 'core.expand') | translate\\\"\\n                    [attr.aria-expanded]=\\\"individual.expanded\\\"\\n                    aria-controls=\\\"addon-messages-groupconversations-individual\\\"\\n                    role=\\\"heading\\\"\\n                    detail=\\\"false\\\"\\n                >\\n                    <ion-icon *ngIf=\\\"!individual.expanded\\\" name=\\\"fas-caret-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\">\\n                    </ion-icon>\\n                    <ion-icon *ngIf=\\\"individual.expanded\\\" name=\\\"fas-caret-down\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    <ion-label>\\n                        <h2>{{ 'addon.messages.individualconversations' | translate }} ({{ individual.count }})</h2>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"individual.unread\\\" aria-hidden=\\\"true\\\">{{ individual.unread }}</ion-badge>\\n                    <span *ngIf=\\\"individual.unread\\\" class=\\\"sr-only\\\">\\n                        {{ 'addon.messages.unreadconversations' | translate:{$a: individual.unread} }}\\n                    </span>\\n                </ion-item>\\n                <div [hidden]=\\\"!individual.conversations || !individual.expanded || individual.loading\\\" #indlist\\n                    id=\\\"addon-messages-groupconversations-individual\\\">\\n                    <ng-container *ngTemplateOutlet=\\\"conversationsTemplate; context: {conversations: individual.conversations}\\\">\\n                    </ng-container>\\n                    <!-- The infinite loading cannot be inside the ng-template, it fails because it doesn't find ion-content. -->\\n                    <core-infinite-loading [enabled]=\\\"individual.canLoadMore\\\" (action)=\\\"loadMoreConversations(individual, $event)\\\"\\n                        [error]=\\\"individual.loadMoreError\\\"></core-infinite-loading>\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"individual.conversations && individual.conversations.length == 0\\\">\\n                        <ion-label><p>{{ 'addon.messages.noindividualconversations' | translate }}</p></ion-label>\\n                    </ion-item>\\n                </div>\\n                <ion-item class=\\\"ion-text-center\\\" *ngIf=\\\"individual.loading\\\">\\n                    <ion-label><ion-spinner [attr.aria-label]=\\\"'core.loading' | translate\\\"></ion-spinner></ion-label>\\n                </ion-item>\\n\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\\n<!-- Template to render a list of conversations. -->\\n<ng-template #conversationsTemplate let-conversations=\\\"conversations\\\">\\n    <ion-item class=\\\"ion-text-wrap addon-message-discussion\\\" *ngFor=\\\"let conversation of conversations\\\" button detail=\\\"false\\\"\\n        [attr.aria-label]=\\\"conversation.name\\\" (click)=\\\"gotoConversation(conversation.id, conversation.userid)\\\"\\n        [attr.aria-current]=\\\"((conversation.id && conversation.id == selectedConversationId) ||\\n            (conversation.userid && conversation.userid == selectedUserId)) ? 'page': 'false'\\\"\\n        id=\\\"addon-message-conversation-{{ conversation.id ? conversation.id : 'user-' + conversation.userid }}\\\">\\n        <!-- Group conversation image. -->\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.type == typeGroup\\\">\\n            <img [src]=\\\"conversation.imageurl\\\" [alt]=\\\"conversation.name\\\" core-external-content\\n            onError=\\\"this.src='assets/img/group-avatar.png'\\\">\\n        </ion-avatar>\\n\\n        <!-- Avatar for individual conversations. -->\\n        <core-user-avatar *ngIf=\\\"conversation.type != typeGroup\\\" core-user-avatar [user]=\\\"conversation.otherUser\\\"\\n            [linkProfile]=\\\"false\\\" [checkOnline]=\\\"conversation.showonlinestatus\\\" slot=\\\"start\\\"></core-user-avatar>\\n\\n        <ion-label>\\n            <div class=\\\"flex-row ion-justify-content-between\\\">\\n                <p class=\\\"item-heading\\\">\\n                    <core-format-text [text]=\\\"conversation.name\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\n                    <ion-icon name=\\\"fas-user-slash\\\" *ngIf=\\\"conversation.isblocked\\\"\\n                        [title]=\\\"'addon.messages.contactblocked' | translate\\\"></ion-icon>\\n                    <ion-icon *ngIf=\\\"conversation.ismuted\\\" name=\\\"fas-volume-mute\\\"\\n                        [title]=\\\"'addon.messages.mutedconversation' | translate\\\"></ion-icon>\\n                </p>\\n                <ion-note *ngIf=\\\"conversation.lastmessagedate > 0 || conversation.unreadcount\\\">\\n                    <span *ngIf=\\\"conversation.lastmessagedate > 0\\\" class=\\\"addon-message-last-message-date\\\">\\n                        {{conversation.lastmessagedate | coreDateDayOrTime}}\\n                    </span>\\n                    <ion-badge *ngIf=\\\"conversation.unreadcount > 0\\\" aria-label=\\\"true\\\">{{ conversation.unreadcount }}</ion-badge>\\n                    <span *ngIf=\\\"conversation.unreadcount > 0\\\" class=\\\"sr-only\\\">\\n                        {{ 'addon.messages.unreadmessages' | translate:{$a: conversation.unreadcount} }}\\n                    </span>\\n                </ion-note>\\n            </div>\\n            <p *ngIf=\\\"conversation.subname\\\"><core-format-text [text]=\\\"conversation.subname\\\" contextLevel=\\\"system\\\"\\n                [contextInstanceId]=\\\"0\\\"></core-format-text></p>\\n            <p class=\\\"addon-message-last-message\\\">\\n                <span *ngIf=\\\"conversation.sentfromcurrentuser\\\" class=\\\"addon-message-last-message-user\\\">\\n                    {{ 'addon.messages.you' | translate }}\\n                </span>\\n                <span *ngIf=\\\"!conversation.sentfromcurrentuser && conversation.type == typeGroup && conversation.members[0]\\\"\\n                    class=\\\"addon-message-last-message-user\\\">{{ conversation.members[0].fullname + ':' }}</span>\\n                <core-format-text clean=\\\"true\\\" singleLine=\\\"true\\\" [text]=\\\"conversation.lastmessage\\\"\\n                    class=\\\"addon-message-last-message-text\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\"></core-format-text>\\n            </p>\\n        </ion-label>\\n    </ion-item>\\n</ng-template>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { AddonMessagesDiscussionRoute } from '@addons/messages/messages-lazy.module';\nimport { CoreScreen } from '@services/screen';\n\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { AddonMessagesGroupConversationsPage } from './group-conversations.page';\nimport { AddonMessagesMainMenuHandlerService } from '@addons/messages/services/handlers/mainmenu';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        data: {\n            mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME,\n        },\n        component: AddonMessagesGroupConversationsPage,\n    },\n    AddonMessagesDiscussionRoute,\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: '',\n        data: {\n            mainMenuTabRoot: AddonMessagesMainMenuHandlerService.PAGE_NAME,\n        },\n        component: AddonMessagesGroupConversationsPage,\n        children: [\n            AddonMessagesDiscussionRoute,\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonMessagesGroupConversationsPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonMessagesGroupConversationsPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { IonContent, IonRefresher } from '@ionic/angular';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesConversationFormatted,\n    AddonMessages,\n    AddonMessagesNewMessagedEventData,\n} from '../../services/messages';\nimport {\n    AddonMessagesOffline,\n    AddonMessagesOfflineAnyMessagesFormatted,\n} from '../../services/messages-offline';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUser } from '@features/user/services/user';\nimport { CorePushNotificationsDelegate } from '@features/pushnotifications/services/push-delegate';\nimport { Platform, Translate } from '@singletons';\nimport { Subscription } from 'rxjs';\nimport { CorePushNotificationsNotificationBasicData } from '@features/pushnotifications/services/pushnotifications';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreScreen } from '@services/screen';\n\n/**\n * Page that displays the list of conversations, including group conversations.\n */\n@Component({\n    selector: 'page-addon-messages-group-conversations',\n    templateUrl: 'group-conversations.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesGroupConversationsPage implements OnInit, OnDestroy {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild('favlist') favListEl?: ElementRef;\n    @ViewChild('grouplist') groupListEl?: ElementRef;\n    @ViewChild('indlist') indListEl?: ElementRef;\n\n    loaded = false;\n    loadingMessage: string;\n    selectedConversationId?: number;\n    selectedUserId?: number;\n    contactRequestsCount = 0;\n    favourites: AddonMessagesGroupConversationOption = {\n        type: undefined,\n        favourites: true,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    group: AddonMessagesGroupConversationOption = {\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP,\n        favourites: false,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    individual: AddonMessagesGroupConversationOption = {\n        type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n        favourites: false,\n        count: 0,\n        unread: 0,\n        conversations: [],\n    };\n\n    typeGroup = AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP;\n    currentListEl?: HTMLElement;\n\n    protected siteId: string;\n    protected currentUserId: number;\n    protected newMessagesObserver: CoreEventObserver;\n    protected pushObserver: Subscription;\n    protected appResumeSubscription: Subscription;\n    protected readChangedObserver: CoreEventObserver;\n    protected cronObserver: CoreEventObserver;\n    protected openConversationObserver: CoreEventObserver;\n    protected updateConversationListObserver: CoreEventObserver;\n    protected contactRequestsCountObserver: CoreEventObserver;\n    protected memberInfoObserver: CoreEventObserver;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.loadingMessage = Translate.instant('core.loading');\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.currentUserId = CoreSites.getCurrentSiteUserId();\n\n        // Update conversations when new message is received.\n        this.newMessagesObserver = CoreEvents.on(\n            AddonMessagesProvider.NEW_MESSAGE_EVENT,\n            (data) => {\n            // Check if the new message belongs to the option that is currently expanded.\n                const expandedOption = this.getExpandedOption();\n                const messageOption = this.getConversationOption(data);\n\n                if (expandedOption != messageOption) {\n                    return; // Message doesn't belong to current list, stop.\n                }\n\n                // Search the conversation to update.\n                const conversation = this.findConversation(data.conversationId, data.userId, expandedOption);\n\n                if (typeof conversation == 'undefined') {\n                // Probably a new conversation, refresh the list.\n                    this.loaded = false;\n                    this.refreshData().finally(() => {\n                        this.loaded = true;\n                    });\n\n                    return;\n                }\n                if (conversation.lastmessage != data.message || conversation.lastmessagedate != data.timecreated / 1000) {\n                    const isNewer = data.timecreated / 1000 > (conversation.lastmessagedate || 0);\n\n                    // An existing conversation has a new message, update the last message.\n                    conversation.lastmessage = data.message;\n                    conversation.lastmessagedate = data.timecreated / 1000;\n\n                    // Sort the affected list.\n                    const option = this.getConversationOption(conversation);\n                    option.conversations = AddonMessages.sortConversations(option.conversations || []);\n\n                    if (isNewer) {\n                    // The last message is newer than the previous one, scroll to top to keep viewing the conversation.\n                        this.content?.scrollToTop();\n                    }\n                }\n            },\n            this.siteId,\n        );\n\n        // Update conversations when a message is read.\n        this.readChangedObserver = CoreEvents.on(AddonMessagesProvider.READ_CHANGED_EVENT, (data) => {\n            if (data.conversationId) {\n                const conversation = this.findConversation(data.conversationId);\n\n                if (typeof conversation != 'undefined') {\n                    // A conversation has been read reset counter.\n                    conversation.unreadcount = 0;\n\n                    // Conversations changed, invalidate them and refresh unread counts.\n                    AddonMessages.invalidateConversations(this.siteId);\n                    AddonMessages.refreshUnreadConversationCounts(this.siteId);\n                }\n            }\n        }, this.siteId);\n\n        // Load a discussion if we receive an event to do so.\n        this.openConversationObserver = CoreEvents.on(\n            AddonMessagesProvider.OPEN_CONVERSATION_EVENT,\n            (data) => {\n                if (data.conversationId || data.userId) {\n                    this.gotoConversation(data.conversationId, data.userId);\n                }\n            },\n            this.siteId,\n        );\n\n        // Refresh the view when the app is resumed.\n        this.appResumeSubscription = Platform.resume.subscribe(() => {\n            if (!this.loaded) {\n                return;\n            }\n            this.loaded = false;\n            this.refreshData().finally(() => {\n                this.loaded = true;\n            });\n        });\n\n        // Update conversations if we receive an event to do so.\n        this.updateConversationListObserver = CoreEvents.on(\n            AddonMessagesProvider.UPDATE_CONVERSATION_LIST_EVENT,\n            (data) => {\n                if (data && data.action == 'mute') {\n                // If the conversation is displayed, change its muted value.\n                    const expandedOption = this.getExpandedOption();\n\n                    if (expandedOption && expandedOption.conversations) {\n                        const conversation = this.findConversation(data.conversationId, undefined, expandedOption);\n                        if (conversation) {\n                            conversation.ismuted = !!data.value;\n                        }\n                    }\n\n                    return;\n                }\n\n                this.refreshData();\n\n            },\n            this.siteId,\n        );\n\n        // If a message push notification is received, refresh the view.\n        this.pushObserver = CorePushNotificationsDelegate.on<CorePushNotificationsNotificationBasicData>('receive')\n            .subscribe((notification) => {\n                // New message received. If it's from current site, refresh the data.\n                if (CoreUtils.isFalseOrZero(notification.notif) && notification.site == this.siteId) {\n                // Don't refresh unread counts, it's refreshed from the main menu handler in this case.\n                    this.refreshData(undefined, false);\n                }\n            });\n\n        // Update unread conversation counts.\n        this.cronObserver = CoreEvents.on(\n            AddonMessagesProvider.UNREAD_CONVERSATION_COUNTS_EVENT,\n            (data) => {\n                this.favourites.unread = data.favourites;\n                this.individual.unread = data.individual + data.self; // Self is only returned if it's not favourite.\n                this.group.unread = data.group;\n            },\n            this.siteId,\n        );\n\n        // Update the contact requests badge.\n        this.contactRequestsCountObserver = CoreEvents.on(\n            AddonMessagesProvider.CONTACT_REQUESTS_COUNT_EVENT,\n            (data) => {\n                this.contactRequestsCount = data.count;\n            },\n            this.siteId,\n        );\n\n        // Update block status of a user.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (!data.userBlocked && !data.userUnblocked) {\n                // The block status has not changed, ignore.\n                    return;\n                }\n\n                const expandedOption = this.getExpandedOption();\n                if (expandedOption == this.individual || expandedOption == this.favourites) {\n                    if (!expandedOption.conversations || expandedOption.conversations.length <= 0) {\n                        return;\n                    }\n\n                    const conversation = this.findConversation(undefined, data.userId, expandedOption);\n                    if (conversation) {\n                        conversation.isblocked = data.userBlocked;\n                    }\n                }\n            },\n            this.siteId,\n        );\n    }\n\n    /**\n     * Component loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        this.route.queryParams.subscribe(async (params) => {\n            // When a child page loads this callback is triggered too.\n            const conversationId =CoreNavigator.getRouteNumberParam('conversationId', { params });\n            const userId = CoreNavigator.getRouteNumberParam('userId', { params });\n            if (conversationId || userId) {\n                // Update the selected ones.\n                this.selectedConversationId = conversationId;\n                this.selectedUserId = userId;\n            }\n        });\n\n        await this.fetchData();\n\n        if (!this.selectedConversationId && !this.selectedUserId && CoreScreen.isTablet) {\n            // Load the first conversation.\n            let conversation: AddonMessagesConversationForList;\n            const expandedOption = this.getExpandedOption();\n\n            if (expandedOption && expandedOption.conversations.length) {\n                conversation = expandedOption.conversations[0];\n\n                if (conversation) {\n                    this.gotoConversation(conversation.id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Fetch conversations.\n     *\n     * @param refreshUnreadCounts Whether to refresh unread counts.\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(refreshUnreadCounts: boolean = true): Promise<void> {\n        // Load the amount of conversations and contact requests.\n        const promises: Promise<unknown>[] = [];\n\n        promises.push(this.fetchConversationCounts());\n\n        // View updated by the events observers.\n        promises.push(AddonMessages.getContactRequestsCount(this.siteId));\n        if (refreshUnreadCounts) {\n            promises.push(AddonMessages.refreshUnreadConversationCounts(this.siteId));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            // The expanded status hasn't been initialized. Do it now.\n            if (typeof this.favourites.expanded == 'undefined' && (this.selectedConversationId || this.selectedUserId)) {\n                // A certain conversation should be opened.\n                // We don't know which option it belongs to, so we need to fetch the data for all of them.\n                const promises: Promise<void>[] = [];\n\n                promises.push(this.fetchDataForOption(this.favourites, false));\n                promises.push(this.fetchDataForOption(this.group, false));\n                promises.push(this.fetchDataForOption(this.individual, false));\n\n                await Promise.all(promises);\n                // All conversations have been loaded, find the one we need to load and expand its option.\n                const conversation = this.findConversation(this.selectedConversationId, this.selectedUserId);\n                if (conversation) {\n                    const option = this.getConversationOption(conversation);\n\n                    await this.expandOption(option);\n\n                    this.loaded = true;\n\n                    return;\n                }\n            }\n\n            // Load the data for the expanded option.\n            await this.fetchDataForExpandedOption();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n        }\n        this.loaded = true;\n    }\n\n    /**\n     * Fetch data for the expanded option.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchDataForExpandedOption(): Promise<void> {\n        if (typeof this.favourites.expanded == 'undefined') {\n            // Calculate which option should be expanded initially.\n            this.favourites.expanded = this.favourites.count != 0 && !this.group.unread && !this.individual.unread;\n            this.group.expanded = !this.favourites.expanded && this.group.count != 0 && !this.individual.unread;\n            this.individual.expanded = !this.favourites.expanded && !this.group.expanded;\n        }\n\n        this.loadCurrentListElement();\n\n        const expandedOption = this.getExpandedOption();\n\n        if (expandedOption) {\n            await this.fetchDataForOption(expandedOption, false);\n        }\n    }\n\n    /**\n     * Fetch data for a certain option.\n     *\n     * @param option The option to fetch data for.\n     * @param loadingMore Whether we are loading more data or just the first ones.\n     * @param getCounts Whether to get counts data.\n     * @return Promise resolved when done.\n     */\n    async fetchDataForOption(\n        option: AddonMessagesGroupConversationOption,\n        loadingMore = false,\n        getCounts = false,\n    ): Promise<void> {\n        option.loadMoreError = false;\n\n        const limitFrom = loadingMore ? option.conversations.length : 0;\n        const promises: Promise<unknown>[] = [];\n\n        let data = {\n            conversations: <AddonMessagesConversationForList[]> [],\n            canLoadMore: false,\n        };\n        let offlineMessages:\n        AddonMessagesOfflineAnyMessagesFormatted[] = [];\n\n        // Get the conversations and, if needed, the offline messages. Always try to get the latest data.\n        promises.push(AddonMessages.invalidateConversations(this.siteId).then(async () => {\n            data = await AddonMessages.getConversations(option.type, option.favourites, limitFrom, this.siteId);\n\n            return;\n        }));\n\n        if (!loadingMore) {\n            promises.push(AddonMessagesOffline.getAllMessages().then((messages) => {\n                offlineMessages = messages;\n\n                return;\n            }));\n        }\n\n        if (getCounts) {\n            promises.push(this.fetchConversationCounts());\n            promises.push(AddonMessages.refreshUnreadConversationCounts(this.siteId));\n        }\n\n        await Promise.all(promises);\n\n        if (loadingMore) {\n            option.conversations = option.conversations.concat(data.conversations);\n            option.canLoadMore = data.canLoadMore;\n        } else {\n            option.conversations = data.conversations;\n            option.canLoadMore = data.canLoadMore;\n\n            if (offlineMessages && offlineMessages.length) {\n                await this.loadOfflineMessages(option, offlineMessages);\n\n                // Sort the conversations, the offline messages could affect the order.\n                option.conversations = AddonMessages.sortConversations(option.conversations);\n            }\n        }\n    }\n\n    /**\n     * Fetch conversation counts.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchConversationCounts(): Promise<void> {\n        // Always try to get the latest data.\n        await AddonMessages.invalidateConversationCounts(this.siteId);\n\n        const counts = await AddonMessages.getConversationCounts(this.siteId);\n        this.favourites.count = counts.favourites;\n        this.individual.count = counts.individual + counts.self; // Self is only returned if it's not favourite.\n        this.group.count = counts.group;\n    }\n\n    /**\n     * Find a conversation in the list of loaded conversations.\n     *\n     * @param conversationId The conversation ID to search.\n     * @param userId User ID to search (if no conversationId).\n     * @param option The option to search in. If not defined, search in all options.\n     * @return Conversation.\n     */\n    protected findConversation(\n        conversationId?: number,\n        userId?: number,\n        option?: AddonMessagesGroupConversationOption,\n    ): AddonMessagesConversationForList | undefined {\n\n        if (conversationId) {\n            const conversations: AddonMessagesConversationForList[] = option\n                ? option.conversations\n                : (this.favourites.conversations.concat(this.group.conversations).concat(this.individual.conversations));\n\n            return conversations.find((conv) => conv.id == conversationId);\n        }\n\n        const conversations = option\n            ? option.conversations\n            : this.favourites.conversations.concat(this.individual.conversations);\n\n        return conversations.find((conv) => conv.userid == userId);\n    }\n\n    /**\n     * Get the option that is currently expanded, undefined if they are all collapsed.\n     *\n     * @return Option currently expanded.\n     */\n    protected getExpandedOption(): AddonMessagesGroupConversationOption | undefined {\n        if (this.favourites.expanded) {\n            return this.favourites;\n        } else if (this.group.expanded) {\n            return this.group;\n        } else if (this.individual.expanded) {\n            return this.individual;\n        }\n    }\n\n    /**\n     * Navigate to contacts view.\n     */\n    gotoContacts(): void {\n        CoreNavigator.navigateToSitePath('contacts');\n    }\n\n    /**\n     * Navigate to a particular conversation.\n     *\n     * @param conversationId Conversation Id to load.\n     * @param userId User of the conversation. Only if there is no conversationId.\n     * @param messageId Message to scroll after loading the discussion. Used when searching.\n     */\n    gotoConversation(conversationId?: number, userId?: number, messageId?: number): void {\n        this.selectedConversationId = conversationId;\n        this.selectedUserId = userId;\n\n        const params: Params = {};\n        if (conversationId) {\n            params.conversationId = conversationId;\n        }\n        if (userId) {\n            params.userId = userId;\n        }\n        if (messageId) {\n            params.message = messageId;\n        }\n\n        const splitViewLoaded = CoreNavigator.isCurrentPathInTablet('**/messages/group-conversations/discussion');\n        const path = (splitViewLoaded ? '../' : '') + 'discussion';\n        CoreNavigator.navigate(path, { params });\n    }\n\n    /**\n     * Navigate to message settings.\n     */\n    gotoSettings(): void {\n        CoreNavigator.navigateToSitePath('../preferences');\n    }\n\n    /**\n     * Function to load more conversations.\n     *\n     * @param option The option to fetch data for.\n     * @param infiniteComplete Infinite scroll complete function. Only used from core-infinite-loading.\n     * @return Promise resolved when done.\n     */\n    async loadMoreConversations(option: AddonMessagesGroupConversationOption, infiniteComplete?: () => void): Promise<void> {\n        try {\n            await this.fetchDataForOption(option, true);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n            option.loadMoreError = true;\n        }\n\n        infiniteComplete && infiniteComplete();\n    }\n\n    /**\n     * Load offline messages into the conversations.\n     *\n     * @param option The option where the messages should be loaded.\n     * @param messages Offline messages.\n     * @return Promise resolved when done.\n     */\n    protected async loadOfflineMessages(\n        option: AddonMessagesGroupConversationOption,\n        messages: AddonMessagesOfflineAnyMessagesFormatted[],\n    ): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        messages.forEach((message) => {\n            if ('conversationid' in message) {\n                // It's an existing conversation. Search it in the current option.\n                let conversation = this.findConversation(message.conversationid, undefined, option);\n\n                if (conversation) {\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\n                    if (typeof conversation.lastmessage === 'undefined' || conversation.lastmessage === null ||\n                            !conversation.lastmessagepending || (conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n\n                        this.addLastOfflineMessage(conversation, message);\n                    }\n                } else {\n                    // Conversation not found, it could be an old one or the message could belong to another option.\n                    conversation = {\n                        id: message.conversationid,\n                        type: message.conversation?.type || AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                        membercount: message.conversation?.membercount || 0,\n                        ismuted: message.conversation?.ismuted || false,\n                        isfavourite: message.conversation?.isfavourite || false,\n                        isread: message.conversation?.isread || false,\n                        members: message.conversation?.members || [],\n                        messages: message.conversation?.messages || [],\n                        candeletemessagesforallusers: message.conversation?.candeletemessagesforallusers || false,\n                        userid: 0, // Faked data.\n                        name: message.conversation?.name,\n                        imageurl: message.conversation?.imageurl || '',\n                    };\n\n                    if (this.getConversationOption(conversation) == option) {\n                        // Message belongs to current option, add the conversation.\n                        this.addLastOfflineMessage(conversation, message);\n                        this.addOfflineConversation(conversation);\n                    }\n                }\n            } else if (option.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL) {\n                // It's a new conversation. Check if we already created it (there is more than one message for the same user).\n                const conversation = this.findConversation(undefined, message.touserid, option);\n\n                message.text = message.smallmessage;\n\n                if (conversation) {\n                    // Check if it's the last message. Offline messages are considered more recent than sent messages.\n                    if ((conversation.lastmessagedate || 0) <= message.timecreated / 1000) {\n                        this.addLastOfflineMessage(conversation, message);\n                    }\n                } else {\n                    // Get the user data and create a new conversation if it belongs to the current option.\n                    promises.push(CoreUser.getProfile(message.touserid, undefined, true).catch(() => {\n                        // User not found.\n                    }).then((user) => {\n                        const conversation: AddonMessagesConversationForList = {\n                            id: 0,\n                            type: AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_INDIVIDUAL,\n                            membercount: 0, // Faked data.\n                            ismuted: false, // Faked data.\n                            isfavourite: false, // Faked data.\n                            isread: false, // Faked data.\n                            members: [], // Faked data.\n                            messages: [], // Faked data.\n                            candeletemessagesforallusers: false,\n                            userid: message.touserid,\n                            name: user ? user.fullname : String(message.touserid),\n                            imageurl: user ? user.profileimageurl : '',\n                        };\n\n                        this.addLastOfflineMessage(conversation, message);\n                        this.addOfflineConversation(conversation);\n\n                        return;\n                    }));\n                }\n            }\n        });\n\n        await Promise.all(promises);\n    }\n\n    /**\n     * Add an offline conversation into the right list of conversations.\n     *\n     * @param conversation Offline conversation to add.\n     */\n    protected addOfflineConversation(conversation: AddonMessagesConversationForList): void {\n        const option = this.getConversationOption(conversation);\n        option.conversations.unshift(conversation);\n    }\n\n    /**\n     * Add a last offline message into a conversation.\n     *\n     * @param conversation Conversation where to put the last message.\n     * @param message Offline message to add.\n     */\n    protected addLastOfflineMessage(\n        conversation: AddonMessagesConversationForList,\n        message: AddonMessagesOfflineAnyMessagesFormatted,\n    ): void {\n        conversation.lastmessage = message.text;\n        conversation.lastmessagedate = message.timecreated / 1000;\n        conversation.lastmessagepending = true;\n        conversation.sentfromcurrentuser = true;\n    }\n\n    /**\n     * Given a conversation, return its option (favourites, group, individual).\n     *\n     * @param conversation Conversation to check.\n     * @return Option object.\n     */\n    protected getConversationOption(\n        conversation: AddonMessagesConversationForList | AddonMessagesNewMessagedEventData,\n    ): AddonMessagesGroupConversationOption {\n        if (conversation.isfavourite) {\n            return this.favourites;\n        }\n\n        if (conversation.type == AddonMessagesProvider.MESSAGE_CONVERSATION_TYPE_GROUP) {\n            return this.group;\n        }\n\n        return this.individual;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @param refreshUnreadCounts Whether to refresh unread counts.\n     * @return Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher, refreshUnreadCounts: boolean = true): Promise<void> {\n        // Don't invalidate conversations and so, they always try to get latest data.\n        try {\n            await AddonMessages.invalidateContactRequestsCountCache(this.siteId);\n        } finally {\n            try {\n                await this.fetchData(refreshUnreadCounts);\n            } finally {\n                if (refresher) {\n                    refresher?.complete();\n                }\n            }\n        }\n    }\n\n    /**\n     * Toogle the visibility of an option (expand/collapse).\n     *\n     * @param option The option to expand/collapse.\n     */\n    toggle(option: AddonMessagesGroupConversationOption): void {\n        if (option.expanded) {\n            // Already expanded, close it.\n            option.expanded = false;\n            this.loadCurrentListElement();\n        } else {\n            // Pass getCounts=true to update the counts everytime the user expands an option.\n            this.expandOption(option, true).catch((error) => {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingdiscussions', true);\n            });\n        }\n    }\n\n    /**\n     * Expand a certain option.\n     *\n     * @param option The option to expand.\n     * @param getCounts Whether to get counts data.\n     * @return Promise resolved when done.\n     */\n    protected async expandOption(option: AddonMessagesGroupConversationOption, getCounts = false): Promise<void> {\n        // Collapse all and expand the right one.\n        this.favourites.expanded = false;\n        this.group.expanded = false;\n        this.individual.expanded = false;\n\n        option.expanded = true;\n        option.loading = true;\n\n        try {\n            await this.fetchDataForOption(option, false, getCounts);\n\n            this.loadCurrentListElement();\n        } catch (error) {\n            option.expanded = false;\n\n            throw error;\n        } finally {\n            option.loading = false;\n        }\n\n    }\n\n    /**\n     * Load the current list element based on the expanded list.\n     */\n    protected loadCurrentListElement(): void {\n        if (this.favourites.expanded) {\n            this.currentListEl = this.favListEl && this.favListEl.nativeElement;\n        } else if (this.group.expanded) {\n            this.currentListEl = this.groupListEl && this.groupListEl.nativeElement;\n        } else if (this.individual.expanded) {\n            this.currentListEl = this.indListEl && this.indListEl.nativeElement;\n        } else {\n            this.currentListEl = undefined;\n        }\n    }\n\n    /**\n     * Navigate to the search page.\n     */\n    gotoSearch(): void {\n        CoreNavigator.navigateToSitePath('search');\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.newMessagesObserver?.off();\n        this.appResumeSubscription?.unsubscribe();\n        this.pushObserver?.unsubscribe();\n        this.readChangedObserver?.off();\n        this.cronObserver?.off();\n        this.openConversationObserver?.off();\n        this.updateConversationListObserver?.off();\n        this.contactRequestsCountObserver?.off();\n        this.memberInfoObserver?.off();\n    }\n\n}\n\n/**\n * Conversation options.\n */\nexport type AddonMessagesGroupConversationOption = {\n    type?: number; // Option type.\n    favourites: boolean; // Whether it contains favourites conversations.\n    count: number; // Number of conversations.\n    unread?: number; // Number of unread conversations.\n    expanded?: boolean; // Whether the option is currently expanded.\n    loading?: boolean; // Whether the option is being loaded.\n    canLoadMore?: boolean; // Whether it can load more data.\n    loadMoreError?: boolean; // Whether there was an error loading more conversations.\n    conversations: AddonMessagesConversationForList[]; // List of conversations.\n};\n\n/**\n * Formatted conversation with some calculated data for the list.\n */\nexport type AddonMessagesConversationForList = AddonMessagesConversationFormatted & {\n    lastmessagepending?: boolean; // Calculated in the app. Whether last message is pending to be sent.\n};\n"],"sourceRoot":"webpack:///"}