{"version":3,"sources":["./src/core/features/settings/pages/synchronization/synchronization.html","./src/core/features/settings/pages/synchronization/synchronization.module.ts","./src/core/features/settings/pages/synchronization/synchronization.ts"],"names":[],"mappings":"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","file":"pages-synchronization-synchronization-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'core.settings.synchronization' | translate }}</h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <core-navbar-buttons>\\n                <ion-button (click)=\\\"showInfo()\\\" [attr.aria-label]=\\\"'core.info' | translate\\\">\\n                    <ion-icon name=\\\"fas-info-circle\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                </ion-button>\\n            </core-navbar-buttons>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-loading [hideUntil]=\\\"sitesLoaded\\\">\\n        <ion-item-divider>\\n            <ion-label>\\n                <h2>{{ 'core.settings.syncsettings' | translate }}</h2>\\n            </ion-label>\\n        </ion-item-divider>\\n        <ion-item class=\\\"ion-text-wrap\\\">\\n            <ion-label>{{ 'core.settings.enablesyncwifi' | translate }}</ion-label>\\n            <ion-toggle slot=\\\"end\\\" [(ngModel)]=\\\"syncOnlyOnWifi\\\" (ngModelChange)=\\\"syncOnlyOnWifiChanged()\\\">\\n            </ion-toggle>\\n        </ion-item>\\n        <ion-item-divider>\\n            <ion-label>\\n                <h2>{{ 'core.settings.sites' | translate }}</h2>\\n            </ion-label>\\n        </ion-item-divider>\\n        <ion-item *ngFor=\\\"let site of sites\\\" [attr.aria-current]=\\\"site.id == currentSiteId ? 'page' : 'false'\\\" class=\\\"ion-text-wrap\\\">\\n            <ion-label>\\n                <p class=\\\"item-heading\\\">\\n                    <core-format-text [text]=\\\"site.siteName\\\" clean=\\\"true\\\" [siteId]=\\\"site.id\\\"></core-format-text>\\n                </p>\\n                <p>{{ site.fullName }}</p>\\n                <p>{{ site.siteUrl }}</p>\\n            </ion-label>\\n            <core-button-with-spinner [loading]=\\\"isSynchronizing(site.id)\\\" slot=\\\"end\\\">\\n                <ion-button fill=\\\"clear\\\"  (click)=\\\"synchronize(site.id)\\\"\\n                    [title]=\\\"site.siteName\\\" [attr.aria-label]=\\\"'core.settings.synchronizenow' | translate\\\">\\n                    <ion-icon name=\\\"fas-sync-alt\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                </ion-button>\\n            </core-button-with-spinner>\\n        </ion-item>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreSettingsSynchronizationPage } from './synchronization';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CoreSettingsSynchronizationPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreSettingsSynchronizationPage,\n    ],\n    exports: [RouterModule],\n})\nexport class CoreSettingsSynchronizationPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { CoreConstants } from '@/core/constants';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { CoreSites, CoreSiteBasicInfo } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreConfig } from '@services/config';\nimport { CoreSettingsHelper } from '@features/settings/services/settings-helper';\nimport { Translate } from '@singletons';\n\n/**\n * Page that displays the synchronization settings.\n */\n@Component({\n    selector: 'page-core-app-settings-synchronization',\n    templateUrl: 'synchronization.html',\n})\nexport class CoreSettingsSynchronizationPage implements OnInit, OnDestroy {\n\n    sites: CoreSiteBasicInfo[] = [];\n    sitesLoaded = false;\n    currentSiteId = '';\n    syncOnlyOnWifi = false;\n    protected isDestroyed = false;\n    protected sitesObserver: CoreEventObserver;\n\n    constructor() {\n\n        this.currentSiteId = CoreSites.getCurrentSiteId();\n\n        this.sitesObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, async (data) => {\n            const site = await CoreSites.getSite(data.siteId);\n\n            const siteEntry = this.sites.find((siteEntry) => siteEntry.id == site.id);\n            if (siteEntry) {\n                const siteInfo = site.getInfo();\n\n                siteEntry.siteName = site.getSiteName();\n\n                if (siteInfo) {\n                    siteEntry.siteUrl = siteInfo.siteurl;\n                    siteEntry.fullName = siteInfo.fullname;\n                }\n            }\n        });\n    }\n\n    /**\n     * View loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.sites = await CoreSites.getSortedSites();\n        } catch {\n            // Ignore errors.\n        }\n\n        this.sitesLoaded = true;\n\n        this.syncOnlyOnWifi = await CoreConfig.get(CoreConstants.SETTINGS_SYNC_ONLY_ON_WIFI, true);\n    }\n\n    /**\n     * Called when sync only on wifi setting is enabled or disabled.\n     */\n    syncOnlyOnWifiChanged(): void {\n        CoreConfig.set(CoreConstants.SETTINGS_SYNC_ONLY_ON_WIFI, this.syncOnlyOnWifi ? 1 : 0);\n    }\n\n    /**\n     * Syncrhonizes a site.\n     *\n     * @param siteId Site ID.\n     */\n    async synchronize(siteId: string): Promise<void> {\n        // Using syncOnlyOnWifi false to force manual sync.\n        try {\n            await CoreSettingsHelper.synchronizeSite(false, siteId);\n        } catch (error) {\n            if (this.isDestroyed) {\n                return;\n            }\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.settings.errorsyncsite', true);\n        }\n    }\n\n    /**\n     * Returns true if site is beeing synchronized.\n     *\n     * @param siteId Site ID.\n     * @return True if site is beeing synchronized, false otherwise.\n     */\n    isSynchronizing(siteId: string): boolean {\n        return !!CoreSettingsHelper.getSiteSyncPromise(siteId);\n    }\n\n    /**\n     * Show information about sync actions.\n     */\n    showInfo(): void {\n        CoreDomUtils.showAlert(\n            Translate.instant('core.help'),\n            Translate.instant('core.settings.synchronizenowhelp'),\n        );\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        this.isDestroyed = true;\n        this.sitesObserver?.off();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}