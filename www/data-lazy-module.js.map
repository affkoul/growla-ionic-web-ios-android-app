{"version":3,"sources":["./src/addons/mod/data/pages/edit/edit.html","./src/addons/mod/data/pages/entry/entry.html","./src/addons/mod/data/pages/index/index.html","./src/addons/mod/data/data-lazy.module.ts","./src/addons/mod/data/pages/edit/edit.ts","./src/addons/mod/data/pages/entry/entry.ts","./src/addons/mod/data/pages/index/index.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,4jBAA6f,2BAA2B,qYAAqY,oCAAoC,mFAAmF,qCAAqC,sPAAsP,iCAAiC,oIAAoI,eAAe,qIAAqI,UAAU,2FAA2F,UAAU,2TAA2T,E;;;;;;;;;;;;ACAjiE;AAAe,yuBAA0qB,oCAAoC,seAAse,oCAAoC,eAAe,GAAG,iTAAiT,oCAAoC,mFAAmF,qCAAqC,sPAAsP,iCAAiC,oIAAoI,eAAe,yKAAyK,aAAa,uHAAuH,aAAa,qzDAAqzD,+BAA+B,8NAA8N,2BAA2B,gQAAgQ,E;;;;;;;;;;;;ACAvvJ;AAAe,gzBAAivB,oCAAoC,oOAAoO,E;;;;;;;;;;;;ACAxgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEuB;AACf;AACc;AACwC;AACgB;AACpB;AACzC;AAC2C;AACf;AACrB;AACG;AACA;AAE5D,MAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,iBAAiB;QACvB,SAAS,EAAE,yEAAqB;KACnC;IACD;QACI,IAAI,EAAE,sBAAsB;QAC5B,SAAS,EAAE,sEAAoB;QAC/B,aAAa,EAAE,CAAC,+DAAa,CAAC;KACjC;IACD;QACI,IAAI,EAAE,+BAA+B;QACrC,SAAS,EAAE,sEAAoB;QAC/B,aAAa,EAAE,CAAC,+DAAa,CAAC;KACjC;IACD;QACI,IAAI,EAAE,0BAA0B;QAChC,SAAS,EAAE,yEAAqB;KACnC;CACJ,CAAC;IAkBW,sBAAsB,SAAtB,sBAAsB;CAAG;AAAzB,sBAAsB;IAhBlC,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;YAC7B,oEAAgB;YAChB,0FAA4B;YAC5B,yGAAmC;YACnC,4GAA4B;YAC5B,wGAA0B;YAC1B,4HAA8B;SACjC;QACD,YAAY,EAAE;YACV,yEAAqB;YACrB,yEAAqB;YACrB,sEAAoB;SACvB;KACJ,CAAC;GACW,sBAAsB,CAAG;AAAH;;;;;;;;;;;;;AChEnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAE8C;AACpC;AACO;AAE8B;AAC3B;AACT;AACiB;AACT;AACR;AACO;AACN;AACK;AACV;AACQ;AACiD;AAYpE;AACmC;AAEhE;;GAEG;IAMU,oBAAoB,SAApB,oBAAoB;IAqC7B;QA/BU,gBAAW,GAAwB,EAAE,CAAC;QAEtC,YAAO,GAAG,KAAK,CAAC;QAChB,eAAU,GAAG,KAAK,CAAC,CAAC,0DAA0D;QAE9E,cAAS,GAAG,KAAK,CAAC;QAG5B,WAAM,GAAsC,EAAE,CAAC;QAI/C,UAAK,GAAG,EAAE,CAAC;QACX,cAAS,GAAG,oEAAoB,CAAC,SAAS,CAAC;QAC3C,WAAM,GAAG,KAAK,CAAC;QACf,kBAAa,GAAG,CAAC,CAAC;QAClB,aAAQ,GAAG,EAAE,CAAC;QAEd,mBAAc,GAAG,EAAE,CAAC;QAEpB,iBAAY,GAAoB,CAAC,0GAAmC,CAAC,CAAC;QAStE,WAAM,GAA2B,EAAE,CAAC;QAGhC,IAAI,CAAC,MAAM,GAAG,yDAAS,CAAC,gBAAgB,EAAE,CAAC;QAC3C,IAAI,CAAC,QAAQ,GAAG,IAAI,wDAAS,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,IAAI,CAAC,MAAM,GAAG,iEAAa,CAAC,aAAa,CAAmB,QAAQ,CAAE,CAAC;QACvE,IAAI,CAAC,OAAO,GAAG,iEAAa,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;QACzE,IAAI,CAAC,QAAQ,GAAG,iEAAa,CAAC,mBAAmB,CAAC,UAAU,CAAE,CAAC;QAC/D,IAAI,CAAC,aAAa,GAAG,iEAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAErE,6EAA6E;QAC7E,IAAI,CAAC,SAAS,GAAG,OAAO,IAAI,CAAC,OAAO,IAAI,WAAW,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QAExE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;QAE9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACG,QAAQ;;YACV,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBAChC,OAAO,IAAI,CAAC;aACf;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAEtC,IAAI,OAAO,GAAG,yEAAkB,CAAC,kBAAkB,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACtG,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;YAE1F,IAAI,OAAO,EAAE;gBACT,oDAAoD;gBACpD,MAAM,iEAAY,CAAC,WAAW,CAAC,sDAAS,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;aACpF;YAED,8CAA8C;YAC9C,MAAM,KAAK,GAAG,MAAM,yEAAkB,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,KAAM,CAAC,QAAQ,CAAC,CAAC;YAC1G,6FAAgB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAEtC,2DAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAEnE,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAED;;;;;OAKG;IACa,cAAc,CAAC,OAAO,GAAG,KAAK;;;YAC1C,IAAI;gBACA,IAAI,CAAC,QAAQ,GAAG,MAAM,4DAAY,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC9E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;gBAC9C,IAAI,CAAC,QAAQ,GAAG,qBAAqB,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAEzD,IAAI,CAAC,WAAW,GAAG,MAAM,4DAAY,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5F,IAAI,CAAC,MAAM,GAAG,gEAAS,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAE9D,MAAM,KAAK,GAAG,MAAM,yEAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC;gBACtG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;gBAEzB,sBAAsB;gBACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;gBAExC,8DAA8D;gBAC9D,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACjB,IAAI,UAAU,GAAG,KAAK,CAAC;oBAEvB,IAAI,OAAO,EAAE;wBACT,IAAI,CAAC,SAAS,GAAG,MAAM,2DAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;wBACnF,IAAI,CAAC,aAAa,GAAG,2DAAU,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;wBACpF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,aAAa,CAAC;qBAClD;oBAED,IAAI,WAAI,CAAC,SAAS,0CAAE,MAAM,KAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC5D,IAAI,OAAO,EAAE;4BACT,MAAM,WAAW,GAA4B,EAAE,CAAC;4BAEhD,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAO,KAAK,EAAE,EAAE,CAAC;gCACzD,MAAM,UAAU,GAAG,MAAM,4DAAY,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE;oCAClF,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE;iCAAE,CAAC,CAAC;gCAE/C,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,WAAW,CAAC;4BACnD,CAAC,EAAC,CAAC,CAAC;4BAEJ,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;4BAEzF,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yBAChD;6BAAM;4BACH,8CAA8C;4BAC9C,UAAU,GAAG,IAAI,CAAC;yBACrB;qBACJ;yBAAM;wBACH,MAAM,UAAU,GAAG,MAAM,4DAAY,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;wBAC/G,UAAU,GAAG,UAAU,CAAC,WAAW,CAAC;qBACvC;oBAED,IAAI,CAAC,UAAU,EAAE;wBACb,+BAA+B;wBAC/B,iEAAY,CAAC,cAAc,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;wBAE7D,yBAAyB;wBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;wBACvB,iEAAa,CAAC,IAAI,EAAE,CAAC;wBAErB,OAAO;qBACV;iBACJ;gBAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAClD;YAAC,OAAO,KAAK,EAAE;gBACZ,iEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,4BAA4B,EAAE,IAAI,CAAC,CAAC;aACjF;YAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;KACtB;IAED;;;;;OAKG;IACG,IAAI,CAAC,CAAQ;;;YACf,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,CAAC,CAAC,eAAe,EAAE,CAAC;YAEpB,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAEtC,IAAI;gBACA,IAAI,OAAO,GAAG,yEAAkB,CAAC,kBAAkB,CAC/C,SAAS,EACT,IAAI,CAAC,WAAW,EAChB,WAAI,CAAC,KAAK,0CAAE,QAAQ,KAAI,EAAE,CAC7B,CAAC;gBAEF,OAAO,GAAG,OAAO,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC1F,IAAI,CAAC,OAAO,EAAE;oBACV,IAAI,IAAI,CAAC,OAAO,EAAE;wBACd,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;wBAE/B,OAAO;qBACV;oBAED,8DAA8D;oBAC9D,MAAM,IAAI,+DAAS,CAAC,sDAAS,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;iBACzE;gBAED,MAAM,KAAK,GAAG,MAAM,iEAAY,CAAC,gBAAgB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;gBAExE,gCAAgC;gBAChC,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAE,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC;gBACzE,IAAI,QAAQ,GAA+B,EAAE,CAAC;gBAE9C,IAAI;oBACA,IAAI;wBACA,QAAQ,GAAG,MAAM,yEAAkB,CAAC,mBAAmB,CACnD,SAAS,EACT,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAS,CAAC,EAAE,EACjB,SAAS,EACT,WAAI,CAAC,KAAK,0CAAE,QAAQ,KAAI,EAAE,EAC1B,IAAI,CAAC,OAAO,CACf,CAAC;qBACL;oBAAC,OAAO,KAAK,EAAE;wBACZ,IAAI,IAAI,CAAC,OAAO,EAAE;4BACd,MAAM,KAAK,CAAC;yBACf;wBACD,sDAAsD;wBACtD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;wBAEpB,QAAQ,GAAG,MAAM,yEAAkB,CAAC,mBAAmB,CACnD,SAAS,EACT,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAS,CAAC,EAAE,EACjB,SAAS,EACT,WAAI,CAAC,KAAK,0CAAE,QAAQ,KAAI,EAAE,EAC1B,IAAI,CAAC,OAAO,CACf,CAAC;qBACL;oBAED,IAAI,QAAQ,CAAC,MAAM,IAAI,CAAC,EAAE;wBACtB,kCAAkC;wBAClC,MAAM,IAAI,+DAAS,CAAC,sDAAS,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC,CAAC;qBACzE;oBAED,IAAI,iBAAuF,CAAC;oBAC5F,IAAI,IAAI,CAAC,SAAS,EAAE;wBAChB,iBAAiB,GAAG,MAAM,4DAAY,CAAC,SAAS,CAC5C,IAAI,CAAC,QAAS,CAAC,EAAE,EACjB,IAAI,CAAC,OAAQ,EACb,IAAI,CAAC,QAAQ,EACb,QAAQ,EACR,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,OAAO,CACf,CAAC;qBACL;yBAAM;wBACH,iBAAiB,GAAG,MAAM,4DAAY,CAAC,QAAQ,CAC3C,IAAI,CAAC,QAAS,CAAC,EAAE,EACjB,SAAS,EACT,IAAI,CAAC,QAAQ,EACb,QAAQ,EACR,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,OAAO,CACf,CAAC;qBACL;oBAED,oEAAoE;oBACpE,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,SAAS,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,OAAO,CAAC;wBAC/E,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,YAAY,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;wBAExF,2DAAS,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,EAAE,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;wBAE3F,MAAM,QAAQ,GAAoB,EAAE,CAAC;wBAErC,IAAI,iBAAiB,CAAC,IAAI,EAAE;4BACxB,8DAAU,CAAC,OAAO,CAAC,8DAAU,CAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;4BAEtE,IAAI,IAAI,CAAC,SAAS,EAAE;gCAChB,QAAQ,CAAC,IAAI,CAAC,4DAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE,IAAI,CAAC,OAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;6BAClG;4BACD,QAAQ,CAAC,IAAI,CAAC,4DAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;yBACrF;wBAED,IAAI;4BACA,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;4BAC5B,8DAAU,CAAC,OAAO,CACd,oEAAoB,CAAC,aAAa,EAClC,EAAE,MAAM,EAAE,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,EAEpD,IAAI,CAAC,MAAM,CACd,CAAC;yBACL;gCAAS;4BACN,IAAI,CAAC,iBAAiB,EAAE,CAAC;yBAC5B;qBACJ;yBAAM;wBACH,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;wBACjB,IAAI,iBAAiB,CAAC,kBAAkB,EAAE;4BACtC,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;gCACxD,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;gCACnF,IAAI,KAAK,EAAE;oCACP,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC;iCACnD;4BACL,CAAC,CAAC,CAAC;yBACN;wBACD,IAAI,CAAC,MAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;wBAElC,UAAU,CAAC,GAAG,EAAE;4BACZ,IAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC9B,CAAC,CAAC,CAAC;qBACN;iBACJ;wBAAS;oBACN,KAAK,CAAC,OAAO,EAAE,CAAC;iBACnB;aACJ;YAAC,OAAO,KAAK,EAAE;gBACZ,iEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC;aACxE;;KACJ;IAED;;;;;OAKG;IACH,QAAQ,CAAC,OAAe;QACpB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QAEpB,OAAO,IAAI,CAAC,cAAc,EAAE,CAAC;IACjC,CAAC;IAED;;;;OAIG;IACO,iBAAiB;;QACvB,IAAI,CAAC,MAAM,GAAG;YACV,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,gEAAS,CAAC,KAAK,OAAC,IAAI,CAAC,KAAK,0CAAE,QAAQ,CAAC,IAAI,EAAE;YACrD,IAAI,EAAE,IAAI,CAAC,QAAQ;YACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;SACtB,CAAC;QAEF,IAAI,QAAQ,GAAG,yEAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAS,EAAE,wEAAwB,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAE9G,wCAAwC;QACxC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC/B,IAAI,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;YACvC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;YAC3D,IAAI,YAAY,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAE7C,wCAAwC;YACxC,MAAM,MAAM,GAAG,4DAA4D,GAAG,KAAK,CAAC,EAAE,GAAG;iCACpE,GAAG,KAAK,CAAC,EAAE,GAAG,uBAAuB,GAAG,KAAK,CAAC,EAAE,GAAG;iCACnD,GAAG,KAAK,CAAC,EAAE,GAAG,mCAAmC,CAAC;YACvE,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;YAElD,4BAA4B;YAC5B,OAAO,GAAG,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;YACtC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,uBAAuB,EAAE,MAAM,CAAC,CAAC;YAC3D,YAAY,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAEzC,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,iCAAiC;QACjC,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAClD,MAAM,OAAO,GAAG,kEAAO,CAAC,sBAAsB,EAAE;YAC5C,CAAC,CAAC,sFAAsF;YACxF,CAAC,CAAC,EAAE,CAAC;QACT,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAEnD,OAAO,QAAQ,CAAC;IACpB,CAAC;IAED;;;;OAIG;IACa,iBAAiB;;;YAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAEtC,IAAI;gBACA,MAAM,KAAK,GAAG,MAAM,yEAAkB,CAAC,eAAe,CAClD,SAAS,EACT,IAAI,CAAC,WAAW,EAChB,WAAI,CAAC,KAAK,0CAAE,QAAQ,KAAI,EAAE,CAC7B,CAAC;gBAEF,6FAAgB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aACzC;oBAAS;gBACN,yBAAyB;gBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,iEAAa,CAAC,IAAI,EAAE,CAAC;aACxB;;KACJ;IAED;;OAEG;IACO,kBAAkB;;QACxB,IAAI,CAAC,iEAAY,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,EAAE;YAC5G,UAAI,CAAC,OAAO,0CAAE,WAAW,GAAG;SAC/B;IACL,CAAC;CAEJ;;;sBA5YI,uDAAS,SAAC,yDAAU;0BACpB,uDAAS,SAAC,YAAY;;AAHd,oBAAoB;IALhC,+DAAS,CAAC;QACP,QAAQ,EAAE,0BAA0B;QACpC,sNAAwB;;KAE3B,CAAC;GACW,oBAAoB,CA8YhC;AA9YgC;;;;;;;;;;;;;ACpDjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEgE;AACD;AAC5B;AACN;AAGJ;AACG;AACT;AACR;AACO;AACD;AACiB;AAC8B;AASpE;AACmC;AACI;AAEpE;;GAEG;IAMU,qBAAqB,SAArB,qBAAqB;IA4C9B,YACY,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QArCxB,WAAM,GAAsC,EAAE,CAAC;QAC/C,gBAAW,GAAwB,EAAE,CAAC;QAKhD,UAAK,GAAG,EAAE,CAAC;QACX,eAAU,GAAG,MAAM,CAAC;QACpB,cAAS,GAAG,oEAAoB,CAAC,SAAS,CAAC;QAC3C,gBAAW,GAAG,KAAK,CAAC;QACpB,mBAAc,GAAG,KAAK,CAAC;QACvB,oBAAe,GAAG,KAAK,CAAC;QACxB,kBAAa,GAAG,KAAK,CAAC;QACtB,kBAAa,GAAG,CAAC,CAAC;QAElB,gBAAW,GAAG,KAAK,CAAC;QACpB,YAAO,GAAG,KAAK,CAAC;QAIhB,iBAAY,GAAG,KAAK,CAAC;QACrB,cAAS,GAAG,EAAE,CAAC;QAEf,iBAAY,GAAoB,CAAC,0GAAmC,CAAC,CAAC;QAUtE,uBAAkB,GAAG,KAAK,CAAC,CAAC,4EAA4E;QACxG,oBAAe,GAAG,KAAK,CAAC;QAKpB,IAAI,CAAC,UAAU,GAAG,2EAAU,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACzD,IAAI,CAAC,MAAM,GAAG,yDAAS,CAAC,gBAAgB,EAAE,CAAC;QAE3C,iEAAiE;QACjE,IAAI,CAAC,YAAY,GAAG,8DAAU,CAAC,EAAE,CAAC,6EAAwB,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE;;YAC7E,IAAI,OAAO,IAAI,CAAC,OAAO,IAAI,WAAW,EAAE;gBACpC,OAAO;aACV;YAED,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,WAAI,CAAC,QAAQ,0CAAE,EAAE,KAAI,IAAI,CAAC,MAAM,EAAE;gBAC3G,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,uBAAuB;oBACvB,iEAAa,CAAC,IAAI,EAAE,CAAC;iBACxB;qBAAM;oBACH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;oBAC5B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;oBACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;iBAC7B;aACJ;QACL,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QAEhB,2BAA2B;QAC3B,IAAI,CAAC,oBAAoB,GAAG,8DAAU,CAAC,EAAE,CAAC,oEAAoB,CAAC,aAAa,EAAE,CAAC,IAAI,EAAE,EAAE;;YACnF,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,IAAI,WAAI,CAAC,QAAQ,0CAAE,EAAE,KAAI,IAAI,CAAC,MAAM,EAAE;gBAClE,IAAI,IAAI,CAAC,OAAO,EAAE;oBACd,uBAAuB;oBACvB,iEAAa,CAAC,IAAI,EAAE,CAAC;iBACxB;qBAAM;oBACH,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;oBACzB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;iBAC7B;aACJ;QACL,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACpB,CAAC;IAED;;OAEG;IACG,QAAQ;;YACV,IAAI,CAAC,MAAM,GAAG,iEAAa,CAAC,aAAa,CAAmB,QAAQ,CAAE,CAAC;YACvE,IAAI,CAAC,OAAO,GAAG,iEAAa,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;YACzE,IAAI,CAAC,QAAQ,GAAG,iEAAa,CAAC,mBAAmB,CAAC,UAAU,CAAE,CAAC;YAC/D,IAAI,CAAC,aAAa,GAAG,iEAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrE,IAAI,CAAC,MAAM,GAAG,iEAAa,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;YAC1D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YAE9B,IAAI,CAAC,eAAe,GAAG,CAAC,iFAAY,CAAC,yBAAyB,EAAE,CAAC;YAEjE,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;KAAA;IAED;;;;;;OAMG;IACa,cAAc,CAAC,OAAO,GAAG,KAAK,EAAE,KAAK,GAAG,KAAK;;;YACzD,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAEhC,IAAI;gBACA,IAAI,CAAC,QAAQ,GAAG,MAAM,4DAAY,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC9E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC;gBAE9C,IAAI,CAAC,WAAW,GAAG,MAAM,4DAAY,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBAC5F,IAAI,CAAC,MAAM,GAAG,gEAAS,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;gBAE9D,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBAEhC,IAAI,CAAC,MAAM,GAAG,MAAM,4DAAY,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBAE1G,IAAI,CAAC,SAAS,GAAG,MAAM,2DAAU,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;gBACnF,IAAI,CAAC,aAAa,GAAG,2DAAU,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;gBAEpF,MAAM,OAAO,GAAG,yEAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,KAAM,CAAC,CAAC;gBAEvF,MAAM,QAAQ,GAAG,yEAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,wEAAwB,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;gBAClH,IAAI,CAAC,SAAS,GAAG,yEAAkB,CAAC,iBAAiB,CACjD,QAAQ,EACR,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,KAAM,EACX,IAAI,CAAC,MAAM,EACX,wEAAwB,CAAC,IAAI,EAC7B,OAAO,CACV,CAAC;gBAEF,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC;gBAErC,MAAM,OAAO,GAAsC,EAAE,CAAC;gBACtD,OAAO,CAAC,IAAI,CAAC,OAAQ,CAAC,GAAG,IAAI,CAAC,KAAM,CAAC;gBAErC,wCAAwC;gBACxC,IAAI,CAAC,MAAM,GAAG;oBACV,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,OAAO,EAAE,OAAO;oBAChB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,KAAK,EAAE,IAAI,CAAC,aAAa;iBAC5B,CAAC;aACL;YAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,CAAC,OAAO,EAAE;oBACV,gFAAgF;oBAChF,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iBACrC;gBAED,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,4BAA4B,EAAE,IAAI,CAAC,CAAC;aACjF;oBAAS;gBACN,UAAI,CAAC,OAAO,0CAAE,WAAW,GAAG;gBAC5B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aAC3B;;KACJ;IAED;;;;;OAKG;IACG,SAAS,CAAC,MAAc;;YAC1B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAEzB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;KAAA;IAED;;;;;OAKG;IACa,cAAc,CAAC,KAAe;;YAC1C,MAAM,QAAQ,GAAoB,EAAE,CAAC;YAErC,QAAQ,CAAC,IAAI,CAAC,4DAAY,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClE,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACf,QAAQ,CAAC,IAAI,CAAC,4DAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,OAAQ,CAAC,CAAC,CAAC;gBACjF,QAAQ,CAAC,IAAI,CAAC,2DAAU,CAAC,2BAA2B,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClF,QAAQ,CAAC,IAAI,CAAC,4DAAY,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBACpE,QAAQ,CAAC,IAAI,CAAC,4DAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;gBAEnE,IAAI,IAAI,CAAC,QAAQ,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,EAAE;oBACpG,gHAAgH;oBAChH,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE;wBACjC,iBAAiB;oBACrB,CAAC,CAAC,CAAC;iBACN;aACJ;YAED,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CACrC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;QAC1C,CAAC;KAAA;IAED;;;;;OAKG;IACH,eAAe,CAAC,SAAwB;QACpC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,OAAO;SACV;QAED,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;YACnC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,GAAG;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACG,QAAQ,CAAC,OAAe;;YAC1B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;YAC7B,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;YACxB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAEzB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;KAAA;IAED;;;;OAIG;IACa,kBAAkB;;;YAC9B,IAAI,OAAO,IAAI,CAAC,MAAM,IAAI,WAAW,IAAI,OAAO,IAAI,CAAC,OAAO,IAAI,WAAW,EAAE;gBACzE,iEAAiE;gBACjE,uDAAuD;gBACvD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBAEzB,MAAM,KAAK,GAAG,MAAM,yEAAkB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAS,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAClG,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;gBACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;gBAEnC,OAAO;aACV;YAED,MAAM,OAAO,GAAG,oEAAoB,CAAC,QAAQ,CAAC;YAC9C,MAAM,IAAI,GAAG,OAAO,IAAI,CAAC,MAAM,IAAI,WAAW,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC;gBAC9D,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;gBACnC,CAAC,CAAC,CAAC,CAAC;YAER,MAAM,OAAO,GAAG,MAAM,yEAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAS,EAAE,IAAI,CAAC,WAAW,EAAE;gBACpF,OAAO,EAAE,IAAI,CAAC,aAAa;gBAC3B,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,MAAM;gBACb,IAAI;gBACJ,OAAO;aACV,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,CAAC,OAAO,CAAC,cAAc,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAE3E,yEAAyE;YACzE,IAAI,SAAS,GAAG,CAAC,CAAC;YAClB,IAAI,OAAO,IAAI,CAAC,MAAM,IAAI,WAAW,EAAE;gBACnC,6CAA6C;gBAC7C,SAAS,GAAG,CAAC,CAAC;aACjB;iBAAM,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACxB,gBAAgB;gBAChB,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,GAAG,CAAC,cAAO,CAAC,cAAc,0CAAE,MAAM,KAAI,CAAC,CAAC,CAAC;aAC7E;iBAAM;gBACH,iBAAiB;gBACjB,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,cAAO,CAAC,cAAc,0CAAE,MAAM,KAAI,CAAC,CAAC,CAAC;aACnE;YAED,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;YAE7B,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,CAAC,IAAI,SAAS,GAAG,CAAC,CAAC;YAE7C,IAAI,SAAS,GAAG,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE;gBACpC,kCAAkC;gBAClC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;iBAAM,IAAI,WAAW,CAAC,MAAM,GAAG,OAAO,EAAE;gBACrC,+BAA+B;gBAC/B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACxB;iBAAM;gBACH,yDAAyD;gBACzD,MAAM,OAAO,GAAG,MAAM,4DAAY,CAAC,UAAU,CAAC,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE;oBAC7D,OAAO,EAAE,IAAI,CAAC,aAAa;oBAC3B,IAAI,EAAE,IAAI,GAAG,CAAC;oBACd,OAAO,EAAE,OAAO;iBACnB,CAAC,CAAC;gBACH,IAAI,CAAC,OAAO,GAAG,cAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,0CAAE,MAAM,IAAG,CAAC,CAAC;aAC/C;YAED,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE;gBAClB,sDAAsD;gBACtD,MAAM,KAAK,GAAG,MAAM,4DAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBACrG,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;aACtC;;KACJ;IAED;;OAEG;IACH,iBAAiB,CAAC,SAAkB;QAChC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,kBAAkB,CAAC,OAAgB;QAC/B,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,OAAgB;QAC7B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,aAAa;QACT,4DAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAS,CAAC,EAAE,EAAE,IAAI,CAAC,OAAQ,CAAC,CAAC;IACvE,CAAC;IAED;;;;OAIG;IACa,OAAO;;YACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE;gBACrC,OAAO;aACV;YAED,MAAM,gEAAS,CAAC,YAAY,CAAC,4DAAY,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAC7F,CAAC;KAAA;IAED;;OAEG;IACH,WAAW;;QACP,UAAI,CAAC,YAAY,0CAAE,GAAG,GAAG;QACzB,UAAI,CAAC,oBAAoB,0CAAE,GAAG,GAAG;IACrC,CAAC;CAEJ;;YA/YyC,+DAAiB;;;sBAoCtD,uDAAS,SAAC,yDAAU;uBACpB,uDAAS,SAAC,6GAA6B;;AAH/B,qBAAqB;IALjC,+DAAS,CAAC;QACP,QAAQ,EAAE,2BAA2B;QACrC,yNAAyB;;KAE5B,CAAC;GACW,qBAAqB,CA6WjC;AA7WiC;;;;;;;;;;;;;AChDlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAE4B;AACkC;AAC3C;AACsB;AAE1E;;GAEG;IAKU,qBAAqB,SAArB,qBAAsB,SAAQ,4GAA4D;;;QAInG,UAAK,GAAG,CAAC,CAAC;IAUd,CAAC;IARG;;OAEG;IACH,QAAQ;QACJ,KAAK,CAAC,QAAQ,EAAE,CAAC;QACjB,IAAI,CAAC,KAAK,GAAG,iEAAa,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC;CAEJ;;gCAZI,uDAAS,SAAC,kFAA0B;;AAF5B,qBAAqB;IAJjC,+DAAS,CAAC;QACP,QAAQ,EAAE,2BAA2B;QACrC,yNAAyB;KAC5B,CAAC;GACW,qBAAqB,CAcjC;AAdiC","file":"data-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module.id\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button *ngIf=\\\"entry\\\" fill=\\\"clear\\\" (click)=\\\"save($event)\\\">\\n                {{ 'core.save' | translate }}\\n            </ion-button>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"groupInfo && (groupInfo.separateGroups || groupInfo.visibleGroups)\\\">\\n            <ion-label id=\\\"addon-data-groupslabel\\\">\\n                <ng-container *ngIf=\\\"groupInfo.separateGroups\\\">{{ 'core.groupsvisible' | translate }}</ng-container>\\n                <ng-container *ngIf=\\\"groupInfo.visibleGroups\\\">{{ 'core.groupsseparate' | translate }}</ng-container>\\n            </ion-label>\\n            <ion-select [(ngModel)]=\\\"selectedGroup\\\" (ionChange)=\\\"setGroup(selectedGroup)\\\" aria-labelledby=\\\"addon-data-groupslabel\\\"\\n                interface=\\\"action-sheet\\\" [interfaceOptions]=\\\"{header: 'core.group' | translate}\\\">\\n                <ion-select-option *ngFor=\\\"let groupOpt of groupInfo.groups\\\" [value]=\\\"groupOpt.id\\\">\\n                    {{groupOpt.name}}\\n                </ion-select-option>\\n            </ion-select>\\n        </ion-item>\\n\\n        <div class=\\\"addon-data-contents {{cssClass}}\\\" *ngIf=\\\"database\\\">\\n            <core-style [css]=\\\"database.csstemplate\\\" prefix=\\\".{{cssClass}}\\\"></core-style>\\n\\n            <form (ngSubmit)=\\\"save($event)\\\" [formGroup]=\\\"editForm\\\" #editFormEl>\\n                <core-compile-html [text]=\\\"editFormRender\\\" [jsData]=\\\"jsData\\\" [extraImports]=\\\"extraImports\\\"></core-compile-html>\\n            </form>\\n        </div>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module.id\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\"\\n        [disabled]=\\\"!entryLoaded || !(isPullingToRefresh || !renderingEntry && !loadingRating && !loadingComments)\\\"\\n        (ionRefresh)=\\\"refreshDatabase($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"entryLoaded && (isPullingToRefresh || !renderingEntry && !loadingRating && !loadingComments)\\\">\\n        <!-- Database entries found to be synchronized -->\\n        <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"entry && entry.hasOffline\\\">\\n            <ion-item>\\n                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                <ion-label>{{ 'core.hasdatatosync' | translate: {$a: moduleName} }}</ion-label>\\n            </ion-item>\\n        </ion-card>\\n\\n        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"groupInfo && (groupInfo.separateGroups || groupInfo.visibleGroups)\\\">\\n            <ion-label id=\\\"addon-data-groupslabel\\\">\\n                <ng-container *ngIf=\\\"groupInfo.separateGroups\\\">{{ 'core.groupsvisible' | translate }}</ng-container>\\n                <ng-container *ngIf=\\\"groupInfo.visibleGroups\\\">{{ 'core.groupsseparate' | translate }}</ng-container>\\n            </ion-label>\\n            <ion-select [(ngModel)]=\\\"selectedGroup\\\" (ionChange)=\\\"setGroup(selectedGroup)\\\" aria-labelledby=\\\"addon-data-groupslabel\\\"\\n                interface=\\\"action-sheet\\\" [interfaceOptions]=\\\"{header: 'core.group' | translate}\\\">\\n                <ion-select-option *ngFor=\\\"let groupOpt of groupInfo.groups\\\" [value]=\\\"groupOpt.id\\\">\\n                    {{groupOpt.name}}\\n                </ion-select-option>\\n            </ion-select>\\n        </ion-item>\\n\\n        <div class=\\\"addon-data-contents addon-data-entry addon-data-entries-{{database.id}}\\\" *ngIf=\\\"database && entry\\\">\\n            <core-style [css]=\\\"database.csstemplate\\\" prefix=\\\".addon-data-entries-{{database.id}}\\\"></core-style>\\n\\n            <core-compile-html [text]=\\\"entryHtml\\\" [jsData]=\\\"jsData\\\" [extraImports]=\\\"extraImports\\\"\\n                (compiling)=\\\"setRenderingEntry($event)\\\"></core-compile-html>\\n        </div>\\n\\n        <core-rating-rate *ngIf=\\\"database && entry && ratingInfo && (!database.approval || entry.approved)\\\"\\n            [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\" [instanceId]=\\\"database.coursemodule\\\" [itemId]=\\\"entry.id\\\" [itemSetId]=\\\"0\\\"\\n            [courseId]=\\\"courseId\\\" [aggregateMethod]=\\\"database.assessed\\\" [scaleId]=\\\"database.scale\\\" [userId]=\\\"entry.userid\\\"\\n            (onLoading)=\\\"setLoadingRating($event)\\\" (onUpdate)=\\\"ratingUpdated()\\\">\\n        </core-rating-rate>\\n        <core-rating-aggregate *ngIf=\\\"database && entry && ratingInfo\\\" [ratingInfo]=\\\"ratingInfo\\\" contextLevel=\\\"module\\\"\\n            [instanceId]=\\\"database.coursemodule\\\" [itemId]=\\\"entry.id\\\" [courseId]=\\\"courseId\\\" [aggregateMethod]=\\\"database.assessed\\\"\\n            [scaleId]=\\\"database.scale\\\">\\n        </core-rating-aggregate>\\n\\n        <core-comments *ngIf=\\\"database && database.comments && entry && entry.id > 0 && commentsEnabled\\\"\\n            contextLevel=\\\"module\\\" [instanceId]=\\\"database.coursemodule\\\" component=\\\"mod_data\\\" [itemId]=\\\"entry.id\\\"\\n            area=\\\"database_entry\\\" [courseId]=\\\"courseId\\\" (onLoading)=\\\"setLoadingComments($event)\\\" [showItem]=\\\"true\\\">\\n        </core-comments>\\n\\n        <ion-grid *ngIf=\\\"hasPrevious || hasNext\\\">\\n            <ion-row class=\\\"ion-align-items-center\\\">\\n                <ion-col *ngIf=\\\"hasPrevious\\\">\\n                    <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"gotoEntry(offset! -1)\\\">\\n                        <ion-icon name=\\\"fas-chevron-left\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                        {{ 'core.previous' | translate }}\\n                    </ion-button>\\n                </ion-col>\\n                <ion-col *ngIf=\\\"hasNext\\\">\\n                    <ion-button expand=\\\"block\\\" (click)=\\\"gotoEntry(offset! + 1)\\\">\\n                        {{ 'core.next' | translate }}\\n                        <ion-icon name=\\\"fas-chevron-right\\\" slot=\\\"end\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    </ion-button>\\n                </ion-col>\\n            </ion-row>\\n        </ion-grid>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"module.id\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n\\n        <ion-buttons slot=\\\"end\\\">\\n            <!-- The buttons defined by the component will be added in here. -->\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!activityComponent?.loaded\\\" (ionRefresh)=\\\"activityComponent?.doRefresh($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n\\n    <addon-mod-data-index [module]=\\\"module\\\" [courseId]=\\\"courseId\\\" [group]=\\\"group\\\" (dataRetrieved)=\\\"updateData($event)\\\">\\n    </addon-mod-data-index>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\nimport { CoreCompileHtmlComponentModule } from '@features/compile/components/compile-html/compile-html.module';\nimport { CoreRatingComponentsModule } from '@features/rating/components/components.module';\nimport { CanLeaveGuard } from '@guards/can-leave';\nimport { AddonModDataComponentsCompileModule } from './components/components-compile.module';\nimport { AddonModDataComponentsModule } from './components/components.module';\nimport { AddonModDataEditPage } from './pages/edit/edit';\nimport { AddonModDataEntryPage } from './pages/entry/entry';\nimport { AddonModDataIndexPage } from './pages/index/index';\n\nconst routes: Routes = [\n    {\n        path: ':courseId/:cmId',\n        component: AddonModDataIndexPage,\n    },\n    {\n        path: ':courseId/:cmId/edit',\n        component: AddonModDataEditPage,\n        canDeactivate: [CanLeaveGuard],\n    },\n    {\n        path: ':courseId/:cmId/edit/:entryId',\n        component: AddonModDataEditPage,\n        canDeactivate: [CanLeaveGuard],\n    },\n    {\n        path: ':courseId/:cmId/:entryId',\n        component: AddonModDataEntryPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonModDataComponentsModule,\n        AddonModDataComponentsCompileModule,\n        CoreCommentsComponentsModule,\n        CoreRatingComponentsModule,\n        CoreCompileHtmlComponentModule,\n    ],\n    declarations: [\n        AddonModDataIndexPage,\n        AddonModDataEntryPage,\n        AddonModDataEditPage,\n    ],\n})\nexport class AddonModDataLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild, ElementRef, Type } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreCourseModule } from '@features/course/services/course-helper';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreTag } from '@features/tag/services/tag';\nimport { IonContent } from '@ionic/angular';\nimport { CoreGroupInfo, CoreGroups } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreForms } from '@singletons/form';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { AddonModDataComponentsCompileModule } from '../../components/components-compile.module';\nimport {\n    AddonModDataData,\n    AddonModDataField,\n    AddonModDataProvider,\n    AddonModData,\n    AddonModDataTemplateType,\n    AddonModDataEntry,\n    AddonModDataEntryFields,\n    AddonModDataEditEntryResult,\n    AddonModDataAddEntryResult,\n    AddonModDataEntryWSField,\n} from '../../services/data';\nimport { AddonModDataHelper } from '../../services/data-helper';\n\n/**\n * Page that displays the view edit page.\n */\n@Component({\n    selector: 'page-addon-mod-data-edit',\n    templateUrl: 'edit.html',\n    styleUrls: ['../../data.scss', '../../data-forms.scss'],\n})\nexport class AddonModDataEditPage implements OnInit {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild('editFormEl') formElement!: ElementRef;\n\n    protected entryId?: number;\n    protected fieldsArray: AddonModDataField[] = [];\n    protected siteId: string;\n    protected offline = false;\n    protected forceLeave = false; // To allow leaving the page without checking for changes.\n    protected initialSelectedGroup?: number;\n    protected isEditing = false;\n\n    entry?: AddonModDataEntry;\n    fields: Record<number, AddonModDataField> = {};\n    courseId!: number;\n    module!: CoreCourseModule;\n    database?: AddonModDataData;\n    title = '';\n    component = AddonModDataProvider.COMPONENT;\n    loaded = false;\n    selectedGroup = 0;\n    cssClass = '';\n    groupInfo?: CoreGroupInfo;\n    editFormRender = '';\n    editForm: FormGroup;\n    extraImports: Type<unknown>[] = [AddonModDataComponentsCompileModule];\n    jsData?: {\n        fields: Record<number, AddonModDataField>;\n        database?: AddonModDataData;\n        contents: AddonModDataEntryFields;\n        errors?: Record<number, string>;\n        form: FormGroup;\n    };\n\n    errors: Record<number, string> = {};\n\n    constructor() {\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.editForm = new FormGroup({});\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.module = CoreNavigator.getRouteParam<CoreCourseModule>('module')!;\n        this.entryId = CoreNavigator.getRouteNumberParam('entryId') || undefined;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n\n        // If entryId is lower than 0 or null, it is a new entry or an offline entry.\n        this.isEditing = typeof this.entryId != 'undefined' && this.entryId > 0;\n\n        this.title = this.module.name;\n\n        this.fetchEntryData(true);\n    }\n\n    /**\n     * Check if we can leave the page or not and ask to confirm the lost of data.\n     *\n     * @return True if we can leave, false otherwise.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave || !this.entry) {\n            return true;\n        }\n\n        const inputData = this.editForm.value;\n\n        let changed = AddonModDataHelper.hasEditDataChanged(inputData, this.fieldsArray, this.entry.contents);\n        changed = changed || (!this.isEditing && this.initialSelectedGroup != this.selectedGroup);\n\n        if (changed) {\n            // Show confirmation if some data has been modified.\n            await CoreDomUtils.showConfirm(Translate.instant('coentryre.confirmcanceledit'));\n        }\n\n        // Delete the local files from the tmp folder.\n        const files = await AddonModDataHelper.getEditTmpFiles(inputData, this.fieldsArray, this.entry!.contents);\n        CoreFileUploader.clearTmpFiles(files);\n\n        CoreForms.triggerFormCancelledEvent(this.formElement, this.siteId);\n\n        return true;\n    }\n\n    /**\n     * Fetch the entry data.\n     *\n     * @param refresh To refresh all downloaded data.\n     * @return Resolved when done.\n     */\n    protected async fetchEntryData(refresh = false): Promise<void> {\n        try {\n            this.database = await AddonModData.getDatabase(this.courseId, this.module.id);\n            this.title = this.database.name || this.title;\n            this.cssClass = 'addon-data-entries-' + this.database.id;\n\n            this.fieldsArray = await AddonModData.getFields(this.database.id, { cmId: this.module.id });\n            this.fields = CoreUtils.arrayToObject(this.fieldsArray, 'id');\n\n            const entry = await AddonModDataHelper.fetchEntry(this.database, this.fieldsArray, this.entryId || 0);\n            this.entry = entry.entry;\n\n            // Load correct group.\n            this.selectedGroup = this.entry.groupid;\n\n            // Check permissions when adding a new entry or offline entry.\n            if (!this.isEditing) {\n                let haveAccess = false;\n\n                if (refresh) {\n                    this.groupInfo = await CoreGroups.getActivityGroupInfo(this.database.coursemodule);\n                    this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, this.groupInfo);\n                    this.initialSelectedGroup = this.selectedGroup;\n                }\n\n                if (this.groupInfo?.groups && this.groupInfo.groups.length > 0) {\n                    if (refresh) {\n                        const canAddGroup: Record<number, boolean> = {};\n\n                        await Promise.all(this.groupInfo.groups.map(async (group) => {\n                            const accessData = await AddonModData.getDatabaseAccessInformation(this.database!.id, {\n                                cmId: this.module.id, groupId: group.id });\n\n                            canAddGroup[group.id] = accessData.canaddentry;\n                        }));\n\n                        this.groupInfo.groups = this.groupInfo.groups.filter((group) => !!canAddGroup[group.id]);\n\n                        haveAccess = canAddGroup[this.selectedGroup];\n                    } else {\n                        // Groups already filtered, so it have access.\n                        haveAccess = true;\n                    }\n                } else {\n                    const accessData = await AddonModData.getDatabaseAccessInformation(this.database.id, { cmId: this.module.id });\n                    haveAccess = accessData.canaddentry;\n                }\n\n                if (!haveAccess) {\n                    // You shall not pass, go back.\n                    CoreDomUtils.showErrorModal('addon.mod_data.noaccess', true);\n\n                    // Go back to entry list.\n                    this.forceLeave = true;\n                    CoreNavigator.back();\n\n                    return;\n                }\n            }\n\n            this.editFormRender = this.displayEditFields();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        }\n\n        this.loaded = true;\n    }\n\n    /**\n     * Saves data.\n     *\n     * @param e Event.\n     * @return Resolved when done.\n     */\n    async save(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const inputData = this.editForm.value;\n\n        try {\n            let changed = AddonModDataHelper.hasEditDataChanged(\n                inputData,\n                this.fieldsArray,\n                this.entry?.contents || {},\n            );\n\n            changed = changed || (!this.isEditing && this.initialSelectedGroup != this.selectedGroup);\n            if (!changed) {\n                if (this.entryId) {\n                    await this.returnToEntryList();\n\n                    return;\n                }\n\n                // New entry, no changes means no field filled, warn the user.\n                throw new CoreError(Translate.instant('addon.mod_data.emptyaddform'));\n            }\n\n            const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n            // Create an ID to assign files.\n            const entryTemp = this.entryId ? this.entryId : - (new Date().getTime());\n            let editData: AddonModDataEntryWSField[] = [];\n\n            try {\n                try {\n                    editData = await AddonModDataHelper.getEditDataFromForm(\n                        inputData,\n                        this.fieldsArray,\n                        this.database!.id,\n                        entryTemp,\n                        this.entry?.contents || {},\n                        this.offline,\n                    );\n                } catch (error) {\n                    if (this.offline) {\n                        throw error;\n                    }\n                    // Cannot submit in online, prepare for offline usage.\n                    this.offline = true;\n\n                    editData = await AddonModDataHelper.getEditDataFromForm(\n                        inputData,\n                        this.fieldsArray,\n                        this.database!.id,\n                        entryTemp,\n                        this.entry?.contents || {},\n                        this.offline,\n                    );\n                }\n\n                if (editData.length <= 0) {\n                    // No field filled, warn the user.\n                    throw new CoreError(Translate.instant('addon.mod_data.emptyaddform'));\n                }\n\n                let updateEntryResult: AddonModDataEditEntryResult | AddonModDataAddEntryResult | undefined;\n                if (this.isEditing) {\n                    updateEntryResult = await AddonModData.editEntry(\n                        this.database!.id,\n                        this.entryId!,\n                        this.courseId,\n                        editData,\n                        this.fieldsArray,\n                        this.siteId,\n                        this.offline,\n                    );\n                } else {\n                    updateEntryResult = await AddonModData.addEntry(\n                        this.database!.id,\n                        entryTemp,\n                        this.courseId,\n                        editData,\n                        this.selectedGroup,\n                        this.fieldsArray,\n                        this.siteId,\n                        this.offline,\n                    );\n                }\n\n                // This is done if entry is updated when editing or creating if not.\n                if ((this.isEditing && 'updated' in updateEntryResult && updateEntryResult.updated) ||\n                    (!this.isEditing && 'newentryid' in updateEntryResult && updateEntryResult.newentryid)) {\n\n                    CoreForms.triggerFormSubmittedEvent(this.formElement, updateEntryResult.sent, this.siteId);\n\n                    const promises: Promise<void>[] = [];\n\n                    if (updateEntryResult.sent) {\n                        CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'data' });\n\n                        if (this.isEditing) {\n                            promises.push(AddonModData.invalidateEntryData(this.database!.id, this.entryId!, this.siteId));\n                        }\n                        promises.push(AddonModData.invalidateEntriesData(this.database!.id, this.siteId));\n                    }\n\n                    try {\n                        await Promise.all(promises);\n                        CoreEvents.trigger(\n                            AddonModDataProvider.ENTRY_CHANGED,\n                            { dataId: this.database!.id, entryId: this.entryId },\n\n                            this.siteId,\n                        );\n                    } finally {\n                        this.returnToEntryList();\n                    }\n                } else {\n                    this.errors = {};\n                    if (updateEntryResult.fieldnotifications) {\n                        updateEntryResult.fieldnotifications.forEach((fieldNotif) => {\n                            const field = this.fieldsArray.find((field) => field.name == fieldNotif.fieldname);\n                            if (field) {\n                                this.errors[field.id] = fieldNotif.notification;\n                            }\n                        });\n                    }\n                    this.jsData!.errors = this.errors;\n\n                    setTimeout(() => {\n                        this.scrollToFirstError();\n                    });\n                }\n            } finally {\n                modal.dismiss();\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Cannot edit entry', true);\n        }\n    }\n\n    /**\n     * Set group to see the database.\n     *\n     * @param groupId Group identifier to set.\n     * @return Resolved when done.\n     */\n    setGroup(groupId: number): Promise<void> {\n        this.selectedGroup = groupId;\n        this.loaded = false;\n\n        return this.fetchEntryData();\n    }\n\n    /**\n     * Displays Edit Search Fields.\n     *\n     * @return Generated HTML.\n     */\n    protected displayEditFields(): string {\n        this.jsData = {\n            fields: this.fields,\n            contents: CoreUtils.clone(this.entry?.contents) || {},\n            form: this.editForm,\n            database: this.database,\n            errors: this.errors,\n        };\n\n        let template = AddonModDataHelper.getTemplate(this.database!, AddonModDataTemplateType.ADD, this.fieldsArray);\n\n        // Replace the fields found on template.\n        this.fieldsArray.forEach((field) => {\n            let replace = '[[' + field.name + ']]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            let replaceRegEx = new RegExp(replace, 'gi');\n\n            // Replace field by a generic directive.\n            const render = '<addon-mod-data-field-plugin [class.has-errors]=\"!!errors[' + field.id + ']\" mode=\"edit\" \\\n                [field]=\"fields[' + field.id + ']\" [value]=\"contents[' + field.id + ']\" [form]=\"form\" [database]=\"database\" \\\n                [error]=\"errors[' + field.id + ']\"></addon-mod-data-field-plugin>';\n            template = template.replace(replaceRegEx, render);\n\n            // Replace the field id tag.\n            replace = '[[' + field.name + '#id]]';\n            replace = replace.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, '\\\\$&');\n            replaceRegEx = new RegExp(replace, 'gi');\n\n            template = template.replace(replaceRegEx, 'field_' + field.id);\n        });\n\n        // Editing tags is not supported.\n        const replaceRegEx = new RegExp('##tags##', 'gi');\n        const message = CoreTag.areTagsAvailableInSite()\n            ? '<p class=\"item-dimmed\">{{ \\'addon.mod_data.edittagsnotsupported\\' | translate }}</p>'\n            : '';\n        template = template.replace(replaceRegEx, message);\n\n        return template;\n    }\n\n    /**\n     * Return to the entry list (previous page) discarding temp data.\n     *\n     * @return Resolved when done.\n     */\n    protected async returnToEntryList(): Promise<void> {\n        const inputData = this.editForm.value;\n\n        try {\n            const files = await AddonModDataHelper.getEditTmpFiles(\n                inputData,\n                this.fieldsArray,\n                this.entry?.contents || {},\n            );\n\n            CoreFileUploader.clearTmpFiles(files);\n        } finally {\n            // Go back to entry list.\n            this.forceLeave = true;\n            CoreNavigator.back();\n        }\n    }\n\n    /**\n     * Scroll to first error or to the top if not found.\n     */\n    protected scrollToFirstError(): void {\n        if (!CoreDomUtils.scrollToElementBySelector(this.formElement.nativeElement, this.content, '.addon-data-error')) {\n            this.content?.scrollToTop();\n        }\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, ViewChild, ChangeDetectorRef, OnInit, Type } from '@angular/core';\nimport { CoreCommentsCommentsComponent } from '@features/comments/components/comments/comments';\nimport { CoreComments } from '@features/comments/services/comments';\nimport { CoreCourse } from '@features/course/services/course';\nimport { CoreCourseModule } from '@features/course/services/course-helper';\nimport { CoreRatingInfo } from '@features/rating/services/rating';\nimport { IonContent, IonRefresher } from '@ionic/angular';\nimport { CoreGroups, CoreGroupInfo } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { AddonModDataComponentsCompileModule } from '../../components/components-compile.module';\nimport { AddonModDataProvider,\n    AddonModData,\n    AddonModDataData,\n    AddonModDataGetDataAccessInformationWSResponse,\n    AddonModDataField,\n    AddonModDataTemplateType,\n    AddonModDataTemplateMode,\n    AddonModDataEntry,\n} from '../../services/data';\nimport { AddonModDataHelper } from '../../services/data-helper';\nimport { AddonModDataSyncProvider } from '../../services/data-sync';\n\n/**\n * Page that displays the view entry page.\n */\n@Component({\n    selector: 'page-addon-mod-data-entry',\n    templateUrl: 'entry.html',\n    styleUrls: ['../../data.scss'],\n})\nexport class AddonModDataEntryPage implements OnInit, OnDestroy {\n\n    @ViewChild(IonContent) content?: IonContent;\n    @ViewChild(CoreCommentsCommentsComponent) comments?: CoreCommentsCommentsComponent;\n\n    protected entryId?: number;\n    protected syncObserver: CoreEventObserver; // It will observe the sync auto event.\n    protected entryChangedObserver: CoreEventObserver; // It will observe the changed entry event.\n    protected fields: Record<number, AddonModDataField> = {};\n    protected fieldsArray: AddonModDataField[] = [];\n\n    module!: CoreCourseModule;\n    courseId!: number;\n    offset?: number;\n    title = '';\n    moduleName = 'data';\n    component = AddonModDataProvider.COMPONENT;\n    entryLoaded = false;\n    renderingEntry = false;\n    loadingComments = false;\n    loadingRating = false;\n    selectedGroup = 0;\n    entry?: AddonModDataEntry;\n    hasPrevious = false;\n    hasNext = false;\n    access?: AddonModDataGetDataAccessInformationWSResponse;\n    database?: AddonModDataData;\n    groupInfo?: CoreGroupInfo;\n    showComments = false;\n    entryHtml = '';\n    siteId: string;\n    extraImports: Type<unknown>[] = [AddonModDataComponentsCompileModule];\n    jsData?: {\n        fields: Record<number, AddonModDataField>;\n        entries: Record<number, AddonModDataEntry>;\n        database: AddonModDataData;\n        module: CoreCourseModule;\n        group: number;\n    };\n\n    ratingInfo?: CoreRatingInfo;\n    isPullingToRefresh = false; // Whether the last fetching of data was started by a pull-to-refresh action\n    commentsEnabled = false;\n\n    constructor(\n        private cdr: ChangeDetectorRef,\n    ) {\n        this.moduleName = CoreCourse.translateModuleName('data');\n        this.siteId = CoreSites.getCurrentSiteId();\n\n        // Refresh data if this discussion is synchronized automatically.\n        this.syncObserver = CoreEvents.on(AddonModDataSyncProvider.AUTO_SYNCED, (data) => {\n            if (typeof data.entryId == 'undefined') {\n                return;\n            }\n\n            if ((data.entryId == this.entryId || data.offlineEntryId == this.entryId) && this.database?.id == data.dataId) {\n                if (data.deleted) {\n                    // If deleted, go back.\n                    CoreNavigator.back();\n                } else {\n                    this.entryId = data.entryId;\n                    this.entryLoaded = false;\n                    this.fetchEntryData(true);\n                }\n            }\n        }, this.siteId);\n\n        // Refresh entry on change.\n        this.entryChangedObserver = CoreEvents.on(AddonModDataProvider.ENTRY_CHANGED, (data) => {\n            if (data.entryId == this.entryId && this.database?.id == data.dataId) {\n                if (data.deleted) {\n                    // If deleted, go back.\n                    CoreNavigator.back();\n                } else {\n                    this.entryLoaded = false;\n                    this.fetchEntryData(true);\n                }\n            }\n        }, this.siteId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.module = CoreNavigator.getRouteParam<CoreCourseModule>('module')!;\n        this.entryId = CoreNavigator.getRouteNumberParam('entryId') || undefined;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.selectedGroup = CoreNavigator.getRouteNumberParam('group') || 0;\n        this.offset = CoreNavigator.getRouteNumberParam('offset');\n        this.title = this.module.name;\n\n        this.commentsEnabled = !CoreComments.areCommentsDisabledInSite();\n\n        await this.fetchEntryData();\n        this.logView();\n    }\n\n    /**\n     * Fetch the entry data.\n     *\n     * @param refresh Whether to refresh the current data or not.\n     * @param isPtr Whether is a pull to refresh action.\n     * @return Resolved when done.\n     */\n    protected async fetchEntryData(refresh = false, isPtr = false): Promise<void> {\n        this.isPullingToRefresh = isPtr;\n\n        try {\n            this.database = await AddonModData.getDatabase(this.courseId, this.module.id);\n            this.title = this.database.name || this.title;\n\n            this.fieldsArray = await AddonModData.getFields(this.database.id, { cmId: this.module.id });\n            this.fields = CoreUtils.arrayToObject(this.fieldsArray, 'id');\n\n            await this.setEntryFromOffset();\n\n            this.access = await AddonModData.getDatabaseAccessInformation(this.database.id, { cmId: this.module.id });\n\n            this.groupInfo = await CoreGroups.getActivityGroupInfo(this.database.coursemodule);\n            this.selectedGroup = CoreGroups.validateGroupId(this.selectedGroup, this.groupInfo);\n\n            const actions = AddonModDataHelper.getActions(this.database, this.access, this.entry!);\n\n            const template = AddonModDataHelper.getTemplate(this.database, AddonModDataTemplateType.SINGLE, this.fieldsArray);\n            this.entryHtml = AddonModDataHelper.displayShowFields(\n                template,\n                this.fieldsArray,\n                this.entry!,\n                this.offset,\n                AddonModDataTemplateMode.SHOW,\n                actions,\n            );\n\n            this.showComments = actions.comments;\n\n            const entries: Record<number, AddonModDataEntry> = {};\n            entries[this.entryId!] = this.entry!;\n\n            // Pass the input data to the component.\n            this.jsData = {\n                fields: this.fields,\n                entries: entries,\n                database: this.database,\n                module: this.module,\n                group: this.selectedGroup,\n            };\n        } catch (error) {\n            if (!refresh) {\n                // Some call failed, retry without using cache since it might be a new activity.\n                return this.refreshAllData(isPtr);\n            }\n\n            CoreDomUtils.showErrorModalDefault(error, 'core.course.errorgetmodule', true);\n        } finally {\n            this.content?.scrollToTop();\n            this.entryLoaded = true;\n        }\n    }\n\n    /**\n     * Go to selected entry without changing state.\n     *\n     * @param offset Entry offset.\n     * @return Resolved when done.\n     */\n    async gotoEntry(offset: number): Promise<void> {\n        this.offset = offset;\n        this.entryId = undefined;\n        this.entry = undefined;\n        this.entryLoaded = false;\n\n        await this.fetchEntryData();\n        this.logView();\n    }\n\n    /**\n     * Refresh all the data.\n     *\n     * @param isPtr Whether is a pull to refresh action.\n     * @return Promise resolved when done.\n     */\n    protected async refreshAllData(isPtr?: boolean): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModData.invalidateDatabaseData(this.courseId));\n        if (this.database) {\n            promises.push(AddonModData.invalidateEntryData(this.database.id, this.entryId!));\n            promises.push(CoreGroups.invalidateActivityGroupInfo(this.database.coursemodule));\n            promises.push(AddonModData.invalidateEntriesData(this.database.id));\n            promises.push(AddonModData.invalidateFieldsData(this.database.id));\n\n            if (this.database.comments && this.entry && this.entry.id > 0 && this.commentsEnabled && this.comments) {\n                // Refresh comments. Don't add it to promises because we don't want the comments fetch to block the entry fetch.\n                this.comments.doRefresh().catch(() => {\n                    // Ignore errors.\n                });\n            }\n        }\n\n        await Promise.all(promises).finally(() =>\n            this.fetchEntryData(true, isPtr));\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    refreshDatabase(refresher?: IonRefresher): void {\n        if (!this.entryLoaded) {\n            return;\n        }\n\n        this.refreshAllData(true).finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * Set group to see the database.\n     *\n     * @param groupId Group identifier to set.\n     * @return Resolved when done.\n     */\n    async setGroup(groupId: number): Promise<void> {\n        this.selectedGroup = groupId;\n        this.offset = undefined;\n        this.entry = undefined;\n        this.entryId = undefined;\n        this.entryLoaded = false;\n\n        await this.fetchEntryData();\n        this.logView();\n    }\n\n    /**\n     * Convenience function to fetch the entry and set next/previous entries.\n     *\n     * @return Resolved when done.\n     */\n    protected async setEntryFromOffset(): Promise<void> {\n        if (typeof this.offset == 'undefined' && typeof this.entryId != 'undefined') {\n            // Entry id passed as navigation parameter instead of the offset.\n            // We don't display next/previous buttons in this case.\n            this.hasNext = false;\n            this.hasPrevious = false;\n\n            const entry = await AddonModDataHelper.fetchEntry(this.database!, this.fieldsArray, this.entryId);\n            this.entry = entry.entry;\n            this.ratingInfo = entry.ratinginfo;\n\n            return;\n        }\n\n        const perPage = AddonModDataProvider.PER_PAGE;\n        const page = typeof this.offset != 'undefined' && this.offset >= 0\n            ? Math.floor(this.offset / perPage)\n            : 0;\n\n        const entries = await AddonModDataHelper.fetchEntries(this.database!, this.fieldsArray, {\n            groupId: this.selectedGroup,\n            sort: 0,\n            order: 'DESC',\n            page,\n            perPage,\n        });\n\n        const pageEntries = (entries.offlineEntries || []).concat(entries.entries);\n\n        // Index of the entry when concatenating offline and online page entries.\n        let pageIndex = 0;\n        if (typeof this.offset == 'undefined') {\n            // No offset passed, display the first entry.\n            pageIndex = 0;\n        } else if (this.offset > 0) {\n            // Online entry.\n            pageIndex = this.offset % perPage + (entries.offlineEntries?.length || 0);\n        } else {\n            // Offline entry.\n            pageIndex = this.offset + (entries.offlineEntries?.length || 0);\n        }\n\n        this.entry = pageEntries[pageIndex];\n        this.entryId = this.entry.id;\n\n        this.hasPrevious = page > 0 || pageIndex > 0;\n\n        if (pageIndex + 1 < pageEntries.length) {\n            // Not the last entry on the page;\n            this.hasNext = true;\n        } else if (pageEntries.length < perPage) {\n            // Last entry of the last page.\n            this.hasNext = false;\n        } else {\n            // Last entry of the page, check if there are more pages.\n            const entries = await AddonModData.getEntries(this.database!.id, {\n                groupId: this.selectedGroup,\n                page: page + 1,\n                perPage: perPage,\n            });\n            this.hasNext = entries?.entries?.length > 0;\n        }\n\n        if (this.entryId > 0) {\n            // Online entry, we need to fetch the the rating info.\n            const entry = await AddonModData.getEntry(this.database!.id, this.entryId, { cmId: this.module.id });\n            this.ratingInfo = entry.ratinginfo;\n        }\n    }\n\n    /**\n     * Function called when entry is being rendered.\n     */\n    setRenderingEntry(rendering: boolean): void {\n        this.renderingEntry = rendering;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Function called when comments component is loading data.\n     */\n    setLoadingComments(loading: boolean): void {\n        this.loadingComments = loading;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Function called when rate component is loading data.\n     */\n    setLoadingRating(loading: boolean): void {\n        this.loadingRating = loading;\n        this.cdr.detectChanges();\n    }\n\n    /**\n     * Function called when rating is updated online.\n     */\n    ratingUpdated(): void {\n        AddonModData.invalidateEntryData(this.database!.id, this.entryId!);\n    }\n\n    /**\n     * Log viewing the activity.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async logView(): Promise<void> {\n        if (!this.database || !this.database.id) {\n            return;\n        }\n\n        await CoreUtils.ignoreErrors(AddonModData.logView(this.database.id, this.database.name));\n    }\n\n    /**\n     * Component being destroyed.\n     */\n    ngOnDestroy(): void {\n        this.syncObserver?.off();\n        this.entryChangedObserver?.off();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { CoreCourseModuleMainActivityPage } from '@features/course/classes/main-activity-page';\nimport { CoreNavigator } from '@services/navigator';\nimport { AddonModDataIndexComponent } from '../../components/index/index';\n\n/**\n * Page that displays a data.\n */\n@Component({\n    selector: 'page-addon-mod-data-index',\n    templateUrl: 'index.html',\n})\nexport class AddonModDataIndexPage extends CoreCourseModuleMainActivityPage<AddonModDataIndexComponent> implements OnInit {\n\n    @ViewChild(AddonModDataIndexComponent) activityComponent?: AddonModDataIndexComponent;\n\n    group = 0;\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        super.ngOnInit();\n        this.group = CoreNavigator.getRouteNumberParam('group') || 0;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}