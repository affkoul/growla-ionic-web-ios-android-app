{"version":3,"sources":["./src/addons/mod/forum/pages/new-discussion/new-discussion.html","./src/addons/mod/forum/pages/new-discussion/new-discussion.module.ts","./src/addons/mod/forum/pages/new-discussion/new-discussion.page.ts"],"names":[],"mappings":"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","file":"pages-new-discussion-new-discussion-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.mod_forum.addanewdiscussion' | translate }}</h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <!-- The context menu will be added in here. -->\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!groupsLoaded\\\" (ionRefresh)=\\\"refreshGroups($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n\\n    <core-loading [hideUntil]=\\\"groupsLoaded\\\">\\n        <form *ngIf=\\\"showForm\\\" #newDiscFormEl>\\n            <ion-item>\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_forum.subject' | translate }}</ion-label>\\n                <ion-input\\n                    [(ngModel)]=\\\"newDiscussion.subject\\\"\\n                    type=\\\"text\\\" [placeholder]=\\\"'addon.mod_forum.subject' | translate\\\" name=\\\"subject\\\">\\n                </ion-input>\\n            </ion-item>\\n            <ion-item>\\n                <ion-label position=\\\"stacked\\\">{{ 'addon.mod_forum.message' | translate }}</ion-label>\\n                <core-rich-text-editor name=\\\"addon_mod_forum_new_discussion\\\" contextLevel=\\\"module\\\" elementId=\\\"message\\\"\\n                    [control]=\\\"messageControl\\\" [placeholder]=\\\"'addon.mod_forum.message' | translate\\\" [component]=\\\"component\\\"\\n                    [componentId]=\\\"forum.cmid\\\" [autoSave]=\\\"true\\\" [contextInstanceId]=\\\"forum.cmid\\\"\\n                    (contentChanged)=\\\"onMessageChange($event)\\\">\\n                </core-rich-text-editor>\\n            </ion-item>\\n            <ion-item\\n                button\\n                class=\\\"divider ion-text-wrap\\\"\\n                (click)=\\\"toggleAdvanced()\\\"\\n                detail=\\\"false\\\"\\n                [attr.aria-expanded]=\\\"advanced\\\"\\n                [attr.aria-label]=\\\"(advanced ? 'core.hideadvanced' : 'core.showadvanced') | translate\\\"\\n                role=\\\"heading\\\"\\n                aria-controls=\\\"addon-mod-forum-new-discussion-advanced\\\"\\n            >\\n                <ion-icon *ngIf=\\\"!advanced\\\" name=\\\"fas-caret-right\\\" flip-rtl slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                <ion-icon *ngIf=\\\"advanced\\\" name=\\\"fas-caret-down\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                <ion-label><h2>{{ 'addon.mod_forum.advanced' | translate }}</h2></ion-label>\\n            </ion-item>\\n            <div *ngIf=\\\"advanced\\\" id=\\\"addon-mod-forum-new-discussion-advanced\\\">\\n                <ion-item *ngIf=\\\"showGroups && groupIds.length > 1 && accessInfo.cancanposttomygroups\\\">\\n                    <ion-label>{{ 'addon.mod_forum.posttomygroups' | translate }}</ion-label>\\n                    <ion-toggle [(ngModel)]=\\\"newDiscussion.postToAllGroups\\\" name=\\\"postallgroups\\\"></ion-toggle>\\n                </ion-item>\\n                <ion-item *ngIf=\\\"showGroups\\\">\\n                    <ion-label id=\\\"addon-mod-forum-groupslabel\\\">{{ 'addon.mod_forum.group' | translate }}</ion-label>\\n                    <ion-select [(ngModel)]=\\\"newDiscussion.groupId\\\" [disabled]=\\\"newDiscussion.postToAllGroups\\\"\\n                        aria-labelledby=\\\"addon-mod-forum-groupslabel\\\" interface=\\\"action-sheet\\\" name=\\\"groupid\\\"\\n                        [interfaceOptions]=\\\"{header: 'addon.mod_forum.group' | translate}\\\">\\n                        <ion-select-option *ngFor=\\\"let group of groups\\\" [value]=\\\"group.id\\\">{{ group.name }}</ion-select-option>\\n                    </ion-select>\\n                </ion-item>\\n                <ion-item>\\n                    <ion-label>{{ 'addon.mod_forum.discussionsubscription' | translate }}</ion-label>\\n                    <ion-toggle [(ngModel)]=\\\"newDiscussion.subscribe\\\" name=\\\"subscribe\\\"></ion-toggle>\\n                </ion-item>\\n                <ion-item *ngIf=\\\"canPin\\\">\\n                    <ion-label>{{ 'addon.mod_forum.discussionpinned' | translate }}</ion-label>\\n                    <ion-toggle [(ngModel)]=\\\"newDiscussion.pin\\\" name=\\\"pin\\\"></ion-toggle>\\n                </ion-item>\\n                <core-attachments *ngIf=\\\"canCreateAttachments && forum && forum.maxattachments > 0\\\"\\n                    [files]=\\\"newDiscussion.files\\\" [maxSize]=\\\"forum.maxbytes\\\" [maxSubmissions]=\\\"forum.maxattachments\\\"\\n                    [component]=\\\"component\\\" [componentId]=\\\"forum.cmid\\\" [allowOffline]=\\\"true\\\">\\n                </core-attachments>\\n            </div>\\n            <ion-item>\\n                <ion-label>\\n                    <ion-row>\\n                        <ion-col>\\n                            <ion-button\\n                                expand=\\\"block\\\" [disabled]=\\\"newDiscussion.subject == '' || newDiscussion.message == null\\\"\\n                                (click)=\\\"add()\\\">\\n                                {{ 'addon.mod_forum.posttoforum' | translate }}\\n                            </ion-button>\\n                        </ion-col>\\n                        <ion-col *ngIf=\\\"hasOffline\\\">\\n                            <ion-button expand=\\\"block\\\" color=\\\"light\\\" (click)=\\\"discard()\\\">{{ 'core.discard' | translate }}</ion-button>\\n                        </ion-col>\\n                    </ion-row>\\n                </ion-label>\\n            </ion-item>\\n        </form>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AddonModForumComponentsModule } from '@addons/mod/forum/components/components.module';\nimport { CanLeaveGuard } from '@guards/can-leave';\nimport { CoreEditorComponentsModule } from '@features/editor/components/components.module';\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { AddonModForumNewDiscussionPage } from './new-discussion.page';\n\nconst routes: Routes = [{\n    path: '',\n    component: AddonModForumNewDiscussionPage,\n    canDeactivate: [CanLeaveGuard],\n}];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        AddonModForumComponentsModule,\n        CoreEditorComponentsModule,\n    ],\n    declarations: [\n        AddonModForumNewDiscussionPage,\n    ],\n})\nexport class AddonForumNewDiscussionPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, ViewChild, ElementRef, OnInit, Optional } from '@angular/core';\nimport { FileEntry } from '@ionic-native/file/ngx';\nimport { FormControl } from '@angular/forms';\nimport { CoreEvents, CoreEventObserver } from '@singletons/events';\nimport { CoreGroup, CoreGroups, CoreGroupsProvider } from '@services/groups';\nimport { CoreNavigator } from '@services/navigator';\nimport {\n    AddonModForum,\n    AddonModForumAccessInformation,\n    AddonModForumCanAddDiscussion,\n    AddonModForumData,\n    AddonModForumProvider,\n} from '@addons/mod/forum/services/forum';\nimport { CoreEditorRichTextEditorComponent } from '@features/editor/components/rich-text-editor/rich-text-editor';\nimport { AddonModForumSync, AddonModForumSyncProvider } from '@addons/mod/forum/services/forum-sync';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { Translate } from '@singletons';\nimport { CoreSync } from '@services/sync';\nimport { AddonModForumDiscussionOptions, AddonModForumOffline } from '@addons/mod/forum/services/forum-offline';\nimport { CoreUtils } from '@services/utils/utils';\nimport { AddonModForumHelper } from '@addons/mod/forum/services/forum-helper';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreFileUploader } from '@features/fileuploader/services/fileuploader';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CanLeave } from '@guards/can-leave';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreForms } from '@singletons/form';\n\ntype NewDiscussionData = {\n    subject: string;\n    message: string | null; // Null means empty or just white space.\n    postToAllGroups: boolean;\n    groupId: number;\n    subscribe: boolean;\n    pin: boolean;\n    files: FileEntry[];\n};\n\n/**\n * Page that displays the new discussion form.\n */\n@Component({\n    selector: 'page-addon-mod-forum-new-discussion',\n    templateUrl: 'new-discussion.html',\n})\nexport class AddonModForumNewDiscussionPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild('newDiscFormEl') formElement!: ElementRef;\n    @ViewChild(CoreEditorRichTextEditorComponent) messageEditor!: CoreEditorRichTextEditorComponent;\n\n    component = AddonModForumProvider.COMPONENT;\n    messageControl = new FormControl();\n    groupsLoaded = false;\n    showGroups = false;\n    hasOffline = false;\n    canCreateAttachments = true; // Assume we can by default.\n    canPin = false;\n    forum!: AddonModForumData;\n    showForm = false;\n    groups: CoreGroup[] = [];\n    groupIds: number[] = [];\n    newDiscussion: NewDiscussionData = {\n        subject: '',\n        message: null,\n        postToAllGroups: false,\n        groupId: 0,\n        subscribe: true,\n        pin: false,\n        files: [],\n    };\n\n    advanced = false; // Display all form fields.\n    accessInfo: AddonModForumAccessInformation = {};\n\n    protected courseId!: number;\n    protected cmId!: number;\n    protected forumId!: number;\n    protected timeCreated!: number;\n    protected syncId!: string;\n    protected syncObserver?: CoreEventObserver;\n    protected isDestroyed = false;\n    protected originalData?: Partial<NewDiscussionData>;\n    protected forceLeave = false;\n\n    constructor(@Optional() protected splitView: CoreSplitViewComponent) {}\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.forumId = CoreNavigator.getRouteNumberParam('forumId')!;\n        this.timeCreated = CoreNavigator.getRouteNumberParam('timeCreated')!;\n\n        this.fetchDiscussionData().finally(() => {\n            this.groupsLoaded = true;\n        });\n    }\n\n    /**\n     * User entered the page that contains the component.\n     */\n    ionViewDidEnter(): void {\n        if (this.syncObserver) {\n            // Already setup.\n            return;\n        }\n\n        // Refresh data if this discussion is synchronized automatically.\n        this.syncObserver = CoreEvents.on(AddonModForumSyncProvider.AUTO_SYNCED, data => {\n            if (data.forumId == this.forumId && data.userId == CoreSites.getCurrentSiteUserId()) {\n                CoreDomUtils.showAlertTranslated('core.notice', 'core.contenteditingsynced');\n                this.returnToDiscussions();\n            }\n        }, CoreSites.getCurrentSiteId());\n    }\n\n    /**\n     * Fetch if forum uses groups and the groups it uses.\n     *\n     * @param refresh Whether we're refreshing data.\n     * @return Promise resolved when done.\n     */\n    protected async fetchDiscussionData(refresh?: boolean): Promise<void> {\n        try {\n            const mode = await CoreGroups.getActivityGroupMode(this.cmId);\n            const promises: Promise<unknown>[] = [];\n\n            if (mode === CoreGroupsProvider.SEPARATEGROUPS || mode === CoreGroupsProvider.VISIBLEGROUPS) {\n                promises.push(\n                    CoreGroups.instance\n                        .getActivityAllowedGroups(this.cmId)\n                        .then((result) => {\n                            let promise;\n                            if (mode === CoreGroupsProvider.VISIBLEGROUPS) {\n                                // We need to check which of the returned groups the user can post to.\n                                promise = this.validateVisibleGroups(result.groups);\n                            } else {\n                                // WS already filters groups, no need to do it ourselves. Add \"All participants\" if needed.\n                                promise = this.addAllParticipantsOption(result.groups, true);\n                            }\n\n                            // eslint-disable-next-line promise/no-nesting\n                            return promise.then((forumGroups) => {\n                                if (forumGroups.length > 0) {\n                                    this.groups = forumGroups;\n                                    this.groupIds = forumGroups.map((group) => group.id).filter((id) => id > 0);\n                                    // Do not override group id.\n                                    this.newDiscussion.groupId = this.newDiscussion.groupId || forumGroups[0].id;\n                                    this.showGroups = true;\n                                    if (this.groupIds.length <= 1) {\n                                        this.newDiscussion.postToAllGroups = false;\n                                    }\n\n                                    return;\n                                } else {\n                                    const message = mode === CoreGroupsProvider.SEPARATEGROUPS ?\n                                        'addon.mod_forum.cannotadddiscussionall' : 'addon.mod_forum.cannotadddiscussion';\n\n                                    throw new Error(Translate.instant(message));\n                                }\n                            });\n                        }),\n                );\n            } else {\n                this.showGroups = false;\n                this.newDiscussion.postToAllGroups = false;\n\n                // Use the canAddDiscussion WS to check if the user can add attachments and pin discussions.\n                promises.push(\n                    CoreUtils.ignoreErrors(\n                        AddonModForum.instance\n                            .canAddDiscussionToAll(this.forumId, { cmId: this.cmId })\n                            .then((response) => {\n                                this.canPin = !!response.canpindiscussions;\n                                this.canCreateAttachments = !!response.cancreateattachment;\n\n                                return;\n                            }),\n                    ),\n                );\n            }\n\n            // Get forum.\n            promises.push(AddonModForum.getForum(this.courseId, this.cmId).then((forum) => this.forum = forum));\n\n            // Get access information.\n            promises.push(\n                AddonModForum.instance\n                    .getAccessInformation(this.forumId, { cmId: this.cmId })\n                    .then((accessInfo) => this.accessInfo = accessInfo),\n            );\n\n            await Promise.all(promises);\n\n            // If editing a discussion, get offline data.\n            if (this.timeCreated && !refresh) {\n                this.syncId = AddonModForumSync.getForumSyncId(this.forumId);\n\n                await AddonModForumSync.waitForSync(this.syncId).then(() => {\n                    // Do not block if the scope is already destroyed.\n                    if (!this.isDestroyed) {\n                        CoreSync.blockOperation(AddonModForumProvider.COMPONENT, this.syncId);\n                    }\n\n                    // eslint-disable-next-line promise/no-nesting\n                    return AddonModForumOffline.instance\n                        .getNewDiscussion(this.forumId, this.timeCreated)\n                        .then(async (discussion) => {\n                            this.hasOffline = true;\n                            discussion.options = discussion.options || {};\n                            if (discussion.groupid == AddonModForumProvider.ALL_GROUPS) {\n                                this.newDiscussion.groupId = this.groups[0].id;\n                                this.newDiscussion.postToAllGroups = true;\n                            } else {\n                                this.newDiscussion.groupId = discussion.groupid;\n                                this.newDiscussion.postToAllGroups = false;\n                            }\n                            this.newDiscussion.subject = discussion.subject;\n                            this.newDiscussion.message = discussion.message;\n                            this.newDiscussion.subscribe = !!discussion.options.discussionsubscribe;\n                            this.newDiscussion.pin = !!discussion.options.discussionpinned;\n                            this.messageControl.setValue(discussion.message);\n\n                            // Treat offline attachments if any.\n                            if (typeof discussion.options.attachmentsid === 'object' && discussion.options.attachmentsid.offline) {\n                                const files = await AddonModForumHelper.getNewDiscussionStoredFiles(\n                                    this.forumId,\n                                    this.timeCreated,\n                                );\n\n                                this.newDiscussion.files = files;\n                            }\n\n                            // Show advanced fields by default if any of them has not the default value.\n                            if (\n                                !this.newDiscussion.subscribe ||\n                                this.newDiscussion.pin ||\n                                this.newDiscussion.files.length ||\n                                this.groups.length > 0 && this.newDiscussion.groupId != this.groups[0].id ||\n                                this.newDiscussion.postToAllGroups\n                            ) {\n                                this.advanced = true;\n                            }\n\n                            return;\n                        });\n                });\n            }\n\n            if (!this.originalData) {\n                // Initialize original data.\n                this.originalData = {\n                    subject: this.newDiscussion.subject,\n                    message: this.newDiscussion.message,\n                    files: this.newDiscussion.files.slice(),\n                };\n            }\n\n            this.showForm = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_forum.errorgetgroups', true);\n\n            this.showForm = false;\n        }\n    }\n\n    /**\n     * Validate which of the groups returned by getActivityAllowedGroups in visible groups should be shown to post to.\n     *\n     * @param forumGroups Forum groups.\n     * @return Promise resolved with the list of groups.\n     */\n    protected async validateVisibleGroups(forumGroups: CoreGroup[]): Promise<CoreGroup[]> {\n        let response: AddonModForumCanAddDiscussion;\n\n        // We first check if the user can post to all the groups.\n        try {\n            response = await AddonModForum.canAddDiscussionToAll(this.forumId, { cmId: this.cmId });\n        } catch (error) {\n            // The call failed, let's assume he can't.\n            response = {\n                status: false,\n                canpindiscussions: false,\n                cancreateattachment: true,\n            };\n        }\n\n        this.canPin = !!response.canpindiscussions;\n        this.canCreateAttachments = !!response.cancreateattachment;\n\n        // The user can post to all groups, add the \"All participants\" option and return them all.\n        if (response.status) {\n            return this.addAllParticipantsOption(forumGroups, false);\n        }\n\n        // The user can't post to all groups, let's check which groups he can post to.\n        const promises: Promise<unknown>[] = [];\n        const filtered: CoreGroup[] = [];\n\n        forumGroups.forEach((group) => {\n            promises.push(\n                AddonModForum.instance\n                    .canAddDiscussion(this.forumId, group.id, { cmId: this.cmId })\n\n                    // The call failed, let's return true so the group is shown.\n                    // If the user can't post to it an error will be shown when he tries to add the discussion.\n                    .catch(() =>({ status: true }))\n\n                    .then((response) => {\n                        if (response.status) {\n                            filtered.push(group);\n                        }\n\n                        return;\n                    }),\n            );\n        });\n\n        await Promise.all(promises);\n\n        return filtered;\n    }\n\n    /**\n     * Filter forum groups, returning only those that are inside user groups.\n     *\n     * @param forumGroups Forum groups.\n     * @param userGroups User groups.\n     * @return Filtered groups.\n     */\n    protected filterGroups(forumGroups: CoreGroup[], userGroups: CoreGroup[]): CoreGroup[] {\n        const userGroupsIds = userGroups.map(group => group.id);\n\n        return forumGroups.filter(forumGroup => userGroupsIds.indexOf(forumGroup.id) > -1);\n    }\n\n    /**\n     * Add the \"All participants\" option to a list of groups if the user can add a discussion to all participants.\n     *\n     * @param groups Groups.\n     * @param check True to check if the user can add a discussion to all participants.\n     * @return Promise resolved with the list of groups.\n     */\n    protected addAllParticipantsOption(groups: CoreGroup[], check: boolean): Promise<CoreGroup[]> {\n        if (!AddonModForum.isAllParticipantsFixed()) {\n            // All participants has a bug, don't add it.\n            return Promise.resolve(groups);\n        }\n\n        let promise;\n\n        if (check) {\n            // We need to check if the user can add a discussion to all participants.\n            promise = AddonModForum.canAddDiscussionToAll(this.forumId, { cmId: this.cmId }).then((response) => {\n                this.canPin = !!response.canpindiscussions;\n                this.canCreateAttachments = !!response.cancreateattachment;\n\n                return response.status;\n            }).catch(() =>\n                // The call failed, let's assume he can't.\n                false);\n        } else {\n            // No need to check, assume the user can.\n            promise = Promise.resolve(true);\n        }\n\n        return promise.then((canAdd) => {\n            if (canAdd) {\n                groups.unshift({\n                    courseid: this.courseId,\n                    id: AddonModForumProvider.ALL_PARTICIPANTS,\n                    name: Translate.instant('core.allparticipants'),\n                });\n            }\n\n            return groups;\n        });\n    }\n\n    /**\n     * Pull to refresh.\n     *\n     * @param refresher Refresher.\n     */\n    refreshGroups(refresher?: IonRefresher): void {\n        const promises = [\n            CoreGroups.invalidateActivityGroupMode(this.cmId),\n            CoreGroups.invalidateActivityAllowedGroups(this.cmId),\n            AddonModForum.invalidateCanAddDiscussion(this.forumId),\n        ];\n\n        Promise.all(promises).finally(() => {\n            this.fetchDiscussionData(true).finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * Convenience function to update or return to discussions depending on device.\n     *\n     * @param discussionIds Ids of the new discussions.\n     * @param discTimecreated The time created of the discussion (if offline).\n     */\n    protected returnToDiscussions(discussionIds?: number[] | null, discTimecreated?: number): void {\n        this.forceLeave = true;\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(this.newDiscussion.files);\n\n        CoreEvents.trigger(\n            AddonModForumProvider.NEW_DISCUSSION_EVENT,\n            {\n                forumId: this.forumId,\n                cmId: this.cmId,\n                discussionIds: discussionIds,\n                discTimecreated: discTimecreated,\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n\n        if (this.splitView?.outletActivated) {\n            // Empty form.\n            this.hasOffline = false;\n            this.newDiscussion.subject = '';\n            this.newDiscussion.message = null;\n            this.newDiscussion.files = [];\n            this.newDiscussion.postToAllGroups = false;\n            this.messageEditor.clearText();\n            this.originalData = CoreUtils.clone(this.newDiscussion);\n        } else {\n            CoreNavigator.back();\n        }\n    }\n\n    /**\n     * Message changed.\n     *\n     * @param text The new text.\n     */\n    onMessageChange(text: string): void {\n        this.newDiscussion.message = text;\n    }\n\n    /**\n     * Add a new discussion.\n     */\n    async add(): Promise<void> {\n        const forumName = this.forum.name;\n        const subject = this.newDiscussion.subject;\n        let message = this.newDiscussion.message || '';\n        const pin = this.newDiscussion.pin;\n        const attachments = this.newDiscussion.files;\n        const discTimecreated = this.timeCreated || Date.now();\n        const options: AddonModForumDiscussionOptions = {\n            discussionsubscribe: !!this.newDiscussion.subscribe,\n        };\n\n        if (!subject) {\n            CoreDomUtils.showErrorModal('addon.mod_forum.erroremptysubject', true);\n\n            return;\n        }\n        if (!message) {\n            CoreDomUtils.showErrorModal('addon.mod_forum.erroremptymessage', true);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        // Add some HTML to the message if needed.\n        message = CoreTextUtils.formatHtmlLines(message);\n\n        if (pin) {\n            options.discussionpinned = true;\n        }\n\n        const groupIds = this.newDiscussion.postToAllGroups ? this.groupIds : [this.newDiscussion.groupId];\n\n        try {\n            const discussionIds = await AddonModForumHelper.addNewDiscussion(\n                this.forumId,\n                forumName,\n                this.courseId,\n                subject,\n                message,\n                attachments,\n                options,\n                groupIds,\n                discTimecreated,\n            );\n\n            if (discussionIds) {\n                // Data sent to server, delete stored files (if any).\n                AddonModForumHelper.deleteNewDiscussionStoredFiles(this.forumId, discTimecreated);\n\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'forum' });\n            }\n\n            if (discussionIds && discussionIds.length < groupIds.length) {\n                // Some discussions could not be created.\n                CoreDomUtils.showErrorModalDefault(null, 'addon.mod_forum.errorposttoallgroups', true);\n            }\n\n            CoreForms.triggerFormSubmittedEvent(\n                this.formElement,\n                !!discussionIds,\n                CoreSites.getCurrentSiteId(),\n            );\n\n            this.returnToDiscussions(discussionIds, discTimecreated);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_forum.cannotcreatediscussion', true);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Discard an offline saved discussion.\n     */\n    async discard(): Promise<void> {\n        try {\n            await CoreDomUtils.showConfirm(Translate.instant('core.areyousure'));\n\n            const promises: Promise<unknown>[] = [];\n\n            promises.push(AddonModForumOffline.deleteNewDiscussion(this.forumId, this.timeCreated));\n            promises.push(\n                CoreUtils.ignoreErrors(\n                    AddonModForumHelper.deleteNewDiscussionStoredFiles(this.forumId, this.timeCreated),\n                ),\n            );\n\n            await Promise.all(promises);\n\n            CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n\n            this.returnToDiscussions();\n        } catch (error) {\n            // Cancelled.\n        }\n    }\n\n    /**\n     * Show or hide advanced form fields.\n     */\n    toggleAdvanced(): void {\n        this.advanced = !this.advanced;\n    }\n\n    /**\n     * Check if we can leave the page or not.\n     *\n     * @return Resolved if we can leave it, rejected if not.\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave) {\n            return true;\n        }\n\n        if (AddonModForumHelper.hasPostDataChanged(this.newDiscussion, this.originalData)) {\n            // Show confirmation if some data has been modified.\n            await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n        }\n\n        // Delete the local files from the tmp folder.\n        CoreFileUploader.clearTmpFiles(this.newDiscussion.files);\n\n        if (this.formElement) {\n            CoreForms.triggerFormCancelledEvent(this.formElement, CoreSites.getCurrentSiteId());\n        }\n\n        return true;\n    }\n\n    /**\n     * Runs when the page is about to leave and no longer be the active page.\n     */\n    ionViewWillLeave(): void {\n        this.syncObserver && this.syncObserver.off();\n        delete this.syncObserver;\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        if (this.syncId) {\n            CoreSync.unblockOperation(AddonModForumProvider.COMPONENT, this.syncId);\n        }\n        this.isDestroyed = true;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}