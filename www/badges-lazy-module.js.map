{"version":3,"sources":["./src/addons/badges/pages/issued-badge/issued-badge.html","./src/addons/badges/pages/user-badges/user-badges.html","./src/addons/badges/badges-lazy.module.ts","./src/addons/badges/pages/issued-badge/issued-badge.page.ts","./src/addons/badges/pages/user-badges/user-badges.page.ts"],"names":[],"mappings":"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","file":"badges-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1 *ngIf=\\\"badge\\\">{{ badge.name }}</h1>\\n        <h1 *ngIf=\\\"!badge\\\">{{ 'addon.badges.badges' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!badgeLoaded\\\" (ionRefresh)=\\\"refreshBadges($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"badgeLoaded\\\">\\n        <ion-item-group *ngIf=\\\"badge\\\">\\n            <ion-item class=\\\"ion-text-wrap ion-text-center\\\">\\n                <ion-label>\\n                    <img *ngIf=\\\"badge.badgeurl\\\" class=\\\"large-avatar\\\" [src]=\\\"badge.badgeurl\\\" core-external-content [alt]=\\\"badge.name\\\" />\\n                    <ion-badge color=\\\"danger\\\" *ngIf=\\\"badge.dateexpire && currentTime >= badge.dateexpire\\\">\\n                        {{ 'addon.badges.expired' | translate }}\\n                    </ion-badge>\\n                </ion-label>\\n            </ion-item>\\n        </ion-item-group>\\n\\n        <ion-item-group *ngIf=\\\"user\\\">\\n            <ion-item-divider>\\n                <ion-label>\\n                    <h2>{{ 'addon.badges.recipientdetails' | translate}}</h2>\\n                </ion-label>\\n            </ion-item-divider>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.name' | translate}}</h2>\\n                    <p>{{ user.fullname }}</p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-item-group>\\n\\n        <ng-container *ngIf=\\\"badge\\\">\\n            <ion-item-group>\\n                <ion-item-divider>\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.issuerdetails' | translate}}</h2>\\n                    </ion-label>\\n                </ion-item-divider>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.issuername\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.issuername' | translate}}</h2>\\n                        <p>{{ badge.issuername }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.issuercontact\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.contact' | translate}}</h2>\\n                        <p><a href=\\\"mailto:{{badge.issuercontact}}\\\" core-link auto-login=\\\"no\\\"> {{ badge.issuercontact }} </a></p>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-item-group>\\n\\n            <ion-item-group>\\n                <ion-item-divider>\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.badgedetails' | translate}}</h2>\\n                    </ion-label>\\n                </ion-item-divider>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.name\\\">\\n                    <ion-label>\\n                        <h2>{{ 'core.name' | translate}}</h2>\\n                        <p>{{ badge.name }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.version\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.version' | translate}}</h2>\\n                        <p>{{ badge.version }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.language\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.language' | translate}}</h2>\\n                        <p>{{ badge.language }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.description\\\">\\n                    <ion-label>\\n                        <h2>{{ 'core.description' | translate}}</h2>\\n                        <p>{{ badge.description }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imageauthorname\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.imageauthorname' | translate}}</h2>\\n                        <p>{{ badge.imageauthorname }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imageauthoremail\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.imageauthoremail' | translate}}</h2>\\n                        <p><a href=\\\"mailto:{{badge.imageauthoremail}}\\\" core-link auto-login=\\\"no\\\"> {{ badge.imageauthoremail }} </a></p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imageauthorurl\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.imageauthorurl' | translate}}</h2>\\n                        <p><a [href]=\\\"badge.imageauthorurl\\\" core-link auto-login=\\\"no\\\"> {{ badge.imageauthorurl }} </a></p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.imagecaption\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.imagecaption' | translate}}</h2>\\n                        <p>{{ badge.imagecaption }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"course\\\">\\n                    <ion-label>\\n                        <h2>{{ 'core.course' | translate}}</h2>\\n                        <p>\\n                            <core-format-text [text]=\\\"course.fullname\\\" contextLevel=\\\"course\\\" [contextInstanceId]=\\\"courseId\\\">\\n                            </core-format-text>\\n                        </p>\\n                    </ion-label>\\n                </ion-item>\\n                <!-- Criteria (not yet available) -->\\n            </ion-item-group>\\n\\n            <ion-item-group>\\n                <ion-item-divider>\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.issuancedetails' | translate}}</h2>\\n                    </ion-label>\\n                </ion-item-divider>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.dateissued\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.dateawarded' | translate}}</h2>\\n                        <p>{{badge.dateissued * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.dateexpire\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.expirydate' | translate}}</h2>\\n                        <p>\\n                            {{ badge.dateexpire * 1000 | coreFormatDate }}\\n                            <span class=\\\"text-danger\\\" *ngIf=\\\"currentTime >= badge.dateexpire\\\">\\n                                {{ 'addon.badges.warnexpired' | translate }}\\n                            </span>\\n                        </p>\\n                    </ion-label>\\n                </ion-item>\\n                <!-- Evidence (not yet available) -->\\n            </ion-item-group>\\n\\n            <!-- Endorsement -->\\n            <ion-item-group *ngIf=\\\"badge.endorsement\\\">\\n                <ion-item-divider>\\n                    <ion-label><h2>{{ 'addon.badges.bendorsement' | translate}}</h2></ion-label>\\n                </ion-item-divider>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.issuername\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.issuername' | translate}}</h2>\\n                        <p>{{ badge.endorsement.issuername }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.issueremail\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.issueremail' | translate}}</h2>\\n                        <p>\\n                            <a href=\\\"mailto:{{badge.endorsement.issueremail}}\\\" core-link auto-login=\\\"no\\\">\\n                                {{ badge.endorsement.issueremail }}\\n                            </a>\\n                        </p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.issuerurl\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.issuerurl' | translate}}</h2>\\n                        <p><a [href]=\\\"badge.endorsement.issuerurl\\\" core-link auto-login=\\\"no\\\"> {{ badge.endorsement.issuerurl }} </a></p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.dateissued\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.dateawarded' | translate}}</h2>\\n                        <p>{{ badge.endorsement.dateissued * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.claimid\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.claimid' | translate}}</h2>\\n                        <p><a [href]=\\\"badge.endorsement.claimid\\\" core-link auto-login=\\\"no\\\"> {{ badge.endorsement.claimid }} </a></p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.endorsement.claimcomment\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.badges.claimcomment' | translate}}</h2>\\n                        <p>{{ badge.endorsement.claimcomment }}</p>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-item-group>\\n\\n            <!-- Related badges -->\\n            <ion-item-group *ngIf=\\\"badge.relatedbadges\\\">\\n                <ion-item-divider>\\n                    <ion-label><h2>{{ 'addon.badges.relatedbages' | translate}}</h2></ion-label>\\n                </ion-item-divider>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let relatedBadge of badge.relatedbadges\\\">\\n                    <ion-label><h2>{{ relatedBadge.name }}</h2></ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.relatedbadges.length == 0\\\">\\n                    <ion-label><h2>{{ 'addon.badges.norelated' | translate}}</h2></ion-label>\\n                </ion-item>\\n            </ion-item-group>\\n\\n            <!-- Competencies alignment -->\\n            <ion-item-group *ngIf=\\\"badge.alignment\\\">\\n                <ion-item-divider>\\n                    <ion-label><h2>{{ 'addon.badges.alignment' | translate}}</h2></ion-label>\\n                </ion-item-divider>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let alignment of badge.alignment\\\" [href]=\\\"alignment.targeturl\\\" core-link\\n                    auto-login=\\\"no\\\">\\n                    <ion-label><h2>{{ alignment.targetname }}</h2></ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"badge.alignment.length == 0\\\">\\n                    <ion-label><h2>{{ 'addon.badges.noalignment' | translate}}</h2></ion-label>\\n                </ion-item>\\n            </ion-item-group>\\n        </ng-container>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.badges.badges' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!badges.loaded\\\" (ionRefresh)=\\\"refreshBadges($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n        <core-loading [hideUntil]=\\\"badges.loaded\\\">\\n            <core-empty-box *ngIf=\\\"badges.empty\\\" icon=\\\"fas-trophy\\\"\\n                [message]=\\\"'addon.badges.nobadges' | translate\\\">\\n            </core-empty-box>\\n\\n            <ion-list *ngIf=\\\"!badges.empty\\\" class=\\\"ion-no-margin\\\">\\n                <ion-item button class=\\\"ion-text-wrap\\\" *ngFor=\\\"let badge of badges.items\\\" [attr.aria-label]=\\\"badge.name\\\"\\n                    (click)=\\\"badges.select(badge)\\\" [attr.aria-current]=\\\"badges.getItemAriaCurrent(badge)\\\" detail=\\\"true\\\">\\n                    <ion-avatar slot=\\\"start\\\">\\n                        <img [src]=\\\"badge.badgeurl\\\" [alt]=\\\"badge.name\\\" core-external-content>\\n                    </ion-avatar>\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ badge.name }}</p>\\n                        <p>{{ badge.dateissued * 1000 | coreFormatDate :'strftimedatetimeshort' }}</p>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" color=\\\"danger\\\" *ngIf=\\\"badge.dateexpire && currentTime >= badge.dateexpire\\\">\\n                        {{ 'addon.badges.expired' | translate }}\\n                    </ion-badge>\\n                </ion-item>\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { AddonBadgesIssuedBadgePage } from './pages/issued-badge/issued-badge.page';\nimport { AddonBadgesUserBadgesPage } from './pages/user-badges/user-badges.page';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        pathMatch: 'full',\n        component: AddonBadgesUserBadgesPage,\n    },\n    {\n        path: ':badgeHash',\n        component: AddonBadgesIssuedBadgePage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: '',\n        component: AddonBadgesUserBadgesPage,\n        children: [\n            {\n                path: ':badgeHash',\n                component: AddonBadgesIssuedBadgePage,\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonBadgesUserBadgesPage,\n        AddonBadgesIssuedBadgePage,\n    ],\n})\nexport class AddonBadgesLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport { CoreUser, CoreUserProfile } from '@features/user/services/user';\nimport { AddonBadges, AddonBadgesUserBadge } from '../../services/badges';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCourses, CoreEnrolledCourseData } from '@features/courses/services/courses';\nimport { CoreNavigator } from '@services/navigator';\nimport { ActivatedRoute } from '@angular/router';\n\n/**\n * Page that displays the list of calendar events.\n */\n@Component({\n    selector: 'page-addon-badges-issued-badge',\n    templateUrl: 'issued-badge.html',\n})\nexport class AddonBadgesIssuedBadgePage implements OnInit {\n\n    protected badgeHash = '';\n    protected userId!: number;\n\n    courseId = 0;\n    user?: CoreUserProfile;\n    course?: CoreEnrolledCourseData;\n    badge?: AddonBadgesUserBadge;\n    badgeLoaded = false;\n    currentTime = 0;\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) { }\n\n    /**\n     * View loaded.\n     */\n    ngOnInit(): void {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId') || this.courseId; // Use 0 for site badges.\n        this.userId = CoreNavigator.getRouteNumberParam('userId') || CoreSites.getCurrentSite()!.getUserId();\n        this.badgeHash = CoreNavigator.getRouteParam('badgeHash') || '';\n\n        this.fetchIssuedBadge().finally(() => {\n            this.badgeLoaded = true;\n        });\n    }\n\n    /**\n     * Fetch the issued badge required for the view.\n     *\n     * @return Promise resolved when done.\n     */\n    async fetchIssuedBadge(): Promise<void> {\n        this.currentTime = CoreTimeUtils.timestamp();\n\n        this.user = await CoreUser.getProfile(this.userId, this.courseId, true);\n\n        try {\n            const badges = await AddonBadges.getUserBadges(this.courseId, this.userId);\n            const badge = badges.find((badge) => this.badgeHash == badge.uniquehash);\n\n            if (!badge) {\n                return;\n            }\n\n            this.badge = badge;\n            if (badge.courseid) {\n                try {\n                    this.course = await CoreCourses.getUserCourse(badge.courseid, true);\n                } catch {\n                    // Maybe an old deleted course.\n                    this.course = undefined;\n                }\n            }\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'Error getting badge data.');\n        }\n    }\n\n    /**\n     * Refresh the badges.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshBadges(refresher?: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(Promise.all([\n            AddonBadges.invalidateUserBadges(this.courseId, this.userId),\n        ]));\n\n        await CoreUtils.ignoreErrors(Promise.all([\n            this.fetchIssuedBadge(),\n        ]));\n\n        refresher?.complete();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { AddonBadges, AddonBadgesUserBadge } from '../../services/badges';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\nimport { Params } from '@angular/router';\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Page that displays the list of calendar events.\n */\n@Component({\n    selector: 'page-addon-badges-user-badges',\n    templateUrl: 'user-badges.html',\n})\nexport class AddonBadgesUserBadgesPage implements AfterViewInit, OnDestroy {\n\n    currentTime = 0;\n    badges: AddonBadgesUserBadgesManager;\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    constructor() {\n        const courseId = CoreNavigator.getRouteNumberParam('courseId') ?? 0; // Use 0 for site badges.\n        const userId = CoreNavigator.getRouteNumberParam('userId') ?? CoreSites.getCurrentSiteUserId();\n\n        this.badges = new AddonBadgesUserBadgesManager(AddonBadgesUserBadgesPage, courseId, userId);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchInitialBadges();\n\n        this.badges.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.badges.destroy();\n    }\n\n    /**\n     * Refresh the badges.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshBadges(refresher?: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(AddonBadges.invalidateUserBadges(this.badges.courseId, this.badges.userId));\n        await CoreUtils.ignoreErrors(this.fetchBadges());\n\n        refresher?.complete();\n    }\n\n    /**\n     * Obtain the initial list of badges.\n     */\n    private async fetchInitialBadges(): Promise<void> {\n        this.currentTime = CoreTimeUtils.timestamp();\n\n        try {\n            await this.fetchBadges();\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'Error loading badges');\n\n            this.badges.setItems([]);\n        }\n    }\n\n    /**\n     * Update the list of badges.\n     */\n    private async fetchBadges(): Promise<void> {\n        const badges = await AddonBadges.getUserBadges(this.badges.courseId, this.badges.userId);\n\n        this.badges.setItems(badges);\n    }\n\n}\n\n/**\n * Helper class to manage badges.\n */\nclass AddonBadgesUserBadgesManager extends CorePageItemsListManager<AddonBadgesUserBadge> {\n\n    courseId: number;\n    userId: number;\n\n    constructor(pageComponent: unknown, courseId: number, userId: number) {\n        super(pageComponent);\n\n        this.courseId = courseId;\n        this.userId = userId;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemPath(badge: AddonBadgesUserBadge): string {\n        return badge.uniquehash;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemQueryParams(): Params {\n        return {\n            courseId: this.courseId,\n            userId: this.userId,\n        };\n    }\n\n}\n"],"sourceRoot":"webpack:///"}