{"version":3,"sources":["./src/core/features/grades/pages/courses/courses.html","./src/core/features/grades/pages/grade/grade.html","./src/core/features/grades/grades-lazy.module.ts","./src/core/features/grades/pages/courses/courses.page.ts","./src/core/features/grades/pages/grade/grade.page.ts"],"names":[],"mappings":"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","file":"features-grades-grades-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'core.grades.grades' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!courses.loaded\\\" (ionRefresh)=\\\"refreshCourses($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n        <core-loading [hideUntil]=\\\"courses.loaded\\\">\\n            <core-empty-box\\n                *ngIf=\\\"courses.empty\\\"\\n                icon=\\\"fas-chart-bar\\\"\\n                [message]=\\\"'core.grades.nogradesreturned' | translate\\\"\\n            ></core-empty-box>\\n\\n            <ion-list *ngIf=\\\"!courses.empty\\\">\\n                <ion-item\\n                    *ngFor=\\\"let course of courses.items\\\"\\n                    [attr.aria-label]=\\\"course.courseFullName\\\"\\n                    [attr.aria-current]=\\\"courses.getItemAriaCurrent(course)\\\"\\n                    class=\\\"ion-text-wrap\\\"\\n                    button\\n                    detail=\\\"true\\\"\\n                    (click)=\\\"courses.select(course)\\\"\\n                >\\n                    <ion-label>\\n                        <core-format-text\\n                            [text]=\\\"course.courseFullName\\\"\\n                            [contextInstanceId]=\\\"course.courseid\\\"\\n                            contextLevel=\\\"course\\\"\\n                        ></core-format-text>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" color=\\\"light\\\">\\n                        <span class=\\\"sr-only\\\" *ngIf=\\\"course.grade && course.grade != '-'\\\">\\n                            {{ 'core.grades.grade' | translate }}\\n                        </span>\\n                        {{course.grade}}\\n                    </ion-badge>\\n                </ion-item>\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'core.grades.grade' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!gradeLoaded\\\" (ionRefresh)=\\\"refreshGrade($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"gradeLoaded\\\">\\n        <core-empty-box *ngIf=\\\"!grade\\\" icon=\\\"fas-chart-bar\\\" [message]=\\\"'core.grades.nogradesreturned' | translate\\\"></core-empty-box>\\n\\n        <ion-list *ngIf=\\\"grade\\\">\\n            <ion-item *ngIf=\\\"grade.itemname && grade.link\\\" class=\\\"ion-text-wrap\\\" detail=\\\"true\\\" [href]=\\\"grade.link\\\" core-link\\n            capture=\\\"true\\\">\\n                <ion-icon *ngIf=\\\"grade.icon\\\" name=\\\"{{grade.icon}}\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"grade.iconAlt\\\"></ion-icon>\\n                <img *ngIf=\\\"grade.image\\\" [src]=\\\"grade.image\\\" slot=\\\"start\\\" class=\\\"core-module-icon\\\"\\n                    [alt]=\\\"grade.iconAlt\\\">\\n                <ion-label>\\n                    <h2><core-format-text [text]=\\\"grade.itemname\\\" contextLevel=\\\"course\\\" [contextInstanceId]=\\\"courseId\\\">\\n                    </core-format-text></h2>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item *ngIf=\\\"grade.itemname && !grade.link\\\" class=\\\"ion-text-wrap\\\" >\\n                <ion-icon *ngIf=\\\"grade.icon\\\" name=\\\"{{grade.icon}}\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"grade.iconAlt\\\"></ion-icon>\\n                <img *ngIf=\\\"grade.image\\\" [src]=\\\"grade.image\\\" slot=\\\"start\\\" class=\\\"core-module-icon\\\" [alt]=\\\"grade.iconAlt\\\"/>\\n                <ion-label>\\n                    <h2><core-format-text [text]=\\\"grade.itemname\\\" contextLevel=\\\"course\\\" [contextInstanceId]=\\\"courseId\\\">\\n                    </core-format-text></h2>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.weight\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.weight' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.weight\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.grade\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.grade' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.grade\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.range\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.range' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.range\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.percentage\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.percentage' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.percentage\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.lettergrade\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.lettergrade' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.lettergrade\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.rank\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.rank' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.rank\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.average\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.average' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.average\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.feedback\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.feedback' | translate}}</h2>\\n                    <p><core-format-text [fullTitle]=\\\"'core.grades.feedback' | translate\\\" maxHeight=\\\"60\\\" fullOnClick=\\\"true\\\"\\n                        [text]=\\\"grade.feedback\\\" contextLevel=\\\"course\\\" [contextInstanceId]=\\\"courseId\\\"></core-format-text></p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"grade.contributiontocoursetotal\\\">\\n                <ion-label>\\n                    <h2>{{ 'core.grades.contributiontocoursetotal' | translate}}</h2>\\n                    <p [innerHTML]=\\\"grade.contributiontocoursetotal\\\"></p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-list>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { CoreScreen } from '@services/screen';\nimport { CoreSharedModule } from '@/core/shared.module';\n\nimport { CoreGradesCoursePage } from './pages/course/course.page';\nimport { CoreGradesCoursePageModule } from './pages/course/course.module';\nimport { CoreGradesCoursesPage } from './pages/courses/courses.page';\nimport { CoreGradesGradePage } from './pages/grade/grade.page';\nimport { CoreGradesMainMenuHandlerService } from './services/handlers/mainmenu';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        data: {\n            mainMenuTabRoot: CoreGradesMainMenuHandlerService.PAGE_NAME,\n        },\n        component: CoreGradesCoursesPage,\n    },\n    {\n        path: ':courseId',\n        component: CoreGradesCoursePage,\n    },\n    {\n        path: ':courseId/:gradeId',\n        component: CoreGradesGradePage,\n    },\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: '',\n        data: {\n            mainMenuTabRoot: CoreGradesMainMenuHandlerService.PAGE_NAME,\n        },\n        component: CoreGradesCoursesPage,\n        children: [\n            {\n                path: ':courseId',\n                component: CoreGradesCoursePage,\n            },\n        ],\n    },\n    {\n        path: ':courseId',\n        component: CoreGradesCoursePage,\n        children: [\n            {\n                path: ':gradeId',\n                component: CoreGradesGradePage,\n            },\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreGradesCoursePageModule,\n    ],\n    declarations: [\n        CoreGradesCoursesPage,\n        CoreGradesGradePage,\n    ],\n})\nexport class CoreGradesLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AfterViewInit, Component, OnDestroy, ViewChild } from '@angular/core';\nimport { CorePageItemsListManager } from '@classes/page-items-list-manager';\n\nimport { CoreSplitViewComponent } from '@components/split-view/split-view';\nimport { CoreGrades } from '@features/grades/services/grades';\nimport { CoreGradesGradeOverviewWithCourseData, CoreGradesHelper } from '@features/grades/services/grades-helper';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Page that displays courses grades (main menu option).\n */\n@Component({\n    selector: 'page-core-grades-courses',\n    templateUrl: 'courses.html',\n})\nexport class CoreGradesCoursesPage implements OnDestroy, AfterViewInit {\n\n    courses: CoreGradesCoursesManager = new CoreGradesCoursesManager(CoreGradesCoursesPage);\n\n    @ViewChild(CoreSplitViewComponent) splitView!: CoreSplitViewComponent;\n\n    /**\n     * @inheritdoc\n     */\n    async ngAfterViewInit(): Promise<void> {\n        await this.fetchInitialCourses();\n\n        this.courses.start(this.splitView);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.courses.destroy();\n    }\n\n    /**\n     * Refresh courses.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshCourses(refresher: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(CoreGrades.invalidateCoursesGradesData());\n        await CoreUtils.ignoreErrors(this.fetchCourses());\n\n        refresher?.complete();\n    }\n\n    /**\n     * Obtain the initial list of courses.\n     */\n    private async fetchInitialCourses(): Promise<void> {\n        try {\n            await this.fetchCourses();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading courses');\n\n            this.courses.setItems([]);\n        }\n    }\n\n    /**\n     * Update the list of courses.\n     */\n    private async fetchCourses(): Promise<void> {\n        const grades = await CoreGrades.getCoursesGrades();\n        const courses = await CoreGradesHelper.getGradesCourseData(grades);\n\n        this.courses.setItems(courses);\n    }\n\n}\n\n/**\n * Helper class to manage courses.\n */\nclass CoreGradesCoursesManager extends CorePageItemsListManager<CoreGradesGradeOverviewWithCourseData> {\n\n    /**\n     * @inheritdoc\n     */\n    protected getItemPath(courseGrade: CoreGradesGradeOverviewWithCourseData): string {\n        return courseGrade.courseid.toString();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected async logActivity(): Promise<void> {\n        await CoreGrades.logCoursesGradesView();\n    }\n\n}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreGrades } from '@features/grades/services/grades';\nimport { CoreGradesFormattedRow, CoreGradesHelper } from '@features/grades/services/grades-helper';\nimport { CoreSites } from '@services/sites';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Page that displays activity grade.\n */\n@Component({\n    selector: 'page-core-grades-grade',\n    templateUrl: 'grade.html',\n})\nexport class CoreGradesGradePage implements OnInit {\n\n    courseId: number;\n    userId: number;\n    gradeId: number;\n    grade?: CoreGradesFormattedRow | null;\n    gradeLoaded = false;\n\n    constructor() {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.gradeId = CoreNavigator.getRouteNumberParam('gradeId')!;\n        this.userId = CoreNavigator.getRouteNumberParam('userId') ?? CoreSites.getCurrentSiteUserId();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.fetchGrade();\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     */\n    async fetchGrade(): Promise<void> {\n        try {\n            this.grade = await CoreGradesHelper.getGradeItem(this.courseId, this.gradeId, this.userId);\n            this.gradeLoaded = true;\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error loading grade item');\n        }\n    }\n\n    /**\n     * Refresh data.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshGrade(refresher: IonRefresher): Promise<void> {\n        await CoreUtils.ignoreErrors(CoreGrades.invalidateCourseGradesData(this.courseId, this.userId));\n        await CoreUtils.ignoreErrors(this.fetchGrade());\n\n        refresher.complete();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}