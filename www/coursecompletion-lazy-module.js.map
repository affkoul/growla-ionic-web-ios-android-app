{"version":3,"sources":["./src/addons/coursecompletion/pages/report/report.html","./src/addons/coursecompletion/coursecompletion-lazy.module.ts","./src/addons/coursecompletion/pages/report/report.ts"],"names":[],"mappings":"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","file":"coursecompletion-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.coursecompletion.coursecompletion' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!completionLoaded\\\" (ionRefresh)=\\\"refreshCompletion($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"completionLoaded\\\">\\n        <ion-card *ngIf=\\\"completion && tracked\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.coursecompletion.status' | translate }}</h2>\\n                    <p>{{ statusText! | translate }}</p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.coursecompletion.required' | translate }}</h2>\\n                    <p *ngIf=\\\"completion.aggregation === 1\\\">{{ 'addon.coursecompletion.criteriarequiredall' | translate }}</p>\\n                    <p *ngIf=\\\"completion.aggregation === 2\\\">{{ 'addon.coursecompletion.criteriarequiredany' | translate }}</p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-card>\\n        <ion-card *ngIf=\\\"completion && tracked\\\">\\n            <ion-item-divider>\\n                <ion-label><h2>{{ 'addon.coursecompletion.requiredcriteria' | translate }}</h2></ion-label>\\n            </ion-item-divider>\\n            <ion-item class=\\\"ion-hide-md-up ion-text-wrap\\\" *ngFor=\\\"let criteria of completion.completions\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">\\n                        <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.criteria\\\" [filter]=\\\"false\\\"></core-format-text>\\n                    </p>\\n                    <p><core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.requirement\\\" [filter]=\\\"false\\\"></core-format-text></p>\\n                </ion-label>\\n                <strong slot=\\\"end\\\">{{ criteria.status }}</strong>\\n            </ion-item>\\n            <ion-item class=\\\"ion-hide-md-down ion-text-wrap\\\">\\n                <ion-label>\\n                    <ion-row>\\n                        <ion-col><strong>{{ 'addon.coursecompletion.criteriagroup' | translate }}</strong></ion-col>\\n                        <ion-col><strong>{{ 'addon.coursecompletion.criteria' | translate }}</strong></ion-col>\\n                        <ion-col><strong>{{ 'addon.coursecompletion.requirement' | translate }}</strong></ion-col>\\n                        <ion-col><strong>{{ 'addon.coursecompletion.status' | translate }}</strong></ion-col>\\n                        <ion-col><strong>{{ 'addon.coursecompletion.complete' | translate }}</strong></ion-col>\\n                        <ion-col><strong>{{ 'addon.coursecompletion.completiondate' | translate }}</strong></ion-col>\\n                    </ion-row>\\n                    <ion-row *ngFor=\\\"let criteria of completion.completions\\\">\\n                        <ion-col>\\n                            <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.title\\\" [filter]=\\\"false\\\"></core-format-text>\\n                        </ion-col>\\n                        <ion-col>\\n                            <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.criteria\\\" [filter]=\\\"false\\\"></core-format-text>\\n                        </ion-col>\\n                        <ion-col>\\n                            <core-format-text clean=\\\"true\\\" [text]=\\\"criteria.details.requirement\\\" [filter]=\\\"false\\\"></core-format-text>\\n                        </ion-col>\\n                        <ion-col>\\n                            <core-format-text [text]=\\\"criteria.details.status\\\" [filter]=\\\"false\\\"></core-format-text>\\n                        </ion-col>\\n                        <ion-col>{{ criteria.status }}</ion-col>\\n                        <ion-col *ngIf=\\\"criteria.timecompleted\\\">\\n                            {{ criteria.timecompleted * 1000 | coreFormatDate :'strftimedatetimeshort' }}\\n                        </ion-col>\\n                        <ion-col *ngIf=\\\"!criteria.timecompleted\\\"></ion-col>\\n                    </ion-row>\\n                </ion-label>\\n            </ion-item>\\n        </ion-card>\\n        <ion-card *ngIf=\\\"showSelfComplete && tracked\\\">\\n            <ion-item-divider>\\n                <ion-label><h2>{{ 'addon.coursecompletion.manualselfcompletion' | translate }}</h2></ion-label>\\n            </ion-item-divider>\\n            <ion-item>\\n                <ion-label>\\n                    <ion-button expand=\\\"block\\\" (click)=\\\"completeCourse()\\\">\\n                        {{ 'addon.coursecompletion.completecourse' | translate }}\\n                    </ion-button>\\n                </ion-label>\\n            </ion-item>\\n        </ion-card>\\n\\n        <ion-card class=\\\"core-warning-card\\\" *ngIf=\\\"!tracked\\\">\\n            <ion-item>\\n                <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                <ion-label>{{ 'addon.coursecompletion.nottracked' | translate }}</ion-label>\\n            </ion-item>\\n        </ion-card>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CoreCommentsComponentsModule } from '@features/comments/components/components.module';\nimport { CoreTagComponentsModule } from '@features/tag/components/components.module';\nimport { AddonCourseCompletionReportPage } from './pages/report/report';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonCourseCompletionReportPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreCommentsComponentsModule,\n        CoreTagComponentsModule,\n    ],\n    exports: [RouterModule],\n    declarations: [\n        AddonCourseCompletionReportPage,\n    ],\n})\nexport class AddonCourseCompletionLazyModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {\n    AddonCourseCompletion,\n    AddonCourseCompletionCourseCompletionStatus,\n} from '@addons/coursecompletion/services/coursecompletion';\nimport { Component, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\n\n/**\n * Page that displays the course completion report.\n */\n@Component({\n    selector: 'page-addon-course-completion-report',\n    templateUrl: 'report.html',\n})\nexport class AddonCourseCompletionReportPage implements OnInit {\n\n    protected courseId!: number;\n    protected userId!: number;\n\n    completionLoaded = false;\n    completion?: AddonCourseCompletionCourseCompletionStatus;\n    showSelfComplete = false;\n    tracked = true; // Whether completion is tracked.\n    statusText?: string;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.userId = CoreNavigator.getRouteNumberParam('userId') || CoreSites.getCurrentSiteUserId();\n\n        if (!this.userId) {\n            this.userId = CoreSites.getCurrentSiteUserId();\n        }\n\n        this.fetchCompletion().finally(() => {\n            this.completionLoaded = true;\n        });\n    }\n\n    /**\n     * Fetch compleiton data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchCompletion(): Promise<void> {\n        try {\n            this.completion = await AddonCourseCompletion.getCompletion(this.courseId, this.userId);\n\n            this.statusText = AddonCourseCompletion.getCompletedStatusText(this.completion);\n            this.showSelfComplete = AddonCourseCompletion.canMarkSelfCompleted(this.userId, this.completion);\n\n            this.tracked = true;\n        } catch (error) {\n            if (error && error.errorcode == 'notenroled') {\n                // Not enrolled error, probably a teacher.\n                this.tracked = false;\n            } else {\n                CoreDomUtils.showErrorModalDefault(error, 'addon.coursecompletion.couldnotloadreport', true);\n            }\n        }\n    }\n\n    /**\n     * Refresh completion data on PTR.\n     *\n     * @param refresher Refresher instance.\n     */\n    async refreshCompletion(refresher?: IonRefresher): Promise<void> {\n        await AddonCourseCompletion.invalidateCourseCompletion(this.courseId, this.userId).finally(() => {\n            this.fetchCompletion().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * Mark course as completed.\n     */\n    async completeCourse(): Promise<void> {\n        const modal = await CoreDomUtils.showModalLoading('core.sending', true);\n\n        try {\n            await AddonCourseCompletion.markCourseAsSelfCompleted(this.courseId);\n\n            await this.refreshCompletion();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n}\n"],"sourceRoot":"webpack:///"}