{"version":3,"sources":["./src/addons/messages/pages/contacts-35/contacts.html","./src/addons/messages/pages/contacts-35/contacts.module.ts","./src/addons/messages/pages/contacts-35/contacts.page.ts"],"names":[],"mappings":"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","file":"pages-contacts-35-contacts-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.messages.contacts' | translate }}</h1>\\n        <ion-buttons slot=\\\"end\\\">\\n            <!-- Add an empty context menu so discussion page can add items in split view,\\n                otherwise the menu disappears in some cases. -->\\n            <core-context-menu></core-context-menu>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-split-view>\\n        <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\n            <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n        </ion-refresher>\\n\\n        <core-search-box (onSubmit)=\\\"search($event)\\\" (onClear)=\\\"clearSearch()\\\"\\n            [placeholder]=\\\"'addon.messages.contactname' | translate\\\" autocorrect=\\\"off\\\" spellcheck=\\\"false\\\" lengthCheck=\\\"2\\\"\\n            [disabled]=\\\"!loaded\\\" searchArea=\\\"AddonMessagesContacts\\\"></core-search-box>\\n\\n        <core-loading [hideUntil]=\\\"loaded\\\" [message]=\\\"loadingMessage\\\">\\n            <core-empty-box *ngIf=\\\"!hasContacts && searchString == ''\\\" icon=\\\"fas-address-book\\\"\\n                [message]=\\\"'addon.messages.contactlistempty' | translate\\\"></core-empty-box>\\n\\n            <core-empty-box *ngIf=\\\"!hasContacts && searchString != ''\\\" icon=\\\"fas-address-book\\\"\\n                [message]=\\\"'addon.messages.nousersfound' | translate\\\"></core-empty-box>\\n\\n            <ion-list *ngFor=\\\"let contactType of contactTypes\\\" class=\\\"ion-no-margin\\\">\\n                <ng-container *ngIf=\\\"contacts[contactType] && (contacts[contactType].length > 0 || contactType === searchType)\\\">\\n                    <ion-item-divider>\\n                        <ion-label><p class=\\\"item-heading\\\">{{ 'addon.messages.type_' + contactType | translate }}</p></ion-label>\\n                        <ion-note slot=\\\"end\\\" class=\\\"ion-padding-end\\\"><ion-badge>{{ contacts[contactType].length }}</ion-badge></ion-note>\\n                    </ion-item-divider>\\n                    <ng-container *ngFor=\\\"let contact of contacts[contactType]\\\">\\n                        <!-- Don't show deleted users -->\\n                        <ion-item class=\\\"ion-text-wrap addon-messages-conversation-item\\\"\\n                            *ngIf=\\\"contact.profileimageurl || contact.profileimageurlsmall\\\"\\n                            [attr.aria-label]=\\\"contact.fullname\\\" (click)=\\\"gotoDiscussion(contact.id)\\\" detail=\\\"true\\\" button\\n                            [attr.aria-current]=\\\"contact.id == discussionUserId ? 'page' : 'false'\\\">\\n                            <core-user-avatar [user]=\\\"contact\\\" slot=\\\"start\\\" [checkOnline]=\\\"contact.showonlinestatus\\\"></core-user-avatar>\\n                            <ion-label><p class=\\\"item-heading\\\">{{ contact.fullname }}</p></ion-label>\\n                        </ion-item>\\n                    </ng-container>\\n                </ng-container>\\n            </ion-list>\\n        </core-loading>\\n    </core-split-view>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { conditionalRoutes } from '@/app/app-routing.module';\nimport { AddonMessagesDiscussionRoute } from '@addons/messages/messages-lazy.module';\nimport { CoreScreen } from '@services/screen';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreSearchComponentsModule } from '@features/search/components/components.module';\n\nimport { AddonMessagesContacts35Page } from './contacts.page';\n\nconst mobileRoutes: Routes = [\n    {\n        path: '',\n        component: AddonMessagesContacts35Page,\n    },\n    AddonMessagesDiscussionRoute,\n];\n\nconst tabletRoutes: Routes = [\n    {\n        path: '',\n        component: AddonMessagesContacts35Page,\n        children: [\n            AddonMessagesDiscussionRoute,\n        ],\n    },\n];\n\nconst routes: Routes = [\n    ...conditionalRoutes(mobileRoutes, () => CoreScreen.isMobile),\n    ...conditionalRoutes(tabletRoutes, () => CoreScreen.isTablet),\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreSearchComponentsModule,\n    ],\n    declarations: [\n        AddonMessagesContacts35Page,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonMessagesContacts35PageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreSites } from '@services/sites';\nimport {\n    AddonMessagesProvider,\n    AddonMessagesGetContactsWSResponse,\n    AddonMessagesSearchContactsContact,\n    AddonMessagesGetContactsContact,\n    AddonMessages,\n} from '../../services/messages';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreApp } from '@services/app';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\nimport { ActivatedRoute, Params } from '@angular/router';\nimport { Translate } from '@singletons';\nimport { CoreScreen } from '@services/screen';\nimport { CoreNavigator } from '@services/navigator';\n\n/**\n * Page that displays the list of contacts.\n */\n@Component({\n    selector: 'addon-messages-contacts',\n    templateUrl: 'contacts.html',\n    styleUrls: ['../../messages-common.scss'],\n})\nexport class AddonMessagesContacts35Page implements OnInit, OnDestroy {\n\n    protected searchingMessages: string;\n    protected loadingMessages: string;\n    protected siteId: string;\n    protected noSearchTypes = ['online', 'offline', 'blocked', 'strangers'];\n    protected memberInfoObserver: CoreEventObserver;\n\n    loaded = false;\n    discussionUserId?: number;\n    contactTypes = ['online', 'offline', 'blocked', 'strangers'];\n    searchType = 'search';\n    loadingMessage = '';\n    hasContacts = false;\n    contacts: AddonMessagesGetContactsFormatted = {\n        online: [],\n        offline: [],\n        strangers: [],\n        search: [],\n    };\n\n    searchString = '';\n\n    constructor(\n        protected route: ActivatedRoute,\n    ) {\n        this.siteId = CoreSites.getCurrentSiteId();\n        this.searchingMessages = Translate.instant('core.searching');\n        this.loadingMessages = Translate.instant('core.loading');\n        this.loadingMessage = this.loadingMessages;\n\n        // Refresh the list when a contact request is confirmed.\n        this.memberInfoObserver = CoreEvents.on(\n            AddonMessagesProvider.MEMBER_INFO_CHANGED_EVENT,\n            (data) => {\n                if (data.contactRequestConfirmed) {\n                    this.refreshData();\n                }\n            },\n            CoreSites.getCurrentSiteId(),\n        );\n    }\n\n    /**\n     * Component loaded.\n     */\n    async ngOnInit(): Promise<void> {\n        const discussionUserId = CoreNavigator.getRouteNumberParam('discussionUserId') ||\n            CoreNavigator.getRouteNumberParam('userId') || undefined;\n\n        if (this.loaded && this.discussionUserId == discussionUserId) {\n            return;\n        }\n\n        this.discussionUserId = discussionUserId;\n\n        if (this.discussionUserId) {\n            // There is a discussion to load, open the discussion in a new state.\n            this.gotoDiscussion(this.discussionUserId);\n        }\n\n        try {\n            await this.fetchData();\n            if (!this.discussionUserId && this.hasContacts && CoreScreen.isTablet) {\n                let contact: AddonMessagesGetContactsContact | undefined;\n                for (const x in this.contacts) {\n                    if (this.contacts[x].length > 0) {\n                        contact = this.contacts[x][0];\n                        break;\n                    }\n                }\n\n                if (contact) {\n                    // Take first and load it.\n                    this.gotoDiscussion(contact.id);\n                }\n            }\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     * @return Promise resolved when done.\n     */\n    async refreshData(refresher?: IonRefresher): Promise<void> {\n        try {\n            if (this.searchString) {\n                // User has searched, update the search.\n                await this.performSearch(this.searchString);\n            } else {\n                // Update contacts.\n                await AddonMessages.invalidateAllContactsCache();\n                await this.fetchData();\n            }\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Fetch contacts.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        this.loadingMessage = this.loadingMessages;\n\n        try {\n            const contacts = await AddonMessages.getAllContacts();\n            for (const x in contacts) {\n                if (contacts[x].length > 0) {\n                    this.contacts[x] = this.sortUsers(contacts[x]);\n                } else {\n                    this.contacts[x] = [];\n                }\n            }\n\n            this.clearSearch();\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Sort user list by fullname\n     *\n     * @param list List to sort.\n     * @return Sorted list.\n     */\n    protected sortUsers(list: AddonMessagesSearchContactsContact[]): AddonMessagesSearchContactsContact[] {\n        return list.sort((a, b) => {\n            const compareA = a.fullname.toLowerCase();\n            const compareB = b.fullname.toLowerCase();\n\n            return compareA.localeCompare(compareB);\n        });\n    }\n\n    /**\n     * Clear search and show all contacts again.\n     */\n    clearSearch(): void {\n        this.searchString = ''; // Reset searched string.\n        this.contactTypes = this.noSearchTypes;\n\n        this.hasContacts = false;\n        for (const x in this.contacts) {\n            if (this.contacts[x].length > 0) {\n                this.hasContacts = true;\n\n                return;\n            }\n        }\n    }\n\n    /**\n     * Search users from the UI.\n     *\n     * @param query Text to search for.\n     * @return Resolved when done.\n     */\n    search(query: string): Promise<void> {\n        CoreApp.closeKeyboard();\n\n        this.loaded = false;\n        this.loadingMessage = this.searchingMessages;\n\n        return this.performSearch(query).finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Perform the search of users.\n     *\n     * @param query Text to search for.\n     * @return Resolved when done.\n     */\n    protected async performSearch(query: string): Promise<void> {\n        try {\n            const result = await AddonMessages.searchContacts(query);\n            this.hasContacts = result.length > 0;\n            this.searchString = query;\n            this.contactTypes = ['search'];\n\n            this.contacts.search = this.sortUsers(result);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.messages.errorwhileretrievingcontacts', true);\n        }\n    }\n\n    /**\n     * Navigate to a particular discussion.\n     *\n     * @param discussionUserId Discussion Id to load.\n     */\n    gotoDiscussion(discussionUserId: number): void {\n        this.discussionUserId = discussionUserId;\n\n        const params: Params = {\n            userId: discussionUserId,\n        };\n\n        const splitViewLoaded = CoreNavigator.isCurrentPathInTablet('**/messages/contacts-35/discussion');\n        const path = (splitViewLoaded ? '../' : '') + 'discussion';\n\n        // @todo Check why this is failing on ngInit.\n        CoreNavigator.navigate(path, { params });\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.memberInfoObserver?.off();\n    }\n\n}\n\n/**\n * Contacts with some calculated data.\n */\nexport type AddonMessagesGetContactsFormatted = AddonMessagesGetContactsWSResponse & {\n    search?: AddonMessagesSearchContactsContact[]; // Calculated in the app. Result of searching users.\n};\n"],"sourceRoot":"webpack:///"}