{"version":3,"sources":["./src/addons/mod/lesson/pages/user-retake/user-retake.html","./src/addons/mod/lesson/pages/user-retake/user-retake.module.ts","./src/addons/mod/lesson/pages/user-retake/user-retake.page.ts","./src/addons/mod/lesson/pages/user-retake/user-retake.scss"],"names":[],"mappings":"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","file":"pages-user-retake-user-retake-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.mod_lesson.detailedstats' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <div *ngIf=\\\"student\\\">\\n            <!-- Student data. -->\\n            <ion-item class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"student.id\\\" [courseId]=\\\"courseId\\\" [attr.aria-label]=\\\"student.fullname\\\">\\n                <core-user-avatar [user]=\\\"student\\\" slot=\\\"start\\\" [userId]=\\\"student.id\\\" [courseId]=\\\"courseId\\\">\\n                </core-user-avatar>\\n                <ion-label>\\n                    <h2>{{student.fullname}}</h2>\\n                    <core-progress-bar [progress]=\\\"student.bestgrade\\\" a11yText=\\\"addon.mod_lesson.grade\\\"></core-progress-bar>\\n                </ion-label>\\n            </ion-item>\\n\\n            <!-- Retake selector if there is more than one retake. -->\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"student.attempts && student.attempts.length > 1\\\">\\n                <ion-label id=\\\"addon-mod_lesson-retakeslabel\\\">{{ 'addon.mod_lesson.attemptheader' | translate }}</ion-label>\\n                <ion-select [(ngModel)]=\\\"selectedRetake\\\" (ionChange)=\\\"changeRetake(selectedRetake!)\\\"\\n                    aria-labelledby=\\\"addon-mod_lesson-retakeslabel\\\" interface=\\\"action-sheet\\\"\\n                    [interfaceOptions]=\\\"{header: 'addon.mod_lesson.attemptheader' | translate}\\\">\\n                    <ion-select-option *ngFor=\\\"let retake of student.attempts\\\" [value]=\\\"retake.try\\\">\\n                        {{retake.label}}\\n                    </ion-select-option>\\n                </ion-select>\\n            </ion-item>\\n\\n            <!-- Retake stats. -->\\n            <ion-list *ngIf=\\\"retake && retake.userstats && retake.userstats.gradeinfo\\\" class=\\\"addon-mod_lesson-userstats\\\">\\n                <ion-item>\\n                    <ion-label class=\\\"ion-text-wrap\\\">\\n                        <ion-grid class=\\\"ion-no-padding\\\">\\n                            <ion-row>\\n                                <ion-col>\\n                                    <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.grade' | translate }}</h3>\\n                                    <p>{{ 'core.percentagenumber' | translate:{$a: retake.userstats.grade} }}</p>\\n                                </ion-col>\\n\\n                                <ion-col>\\n                                    <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.rawgrade' | translate }}</h3>\\n                                    <p>{{ retake.userstats.gradeinfo.earned }} / {{ retake.userstats.gradeinfo.total }}</p>\\n                                </ion-col>\\n                            </ion-row>\\n                        </ion-grid>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.timetaken' | translate }}</h3>\\n                        <p>{{ timeTakenReadable }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.completed' | translate }}</h3>\\n                        <p>{{ retake.userstats.completed * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-list>\\n\\n            <!-- Not completed, no stats. -->\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"retake && (!retake.userstats || !retake.userstats.gradeinfo)\\\">\\n                <ion-label>{{ 'addon.mod_lesson.notcompleted' | translate }}</ion-label>\\n            </ion-item>\\n\\n            <!-- Pages. -->\\n            <ng-container *ngIf=\\\"retake\\\">\\n                <!-- The \\\"text-dimmed\\\" class does nothing, but the same goes for the \\\"dimmed\\\" class in Moodle. -->\\n                <ion-card *ngFor=\\\"let page of retake.answerpages\\\" class=\\\"addon-mod_lesson-answerpage\\\"\\n                    [ngClass]=\\\"{'text-dimmed': page.grayout}\\\">\\n                    <ion-card-header class=\\\"ion-text-wrap\\\">\\n                        <ion-card-title>{{page.qtype}}: {{page.title}}</ion-card-title>\\n                    </ion-card-header>\\n                    <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                            <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.question' | translate }}</h3>\\n                            <p>\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\" [maxHeight]=\\\"50\\\"\\n                                    [text]=\\\"page.contents\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                    [courseId]=\\\"courseId\\\">\\n                                </core-format-text>\\n                            </p>\\n                        </ion-label>\\n                    </ion-item>\\n                    <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\">\\n                        <ion-label>\\n                            <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.answer' | translate }}</h3>\\n                        </ion-label>\\n                    </ion-item>\\n                    <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\"\\n                        *ngIf=\\\"!page.answerdata || !page.answerdata.answers || !page.answerdata.answers.length\\\">\\n                        <ion-label>\\n                            <p>{{ 'addon.mod_lesson.didnotanswerquestion' | translate }}</p>\\n                        </ion-label>\\n                    </ion-item>\\n                    <div *ngIf=\\\"page.answerdata && page.answerdata.answers && page.answerdata.answers.length\\\"\\n                        class=\\\"addon-mod_lesson-answer\\\">\\n                        <ng-container *ngFor=\\\"let answer of page.answerdata.answers\\\">\\n                            <ion-item lines=\\\"none\\\" *ngIf=\\\"page.isContent\\\">\\n                                <ion-label class=\\\"ion-text-wrap\\\">\\n                                    <ion-grid class=\\\"ion-no-padding\\\">\\n                                        <!-- Content page, display a button and the content. -->\\n                                        <ion-row>\\n                                            <ion-col>\\n                                                <ion-button expand=\\\"block\\\" class=\\\"ion-text-wrap\\\" color=\\\"light\\\" [disabled]=\\\"true\\\">\\n                                                    {{ answer[0].buttonText }}\\n                                                </ion-button>\\n                                            </ion-col>\\n                                            <ion-col>\\n                                                <p [innerHTML]=\\\"answer[0].content\\\"></p>\\n                                            </ion-col>\\n                                        </ion-row>\\n                                    </ion-grid>\\n                                </ion-label>\\n                            </ion-item>\\n\\n                            <ng-container *ngIf=\\\"page.isQuestion\\\">\\n                                <!-- Question page, show the right input for the answer. -->\\n\\n                                <!-- Truefalse or matching. -->\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"answer[0].isCheckbox\\\"\\n                                    [ngClass]=\\\"{'addon-mod_lesson-highlight': answer[0].highlight}\\\">\\n                                    <ion-label>\\n                                        <p>\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                [text]=\\\"answer[0].content\\\" contextLevel=\\\"module\\\"\\n                                                [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\n                                            </core-format-text>\\n                                        </p>\\n                                        <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                                [courseId]=\\\"courseId\\\">\\n                                            </core-format-text>\\n                                        </ion-badge>\\n                                    </ion-label>\\n                                    <ion-checkbox [attr.name]=\\\"answer[0].name\\\" [ngModel]=\\\"answer[0].checked\\\" [disabled]=\\\"true\\\"\\n                                        slot=\\\"end\\\">\\n                                    </ion-checkbox>\\n                                </ion-item>\\n\\n                                <!-- Short answer or numeric. -->\\n                                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"answer[0].isText\\\" lines=\\\"none\\\">\\n                                    <ion-label>\\n                                        <p>{{ answer[0].value }}</p>\\n                                        <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                                [courseId]=\\\"courseId\\\">\\n                                            </core-format-text>\\n                                        </ion-badge>\\n                                    </ion-label>\\n                                </ion-item>\\n\\n                                <!-- Matching. -->\\n                                <ion-item lines=\\\"none\\\" *ngIf=\\\"answer[0].isSelect\\\">\\n                                    <ion-label class=\\\"ion-text-wrap\\\">\\n                                        <ion-grid class=\\\"ion-no-padding\\\">\\n                                            <ion-row>\\n                                                <ion-col>\\n                                                    <p>\\n                                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                            [text]=\\\" answer[0].content\\\" contextLevel=\\\"module\\\"\\n                                                            [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\n                                                        </core-format-text>\\n                                                    </p>\\n                                                </ion-col>\\n                                                <ion-col>\\n                                                    <p>{{answer[0].value}}</p>\\n                                                    <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\n                                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                            [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\"\\n                                                            [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\n                                                        </core-format-text>\\n                                                    </ion-badge>\\n                                                </ion-col>\\n                                            </ion-row>\\n                                        </ion-grid>\\n                                    </ion-label>\\n                                </ion-item>\\n\\n                                <!-- Essay or couldn't determine. -->\\n                                <ion-item class=\\\"ion-text-wrap\\\" lines=\\\"none\\\"\\n                                    *ngIf=\\\"!answer[0].isCheckbox && !answer[0].isText && !answer[0].isSelect\\\">\\n                                    <ion-label>\\n                                        <p>\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                [text]=\\\"answer[0]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                                [courseId]=\\\"courseId\\\">\\n                                            </core-format-text>\\n                                        </p>\\n                                        <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\n                                            <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                                [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                                [courseId]=\\\"courseId\\\">\\n                                            </core-format-text>\\n                                        </ion-badge>\\n                                    </ion-label>\\n                                </ion-item>\\n                            </ng-container>\\n\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!page.isContent && !page.isQuestion\\\" lines=\\\"none\\\">\\n                                <!-- Another page (end of branch, ...). -->\\n                                <ion-label>\\n                                    <p>\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                            [text]=\\\"answer[0]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                            [courseId]=\\\"courseId\\\">\\n                                        </core-format-text>\\n                                    </p>\\n                                    <ion-badge *ngIf=\\\"answer[1]\\\" color=\\\"dark\\\">\\n                                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                            [text]=\\\"answer[1]\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"lesson?.coursemodule\\\"\\n                                            [courseId]=\\\"courseId\\\">\\n                                        </core-format-text>\\n                                    </ion-badge>\\n                                </ion-label>\\n                            </ion-item>\\n                        </ng-container>\\n\\n                        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"page.answerdata.response\\\" lines=\\\"none\\\">\\n                            <ion-label>\\n                                <h3 class=\\\"item-heading\\\">{{ 'addon.mod_lesson.response' | translate }}</h3>\\n                                <p>\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"lesson?.coursemodule\\\"\\n                                        [text]=\\\"page.answerdata.response\\\" contextLevel=\\\"module\\\"\\n                                        [contextInstanceId]=\\\"lesson?.coursemodule\\\" [courseId]=\\\"courseId\\\">\\n                                    </core-format-text>\\n                                </p>\\n                            </ion-label>\\n                        </ion-item>\\n                        <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"page.answerdata.score\\\">\\n                            <ion-label><p>{{page.answerdata.score}}</p></ion-label>\\n                        </ion-item>\\n                    </div>\\n                </ion-card>\\n            </ng-container>\\n        </div>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModLessonUserRetakePage } from './user-retake.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonModLessonUserRetakePage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonModLessonUserRetakePage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonModLessonUserRetakePageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreError } from '@classes/errors/error';\nimport { CoreUser } from '@features/user/services/user';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport {\n    AddonModLesson,\n    AddonModLessonAttemptsOverviewsAttemptWSData,\n    AddonModLessonAttemptsOverviewsStudentWSData,\n    AddonModLessonGetUserAttemptWSResponse,\n    AddonModLessonLessonWSData,\n    AddonModLessonProvider,\n    AddonModLessonUserAttemptAnswerData,\n    AddonModLessonUserAttemptAnswerPageWSData,\n} from '../../services/lesson';\nimport { AddonModLessonAnswerData, AddonModLessonHelper } from '../../services/lesson-helper';\nimport { CoreTimeUtils } from '@services/utils/time';\n\n/**\n * Page that displays a retake made by a certain user.\n */\n@Component({\n    selector: 'page-addon-mod-lesson-user-retake',\n    templateUrl: 'user-retake.html',\n    styleUrls: ['user-retake.scss'],\n})\nexport class AddonModLessonUserRetakePage implements OnInit {\n\n    component = AddonModLessonProvider.COMPONENT;\n    lesson?: AddonModLessonLessonWSData; // The lesson the retake belongs to.\n    courseId!: number; // Course ID the lesson belongs to.\n    selectedRetake?: number; // The retake to see.\n    student?: StudentData; // Data about the student and his retakes.\n    retake?: RetakeToDisplay; // Data about the retake.\n    loaded?: boolean; // Whether the data has been loaded.\n    timeTakenReadable?: string; // Time taken in a readable format.\n\n    protected cmId!: number; // The lesson ID the retake belongs to.\n    protected userId?: number; // User ID to see the retakes.\n    protected retakeNumber?: number; // Number of the initial retake to see.\n    protected previousSelectedRetake?: number; // To be able to detect the previous selected retake when it has changed.\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.userId = CoreNavigator.getRouteNumberParam('userId') || CoreSites.getCurrentSiteUserId();\n        this.retakeNumber = CoreNavigator.getRouteNumberParam('retake');\n\n        // Fetch the data.\n        this.fetchData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Change the retake displayed.\n     *\n     * @param retakeNumber The new retake number.\n     */\n    async changeRetake(retakeNumber: number): Promise<void> {\n        this.loaded = false;\n\n        try {\n            await this.setRetake(retakeNumber);\n        } catch (error) {\n            this.selectedRetake = this.previousSelectedRetake;\n            CoreDomUtils.showErrorModal(CoreUtils.addDataNotDownloadedError(error, 'Error getting attempt.'));\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Pull to refresh.\n     *\n     * @param refresher Refresher.\n     */\n    doRefresh(refresher: IonRefresher): void {\n        this.refreshData().finally(() => {\n            refresher?.complete();\n        });\n    }\n\n    /**\n     * Get lesson and retake data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.lesson = await AddonModLesson.getLesson(this.courseId, this.cmId);\n\n            // Get the retakes overview for all participants.\n            const data = await AddonModLesson.getRetakesOverview(this.lesson.id, {\n                cmId: this.cmId,\n            });\n\n            // Search the student.\n            const student: StudentData | undefined = data?.students?.find(student => student.id == this.userId);\n            if (!student) {\n                // Student not found.\n                throw new CoreError(Translate.instant('addon.mod_lesson.cannotfinduser'));\n            }\n\n            if (!student.attempts.length) {\n                // No retakes.\n                throw new CoreError(Translate.instant('addon.mod_lesson.cannotfindattempt'));\n            }\n\n            student.bestgrade = CoreTextUtils.roundToDecimals(student.bestgrade, 2);\n            student.attempts.forEach((retake) => {\n                if (!this.selectedRetake && this.retakeNumber == retake.try) {\n                    // The retake specified as parameter exists. Use it.\n                    this.selectedRetake = this.retakeNumber;\n                }\n\n                retake.label = AddonModLessonHelper.getRetakeLabel(retake);\n            });\n\n            if (!this.selectedRetake) {\n                // Retake number not specified or not valid, use the last retake.\n                this.selectedRetake = student.attempts[student.attempts.length - 1].try;\n            }\n\n            // Get the profile image of the user.\n            const user = await CoreUtils.ignoreErrors(CoreUser.getProfile(student.id, this.courseId, true));\n\n            this.student = student;\n            this.student.profileimageurl = user?.profileimageurl;\n\n            await this.setRetake(this.selectedRetake);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting data.', true);\n        }\n    }\n\n    /**\n     * Refreshes data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async refreshData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModLesson.invalidateLessonData(this.courseId));\n        if (this.lesson) {\n            promises.push(AddonModLesson.invalidateRetakesOverview(this.lesson.id));\n            promises.push(AddonModLesson.invalidateUserRetakesForUser(this.lesson.id, this.userId));\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all(promises));\n\n        await this.fetchData();\n    }\n\n    /**\n     * Set the retake to view and load its data.\n     *\n     * @param retakeNumber Retake number to set.\n     * @return Promise resolved when done.\n     */\n    protected async setRetake(retakeNumber: number): Promise<void> {\n        this.selectedRetake = retakeNumber;\n\n        const retakeData = await AddonModLesson.getUserRetake(this.lesson!.id, retakeNumber, {\n            cmId: this.cmId,\n            userId: this.userId,\n        });\n\n        this.retake = this.formatRetake(retakeData);\n        this.previousSelectedRetake = this.selectedRetake;\n    }\n\n    /**\n     * Format retake data, adding some calculated data.\n     *\n     * @param data Retake data.\n     * @return Formatted data.\n     */\n    protected formatRetake(retakeData: AddonModLessonGetUserAttemptWSResponse): RetakeToDisplay {\n        const formattedData = <RetakeToDisplay> retakeData;\n\n        if (formattedData.userstats.gradeinfo) {\n            // Completed.\n            formattedData.userstats.grade = CoreTextUtils.roundToDecimals(formattedData.userstats.grade, 2);\n            this.timeTakenReadable = CoreTimeUtils.formatTime(formattedData.userstats.timetotake);\n        }\n\n        // Format pages data.\n        formattedData.answerpages.forEach((page) => {\n            if (AddonModLesson.answerPageIsContent(page)) {\n                page.isContent = true;\n\n                if (page.answerdata?.answers) {\n                    page.answerdata.answers.forEach((answer) => {\n                        // Content pages only have 1 valid field in the answer array.\n                        answer[0] = AddonModLessonHelper.getContentPageAnswerDataFromHtml(answer[0]);\n                    });\n                }\n            } else if (AddonModLesson.answerPageIsQuestion(page)) {\n                page.isQuestion = true;\n\n                if (page.answerdata?.answers) {\n                    page.answerdata.answers.forEach((answer) => {\n                        // Only the first field of the answer array requires to be parsed.\n                        answer[0] = AddonModLessonHelper.getQuestionPageAnswerDataFromHtml(answer[0]);\n                    });\n                }\n            }\n        });\n\n        return formattedData;\n    }\n\n}\n\n/**\n * Student data with some calculated data.\n */\ntype StudentData = Omit<AddonModLessonAttemptsOverviewsStudentWSData, 'attempts'> & {\n    profileimageurl?: string;\n    attempts: AttemptWithLabel[];\n};\n\n/**\n * Student attempt with a calculated label.\n */\ntype AttemptWithLabel = AddonModLessonAttemptsOverviewsAttemptWSData & {\n    label?: string;\n};\n/**\n * Retake with calculated data.\n */\ntype RetakeToDisplay = Omit<AddonModLessonGetUserAttemptWSResponse, 'answerpages'> & {\n    answerpages: AnswerPage[];\n};\n\n/**\n * Answer page with calculated data.\n */\ntype AnswerPage = Omit<AddonModLessonUserAttemptAnswerPageWSData, 'answerdata'> & {\n    isContent?: boolean;\n    isQuestion?: boolean;\n    answerdata?: AnswerData;\n};\n\n/**\n * Answer data with calculated data.\n */\ntype AnswerData = Omit<AddonModLessonUserAttemptAnswerData, 'answers'> & {\n    answers?: (string[] | AddonModLessonAnswerData)[]; // User answers.\n};\n","export default \":host .button-disabled {\\n  opacity: 0.4;\\n}\\n:host .addon-mod_lesson-highlight {\\n  --background: var(--blue-light);\\n}\\n:host .addon-mod_lesson-highlight ion-label, :host .addon-mod_lesson-highlight ion-label p {\\n  color: var(--blue-dark);\\n}\\n:host .item-interactive-disabled ion-label {\\n  opacity: 0.5;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbW9kL2xlc3Nvbi9wYWdlcy91c2VyLXJldGFrZS91c2VyLXJldGFrZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksWUFBQTtBQUFSO0FBR0k7RUFDSSwrQkFBQTtBQURSO0FBR1E7RUFDSSx1QkFBQTtBQURaO0FBS0k7RUFDSSxZQUFBO0FBSFIiLCJmaWxlIjoic3JjL2FkZG9ucy9tb2QvbGVzc29uL3BhZ2VzL3VzZXItcmV0YWtlL3VzZXItcmV0YWtlLnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gICAgLmJ1dHRvbi1kaXNhYmxlZCB7XG4gICAgICAgIG9wYWNpdHk6IDAuNDtcbiAgICB9XG5cbiAgICAuYWRkb24tbW9kX2xlc3Nvbi1oaWdobGlnaHQge1xuICAgICAgICAtLWJhY2tncm91bmQ6IHZhcigtLWJsdWUtbGlnaHQpO1xuXG4gICAgICAgIGlvbi1sYWJlbCwgaW9uLWxhYmVsIHAge1xuICAgICAgICAgICAgY29sb3I6IHZhcigtLWJsdWUtZGFyayk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAuaXRlbS1pbnRlcmFjdGl2ZS1kaXNhYmxlZCBpb24tbGFiZWwge1xuICAgICAgICBvcGFjaXR5OiAwLjU7XG4gICAgfVxufVxuIl19 */\";"],"sourceRoot":"webpack:///"}