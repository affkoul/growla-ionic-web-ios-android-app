{"version":3,"sources":["./src/addons/messageoutput/airnotifier/pages/devices/devices.html","./src/addons/messageoutput/airnotifier/pages/devices/devices.module.ts","./src/addons/messageoutput/airnotifier/pages/devices/devices.ts"],"names":[],"mappings":"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","file":"pages-devices-devices-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.messageoutput_airnotifier.processorsettingsdesc' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!devicesLoaded\\\" (ionRefresh)=\\\"refreshDevices($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"devicesLoaded\\\">\\n        <ion-list>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let device of devices\\\" [class.item-current]=\\\"device.current\\\">\\n                <ion-label [class.core-bold]=\\\"device.current\\\">\\n                    <p class=\\\"item-heading\\\">\\n                        {{ device.name }} {{ device.model }}\\n                        <span *ngIf=\\\"device.current\\\">({{ 'core.currentdevice' | translate }})</span>\\n                    </p>\\n                    <p>{{ device.platform }} {{ device.version }}</p>\\n                </ion-label>\\n                <core-button-with-spinner [loading]=\\\"device.updating\\\" slot=\\\"end\\\">\\n                    <ion-toggle\\n                        [(ngModel)]=\\\"device.enable\\\"\\n                        (ngModelChange)=\\\"enableDevice(device, device.enable)\\\"\\n                    >\\n                    </ion-toggle>\\n                </core-button-with-spinner>\\n            </ion-item>\\n        </ion-list>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonMessageOutputAirnotifierDevicesPage } from './devices';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonMessageOutputAirnotifierDevicesPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonMessageOutputAirnotifierDevicesPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonMessageOutputAirnotifierDevicesPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\n\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CorePushNotifications } from '@features/pushnotifications/services/pushnotifications';\nimport { AddonMessageOutputAirnotifier, AddonMessageOutputAirnotifierDevice } from '../../services/airnotifier';\nimport { CoreUtils } from '@services/utils/utils';\n\n/**\n * Page that displays the list of devices.\n */\n@Component({\n    selector: 'page-addon-message-output-airnotifier-devices',\n    templateUrl: 'devices.html',\n})\nexport class AddonMessageOutputAirnotifierDevicesPage implements OnInit, OnDestroy {\n\n    devices?: AddonMessageOutputAirnotifierDeviceFormatted[] = [];\n    devicesLoaded = false;\n\n    protected updateTimeout?: number;\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        this.fetchDevices();\n    }\n\n    /**\n     * Fetches the list of devices.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchDevices(): Promise<void> {\n        try {\n            const devices = await AddonMessageOutputAirnotifier.getUserDevices();\n\n            this.devices = this.formatDevices(devices);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n        } finally {\n            this.devicesLoaded = true;\n        }\n    }\n\n    /**\n     * Add some calculated data for devices.\n     *\n     * @param devices Devices to format.\n     * @return Formatted devices.\n     */\n    protected formatDevices(devices: AddonMessageOutputAirnotifierDevice[]): AddonMessageOutputAirnotifierDeviceFormatted[] {\n        const formattedDevices: AddonMessageOutputAirnotifierDeviceFormatted[] = devices;\n        const pushId = CorePushNotifications.getPushId();\n\n        // Convert enabled to boolean and search current device.\n        formattedDevices.forEach((device) => {\n            device.enable = !!device.enable;\n            device.current = !!(pushId && pushId == device.pushid);\n        });\n\n        return formattedDevices.sort((a, b) => {\n            const compareA = a.name.toLowerCase();\n            const compareB = b.name.toLowerCase();\n\n            return compareA.localeCompare(compareB);\n        });\n    }\n\n    /**\n     * Update list of devices after a certain time. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected updateDevicesAfterDelay(): void {\n        // Cancel pending updates.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n        }\n\n        this.updateTimeout = window.setTimeout(() => {\n            this.updateTimeout = undefined;\n            this.updateDevices();\n        }, 5000);\n    }\n\n    /**\n     * Fetch devices. The purpose is to store the updated data, it won't be reflected in the view.\n     */\n    protected async updateDevices(): Promise<void> {\n        await CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\n\n        await AddonMessageOutputAirnotifier.getUserDevices();\n    }\n\n    /**\n     * Refresh the list of devices.\n     *\n     * @param refresher Refresher.\n     */\n    async refreshDevices(refresher: IonRefresher): Promise<void> {\n        try {\n            await CoreUtils.ignoreErrors(AddonMessageOutputAirnotifier.invalidateUserDevices());\n\n            await this.fetchDevices();\n        } finally {\n            refresher?.complete();\n        }\n    }\n\n    /**\n     * Enable or disable a certain device.\n     *\n     * @param device The device object.\n     * @param enable True to enable the device, false to disable it.\n     */\n    async enableDevice(device: AddonMessageOutputAirnotifierDeviceFormatted, enable: boolean): Promise<void> {\n        device.updating = true;\n\n        try {\n            await AddonMessageOutputAirnotifier.enableDevice(device.id, enable);\n\n            // Update the list of devices since it was modified.\n            this.updateDevicesAfterDelay();\n        } catch (error) {\n            // Show error and revert change.\n            CoreDomUtils.showErrorModal(error);\n            device.enable = !device.enable;\n        } finally {\n            device.updating = false;\n        }\n    }\n\n    /**\n     * Page destroyed.\n     */\n    ngOnDestroy(): void {\n        // If there is a pending action to update devices, execute it right now.\n        if (this.updateTimeout) {\n            clearTimeout(this.updateTimeout);\n            this.updateDevices();\n        }\n    }\n\n}\n\n/**\n * User device with some calculated data.\n */\ntype AddonMessageOutputAirnotifierDeviceFormatted = AddonMessageOutputAirnotifierDevice & {\n    current?: boolean; // Calculated in the app. Whether it's the current device.\n    updating?: boolean; // Calculated in the app. Whether the device enable is being updated right now.\n};\n"],"sourceRoot":"webpack:///"}