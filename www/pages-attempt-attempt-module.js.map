{"version":3,"sources":["./src/addons/mod/feedback/pages/attempt/attempt.html","./src/addons/mod/quiz/pages/attempt/attempt.html","./src/addons/mod/feedback/pages/attempt/attempt.module.ts","./src/addons/mod/feedback/pages/attempt/attempt.ts","./src/addons/mod/quiz/pages/attempt/attempt.module.ts","./src/addons/mod/quiz/pages/attempt/attempt.page.ts"],"names":[],"mappings":"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","file":"pages-attempt-attempt-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <ng-container *ngIf=\\\"attempt\\\">{{ attempt.fullname }}</ng-container>\\n            <ng-container *ngIf=\\\"anonAttempt\\\">\\n                {{ 'addon.mod_feedback.response_nr' |translate }}: {{anonAttempt.number}}\\n            </ng-container>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <ion-list class=\\\"ion-no-margin\\\" *ngIf=\\\"attempt || anonAttempt\\\">\\n            <ion-item *ngIf=\\\"attempt\\\" class=\\\"ion-text-wrap\\\" core-user-link [userId]=\\\"attempt.userid\\\"\\n                [attr.aria-label]=\\\" 'core.user.viewprofile' | translate\\\" [courseId]=\\\"attempt.courseid\\\">\\n                <core-user-avatar [user]=\\\"attempt\\\" slot=\\\"start\\\"></core-user-avatar>\\n                <ion-label>\\n                    <h2>{{attempt.fullname}}</h2>\\n                    <p *ngIf=\\\"attempt.timemodified\\\">{{attempt.timemodified * 1000 | coreFormatDate }}</p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"anonAttempt\\\">\\n                <ion-label>\\n                    <h2>\\n                        {{ 'addon.mod_feedback.response_nr' |translate }}: {{anonAttempt.number}}\\n                        ({{ 'addon.mod_feedback.anonymous' |translate }})\\n                    </h2>\\n                </ion-label>\\n            </ion-item >\\n            <ng-container *ngIf=\\\"items && items.length\\\">\\n                <ng-container *ngFor=\\\"let item of items\\\">\\n                    <core-spacer *ngIf=\\\"item.typ == 'pagebreak'\\\"></core-spacer>\\n                    <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"item.typ != 'pagebreak'\\\" [color]=\\\"item.dependitem > 0 ? 'light' : ''\\\">\\n                        <ion-label>\\n                            <h2 *ngIf=\\\"item.name\\\" [core-mark-required]=\\\"item.required\\\">\\n                                <span *ngIf=\\\"feedback!.autonumbering && item.itemnumber\\\">{{item.itemnumber}}. </span>\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.name\\\"\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\n                                </core-format-text>\\n                            </h2>\\n                            <p *ngIf=\\\"item.submittedValue\\\">\\n                                <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.submittedValue\\\"\\n                                    contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\n                                </core-format-text>\\n                            </p>\\n                        </ion-label>\\n                    </ion-item>\\n                </ng-container>\\n            </ng-container>\\n        </ion-list>\\n    </core-loading>\\n</ion-content>\\n\";","export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text *ngIf=\\\"quiz\\\" [text]=\\\"quiz.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"quiz.coursemodule\\\"\\n                [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"doRefresh($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <ion-list *ngIf=\\\"attempt\\\" lines=\\\"none\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.mod_quiz.attemptnumber' | translate }}</h2>\\n                    <p *ngIf=\\\"attempt.preview\\\">{{ 'addon.mod_quiz.preview' | translate }}</p>\\n                    <p *ngIf=\\\"!attempt.preview\\\">{{ attempt.attempt }}</p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.mod_quiz.attemptstate' | translate }}</h2>\\n                    <p *ngFor=\\\"let sentence of attempt.readableState\\\">{{ sentence }}</p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showMarkColumn && attempt.readableMark !== ''\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.mod_quiz.marks' | translate }} / {{ quiz!.sumGradesFormatted }}</h2>\\n                    <p>{{ attempt.readableMark }}</p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showGradeColumn && attempt.readableGrade !== ''\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.mod_quiz.grade' | translate }} / {{ quiz!.gradeFormatted }}</h2>\\n                    <p>{{ attempt.readableGrade }}</p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"quiz!.showFeedbackColumn && feedback\\\">\\n                <ion-label>\\n                    <h2>{{ 'addon.mod_quiz.feedback' | translate }}</h2>\\n                    <p>\\n                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"componentId\\\" [text]=\\\"feedback\\\"\\n                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\n                        </core-format-text>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-button *ngIf=\\\"showReviewColumn && attempt.finished\\\" class=\\\"ion-margin\\\" expand=\\\"block\\\" (click)=\\\"reviewAttempt()\\\">\\n                <ion-icon name=\\\"fas-search\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                {{ 'addon.mod_quiz.review' | translate }}\\n            </ion-button>\\n            <ion-item class=\\\"ion-text-wrap core-danger-item\\\" *ngIf=\\\"!showReviewColumn\\\">\\n                <ion-label>\\n                    <p>{{ 'addon.mod_quiz.noreviewattempt' | translate }}</p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-list>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AddonModFeedbackAttemptPage } from './attempt';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonModFeedbackAttemptPage,\n    },\n];\n\n@NgModule({\n    declarations: [\n        AddonModFeedbackAttemptPage,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonModFeedbackAttemptPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackProvider,\n    AddonModFeedbackWSAnonAttempt,\n    AddonModFeedbackWSAttempt,\n    AddonModFeedbackWSFeedback,\n} from '../../services/feedback';\nimport { AddonModFeedbackFormItem, AddonModFeedbackHelper } from '../../services/feedback-helper';\n\n/**\n * Page that displays a feedback attempt review.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-attempt',\n    templateUrl: 'attempt.html',\n})\nexport class AddonModFeedbackAttemptPage implements OnInit {\n\n    protected attemptId!: number;\n\n    cmId!: number;\n    courseId!: number;\n    feedback?: AddonModFeedbackWSFeedback;\n    attempt?: AddonModFeedbackWSAttempt;\n    anonAttempt?: AddonModFeedbackWSAnonAttempt;\n    items: AddonModFeedbackAttemptItem[] = [];\n    component = AddonModFeedbackProvider.COMPONENT;\n    loaded = false;\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.attemptId = CoreNavigator.getRouteNumberParam('attemptId')!;\n\n        this.fetchData();\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            const attempt = await AddonModFeedback.getAttempt(this.feedback.id, this.attemptId, { cmId: this.cmId });\n\n            if (this.isAnonAttempt(attempt)) {\n                this.anonAttempt = attempt;\n                delete this.attempt;\n            } else {\n                this.attempt = attempt;\n                delete this.anonAttempt;\n            }\n\n            const items = await AddonModFeedback.getItems(this.feedback.id, { cmId: this.cmId });\n\n            // Add responses and format items.\n            this.items = <AddonModFeedbackAttemptItem[]> items.items.map((item) => {\n                const formItem = AddonModFeedbackHelper.getItemForm(item, true);\n                if (!formItem) {\n                    return;\n                }\n\n                const attemptItem = <AddonModFeedbackAttemptItem> formItem;\n\n                if (item.typ == 'label') {\n                    attemptItem.submittedValue = CoreTextUtils.replacePluginfileUrls(item.presentation, item.itemfiles);\n                } else {\n                    for (const x in attempt.responses) {\n                        if (attempt.responses[x].id == item.id) {\n                            attemptItem.submittedValue = attempt.responses[x].printval;\n                            break;\n                        }\n                    }\n                }\n\n                return attemptItem;\n            }).filter((itemData) => itemData); // Filter items with errors.\n\n        } catch (message) {\n            // Some call failed on fetch, go back.\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n            CoreNavigator.back();\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Check if an attempt is anonymous or not.\n     *\n     * @param attempt Attempt to check.\n     */\n    isAnonAttempt(attempt: AddonModFeedbackWSAttempt | AddonModFeedbackWSAnonAttempt): attempt is AddonModFeedbackWSAnonAttempt {\n        return !('fullname' in attempt);\n    }\n\n}\n\ntype AddonModFeedbackAttemptItem = AddonModFeedbackFormItem & {\n    submittedValue?: string;\n};\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonModQuizAttemptPage } from './attempt.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonModQuizAttemptPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonModQuizAttemptPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonModQuizAttemptPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { CoreError } from '@classes/errors/error';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport {\n    AddonModQuiz,\n    AddonModQuizAttemptWSData,\n    AddonModQuizGetQuizAccessInformationWSResponse,\n    AddonModQuizProvider,\n} from '../../services/quiz';\nimport { AddonModQuizAttempt, AddonModQuizHelper, AddonModQuizQuizData } from '../../services/quiz-helper';\n\n/**\n * Page that displays some summary data about an attempt.\n */\n@Component({\n    selector: 'page-addon-mod-quiz-attempt',\n    templateUrl: 'attempt.html',\n})\nexport class AddonModQuizAttemptPage implements OnInit {\n\n    courseId!: number; // The course ID the quiz belongs to.\n    quiz?: AddonModQuizQuizData; // The quiz the attempt belongs to.\n    attempt?: AddonModQuizAttempt; // The attempt to view.\n    component = AddonModQuizProvider.COMPONENT; // Component to link the files to.\n    componentId?: number; // Component ID to use in conjunction with the component.\n    loaded = false; // Whether data has been loaded.\n    feedback?: string; // Attempt feedback.\n    showReviewColumn = false;\n    cmId!: number; // Course module id the attempt belongs to.\n\n    protected attemptId!: number; // Attempt to view.\n\n    /**\n     * Component being initialized.\n     */\n    ngOnInit(): void {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.attemptId = CoreNavigator.getRouteNumberParam('attemptId')!;\n\n        this.fetchQuizData().finally(() => {\n            this.loaded = true;\n        });\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @param refresher Refresher.\n     */\n    doRefresh(refresher: IonRefresher): void {\n        this.refreshData().finally(() => {\n            refresher.complete();\n        });\n    }\n\n    /**\n     * Get quiz data and attempt data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchQuizData(): Promise<void> {\n        try {\n            this.quiz = await AddonModQuiz.getQuiz(this.courseId, this.cmId);\n\n            this.componentId = this.quiz.coursemodule;\n\n            // Load attempt data.\n            const [options, accessInfo, attempt] = await Promise.all([\n                AddonModQuiz.getCombinedReviewOptions(this.quiz.id, { cmId: this.quiz.coursemodule }),\n                this.fetchAccessInfo(),\n                this.fetchAttempt(),\n            ]);\n\n            // Set calculated data.\n            this.showReviewColumn = accessInfo.canreviewmyattempts;\n            AddonModQuizHelper.setQuizCalculatedData(this.quiz, options);\n\n            this.attempt = await AddonModQuizHelper.setAttemptCalculatedData(this.quiz!, attempt, false, undefined, true);\n\n            // Check if the feedback should be displayed.\n            const grade = Number(this.attempt!.rescaledGrade);\n\n            if (this.quiz.showFeedbackColumn && AddonModQuiz.isAttemptFinished(this.attempt!.state) &&\n                    options.someoptions.overallfeedback && !isNaN(grade)) {\n\n                // Feedback should be displayed, get the feedback for the grade.\n                const response = await AddonModQuiz.getFeedbackForGrade(this.quiz.id, grade, {\n                    cmId: this.quiz.coursemodule,\n                });\n\n                this.feedback = response.feedbacktext;\n            } else {\n                delete this.feedback;\n            }\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetattempt', true);\n        }\n    }\n\n    /**\n     * Get the attempt.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchAttempt(): Promise<AddonModQuizAttemptWSData> {\n        // Get all the attempts and search the one we want.\n        const attempts = await AddonModQuiz.getUserAttempts(this.quiz!.id, { cmId: this.cmId });\n\n        const attempt = attempts.find(attempt => attempt.id == this.attemptId);\n\n        if (!attempt) {\n            // Attempt not found, error.\n            this.attempt = undefined;\n\n            throw new CoreError(Translate.instant('addon.mod_quiz.errorgetattempt'));\n        }\n\n        return attempt;\n    }\n\n    /**\n     * Get the access info.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchAccessInfo(): Promise<AddonModQuizGetQuizAccessInformationWSResponse> {\n        const accessInfo = await AddonModQuiz.getQuizAccessInformation(this.quiz!.id, { cmId: this.cmId });\n\n        if (!accessInfo.canreviewmyattempts) {\n            return accessInfo;\n        }\n\n        // Check if the user can review the attempt.\n        await CoreUtils.ignoreErrors(AddonModQuiz.invalidateAttemptReviewForPage(this.attemptId, -1));\n\n        try {\n            await AddonModQuiz.getAttemptReview(this.attemptId, { page: -1, cmId: this.quiz!.coursemodule });\n        } catch {\n            // Error getting the review, assume the user cannot review the attempt.\n            accessInfo.canreviewmyattempts = false;\n        }\n\n        return accessInfo;\n    }\n\n    /**\n     * Refresh the data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async refreshData(): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModQuiz.invalidateQuizData(this.courseId));\n        promises.push(AddonModQuiz.invalidateAttemptReview(this.attemptId));\n\n        if (this.quiz) {\n            promises.push(AddonModQuiz.invalidateUserAttemptsForUser(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateQuizAccessInformation(this.quiz.id));\n            promises.push(AddonModQuiz.invalidateCombinedReviewOptionsForUser(this.quiz.id));\n\n            if (this.attempt && typeof this.feedback != 'undefined') {\n                promises.push(AddonModQuiz.invalidateFeedback(this.quiz.id));\n            }\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all(promises));\n\n        await this.fetchQuizData();\n    }\n\n    /**\n     * Go to the page to review the attempt.\n     *\n     * @return Promise resolved when done.\n     */\n    async reviewAttempt(): Promise<void> {\n        CoreNavigator.navigate(`../../review/${this.attempt!.id}`);\n    }\n\n}\n"],"sourceRoot":"webpack:///"}