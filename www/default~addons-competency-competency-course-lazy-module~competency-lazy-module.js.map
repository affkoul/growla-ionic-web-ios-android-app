{"version":3,"sources":["./src/addons/competency/pages/coursecompetencies/coursecompetencies.html","./src/addons/competency/pages/coursecompetencies/coursecompetencies.module.ts","./src/addons/competency/pages/coursecompetencies/coursecompetencies.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,iQAAkM,qDAAqD,yOAAyO,oCAAoC,iaAAia,8EAA8E,yMAAyM,iFAAiF,oQAAoQ,UAAU,wCAAwC,wEAAwE,kCAAkC,iGAAiG,EAAE,GAAG,iNAAiN,UAAU,+WAA+W,6EAA6E,2NAA2N,kBAAkB,KAAK,iBAAiB,+QAA+Q,qDAAqD,2NAA2N,iBAAiB,4MAA4M,yDAAyD,qdAAqd,iCAAiC,OAAO,gCAAgC,8UAA8U,6CAA6C,4jBAA4jB,uCAAuC,ufAAuf,sCAAsC,uKAAuK,sCAAsC,yFAAyF,OAAO,qVAAqV,iBAAiB,8IAA8I,iBAAiB,kGAAkG,OAAO,yRAAyR,uDAAuD,sLAAsL,oBAAoB,6KAA6K,6CAA6C,wHAAwH,+CAA+C,8hCAA8hC,4CAA4C,gHAAgH,4DAA4D,4uBAA4uB,E;;;;;;;;;;;;ACAjyS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEQ;AAEe;AAC0B;IAUrE,2CAA2C,SAA3C,2CAA2C;CAAG;AAA9C,2CAA2C;IARvD,8DAAQ,CAAC;QACN,OAAO,EAAE;YACL,oEAAgB;SACnB;QACD,YAAY,EAAE;YACV,8FAAqC;SACxC;KACJ,CAAC;GACW,2CAA2C,CAAG;AAAH;;;;;;;;;;;;;AC3BxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAqC;AACrC,EAAE;AACF,kEAAkE;AAClE,mEAAmE;AACnE,0CAA0C;AAC1C,EAAE;AACF,iDAAiD;AACjD,EAAE;AACF,sEAAsE;AACtE,oEAAoE;AACpE,2EAA2E;AAC3E,sEAAsE;AACtE,iCAAiC;;AAEiB;AAC+E;AAC3C;AAGlC;AACD;AACmD;AAGtG;;GAEG;IAKU,qCAAqC,SAArC,qCAAqC;;QAE9C,uBAAkB,GAAG,KAAK,CAAC;IA2E/B,CAAC;IApEG;;OAEG;IACH,QAAQ;QACJ,IAAI,CAAC,QAAQ,GAAG,iEAAa,CAAC,mBAAmB,CAAC,UAAU,CAAE,CAAC;QAC/D,IAAI,CAAC,MAAM,GAAG,iEAAa,CAAC,mBAAmB,CAAC,QAAQ,CAAE,CAAC;QAE3D,IAAI,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE;YACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACa,uBAAuB;;YACnC,IAAI;gBACA,IAAI,CAAC,YAAY,GAAG,MAAM,sFAAe,CAAC,qBAAqB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAE5F,8BAA8B;gBAC9B,IAAI,CAAC,IAAI,GAAG,MAAM,mGAAqB,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACnE;YAAC,OAAO,KAAK,EAAE;gBACZ,gEAAY,CAAC,qBAAqB,CAAC,KAAK,EAAE,yCAAyC,CAAC,CAAC;aACxF;QACL,CAAC;KAAA;IAED;;;;OAIG;IACH,cAAc,CAAC,YAAoB;QAC/B,iEAAa,CAAC,kBAAkB,CAC5B,GAAG,GAAG,mHAAqC,CAAC,SAAS,GAAG,gBAAgB,GAAG,YAAY,EACvF;YACI,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;SAC3D,CACJ,CAAC;IACN,CAAC;IAED;;;;OAIG;IACH,qBAAqB,CAAC,YAAoB;QACtC,iEAAa,CAAC,kBAAkB,CAAC,GAAG,GAAG,mHAAqC,CAAC,SAAS,GAAG,WAAW,GAAG,YAAY,EAAE;YACjH,MAAM,EAAE;gBACJ,YAAY,uBAAqB;gBACjC,iBAAiB,EAAE,IAAI,CAAC,QAAQ;aACnC;SAAE,CAAC,CAAC;IACb,CAAC;IAED;;;;OAIG;IACH,yBAAyB,CAAC,SAAwB;QAC9C,sFAAe,CAAC,4BAA4B,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;YAClF,IAAI,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE;gBACxC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,GAAG;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CAEJ;AA7EY,qCAAqC;IAJjD,+DAAS,CAAC;QACP,QAAQ,EAAE,0CAA0C;QACpD,kQAAsC;KACzC,CAAC;GACW,qCAAqC,CA6EjD;AA7EiD","file":"default~addons-competency-competency-course-lazy-module~competency-lazy-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.competency.coursecompetencies' | translate }}</h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!competenciesLoaded\\\" (ionRefresh)=\\\"refreshCourseCompetencies($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"competenciesLoaded\\\">\\n        <ion-card *ngIf=\\\"!user && competencies && competencies.statistics.competencycount > 0\\\">\\n            <ng-container *ngIf=\\\"competencies.cangradecompetencies\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competencies.settings.pushratingstouserplans\\\">\\n                    <ion-label>{{ 'addon.competency.coursecompetencyratingsarepushedtouserplans' | translate }}</ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"!competencies.settings.pushratingstouserplans\\\" color=\\\"danger\\\">\\n                    <ion-label>{{ 'addon.competency.coursecompetencyratingsarenotpushedtouserplans' | translate }}</ion-label>\\n                </ion-item>\\n            </ng-container>\\n            <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"competencies.statistics.canbegradedincourse\\\">\\n                <ion-label>\\n                    <span id=\\\"addon-competency-course-{{courseId}}-progress\\\">\\n                        {{ 'addon.competency.xcompetenciesproficientoutofyincourse' | translate: {$a:\\n                            {x: competencies.statistics.proficientcompetencycount, y: competencies.statistics.competencycount} } }}\\n                    </span>\\n                    <core-progress-bar [progress]=\\\"competencies.statistics.proficientcompetencypercentage\\\"\\n                        ariaDescribedBy=\\\"addon-competency-course-{{courseId}}-progress\\\">\\n                    </core-progress-bar>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap\\\"\\n                *ngIf=\\\"competencies.statistics.canmanagecoursecompetencies && competencies.statistics.leastproficientcount > 0\\\">\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">{{ 'addon.competency.competenciesmostoftennotproficientincourse' | translate }}</p>\\n                    <p *ngFor=\\\"let comp of competencies.statistics.leastproficient\\\">\\n                        <button class=\\\"as-link\\\" (click)=\\\"openCompetencySummary(comp.id)\\\">\\n                            {{ comp.shortname }} - {{ comp.idnumber }}\\n                        </button>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-card>\\n\\n        <h2 class=\\\"ion-margin-horizontal\\\" *ngIf=\\\"competencies && competencies.statistics.competencycount > 0\\\">\\n            {{ 'addon.competency.coursecompetencies' | translate }}\\n        </h2>\\n        <ion-card *ngIf=\\\"user\\\">\\n             <ion-item class=\\\"ion-text-wrap\\\">\\n                <core-user-avatar [user]=\\\"user\\\" slot=\\\"start\\\"></core-user-avatar>\\n               <ion-label><h2>{{ user.fullname }}</h2></ion-label>\\n            </ion-item>\\n        </ion-card>\\n        <core-empty-box *ngIf=\\\"competencies && competencies.statistics.competencycount == 0\\\"\\n            icon=\\\"fas-award\\\" message=\\\"{{ 'addon.competency.nocompetenciesincourse' | translate }}\\\">\\n        </core-empty-box>\\n\\n        <div *ngIf=\\\"competencies\\\">\\n            <ion-card *ngFor=\\\"let competency of competencies.competencies\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\" (click)=\\\"openCompetency(competency.competency.id)\\\"\\n                    [attr.aria-label]=\\\"competency.competency.shortname\\\" detail=\\\"true\\\" button>\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">\\n                            {{competency.competency.shortname}} <em>{{competency.competency.idnumber}}</em>\\n                        </p>\\n                    </ion-label>\\n                    <ion-badge slot=\\\"end\\\" *ngIf=\\\"competency.usercompetencycourse && competency.usercompetencycourse.gradename\\\"\\n                        [color]=\\\"competency.usercompetencycourse.proficiency ? 'success' : 'danger'\\\">\\n                        {{ competency.usercompetencycourse.gradename }}\\n                    </ion-badge>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <p *ngIf=\\\"competency.competency.description\\\">\\n                            <core-format-text [text]=\\\"competency.competency.description\\\" contextLevel=\\\"course\\\"\\n                                [contextInstanceId]=\\\"courseId\\\">\\n                            </core-format-text>\\n                        </p>\\n                        <div>\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.path' | translate }}</p>\\n                            <p>\\n                                <a *ngIf=\\\"competency.comppath.showlinks\\\"\\n                                    [href]=\\\"competency.comppath.pluginbaseurl + '/competencies.php?competencyframeworkid=' +\\n                                    competency.comppath.framework.id + '&pagecontextid=' + competency.comppath.pagecontextid\\\"\\n                                    core-link [title]=\\\"competency.comppath.framework.name\\\">\\n                                    {{ competency.comppath.framework.name }}\\n                                </a>\\n                                <ng-container *ngIf=\\\"!competency.comppath.showlinks\\\">\\n                                    {{ competency.comppath.framework.name }}\\n                                </ng-container>\\n                                &nbsp;/&nbsp;\\n                                <ng-container *ngFor=\\\"let ancestor of competency.comppath.ancestors\\\">\\n                                    <button class=\\\"as-link\\\" *ngIf=\\\"competency.comppath.showlinks\\\"\\n                                        (click)=\\\"openCompetencySummary(ancestor.id)\\\">\\n                                        {{ ancestor.name }}\\n                                    </button>\\n                                    <ng-container *ngIf=\\\"!competency.comppath.showlinks\\\">{{ ancestor.name }}</ng-container>\\n                                    <ng-container *ngIf=\\\"!ancestor.last\\\">&nbsp;/&nbsp;</ng-container>\\n                                </ng-container>\\n                            </p>\\n                        </div>\\n                        <div *ngIf=\\\"competencies.statistics.canmanagecoursecompetencies\\\">\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.uponcoursecompletion' | translate }}</p>\\n                             <ng-container *ngFor=\\\"let ruleoutcome of competency.ruleoutcomeoptions\\\">\\n                                <span *ngIf=\\\"ruleoutcome.selected\\\">{{ ruleoutcome.text }}</span>\\n                            </ng-container>\\n                        </div>\\n                        <div>\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.activities' | translate }}</p>\\n                            <p *ngIf=\\\"competency.coursemodules.length == 0\\\">\\n                                {{ 'addon.competency.noactivities' | translate }}\\n                            </p>\\n                            <ion-item class=\\\"ion-text-wrap core-course-module-handler item-media\\\" [attr.aria-label]=\\\"activity.name\\\"\\n                                core-link *ngFor=\\\"let activity of competency.coursemodules\\\" [href]=\\\"activity.url\\\" capture=\\\"true\\\">\\n                                <img slot=\\\"start\\\" [src]=\\\"activity.iconurl\\\" core-external-content alt=\\\"\\\"\\n                                    *ngIf=\\\"activity.iconurl\\\" class=\\\"core-module-icon\\\">\\n                                <ion-label>\\n                                    <core-format-text [text]=\\\"activity.name\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"activity.id\\\"\\n                                        [courseId]=\\\"courseId\\\">\\n                                    </core-format-text>\\n                                </ion-label>\\n                            </ion-item>\\n                        </div>\\n                        <div *ngIf=\\\"competency.plans\\\">\\n                            <p class=\\\"item-heading\\\">{{ 'addon.competency.userplans' | translate }}</p>\\n                            <p *ngIf=\\\"competency.plans.length == 0\\\">\\n                                {{ 'addon.competency.nouserplanswithcompetency' | translate }}\\n                            </p>\\n                            <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let plan of competency.plans\\\" [href]=\\\"plan.url\\\"\\n                                [attr.aria-label]=\\\"plan.name\\\" core-link capture=\\\"true\\\">\\n                                <ion-label>\\n                                   <core-format-text [text]=\\\"plan.name\\\" contextLevel=\\\"user\\\" [contextInstanceId]=\\\"plan.userid\\\">\\n                                   </core-format-text>\\n                                </ion-label>\\n                            </ion-item>\\n                        </div>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-card>\\n        </div>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonCompetencyCourseCompetenciesPage } from './coursecompetencies.page';\n\n@NgModule({\n    imports: [\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonCompetencyCourseCompetenciesPage,\n    ],\n})\nexport class AddonCompetencyCourseCompetenciesPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit } from '@angular/core';\nimport { AddonCompetencyDataForCourseCompetenciesPageWSResponse, AddonCompetency } from '@addons/competency/services/competency';\nimport { AddonCompetencyHelper } from '@addons/competency/services/competency-helper';\nimport { CoreUserProfile } from '@features/user/services/user';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { AddonCompetencyMainMenuHandlerService } from '@addons/competency/services/handlers/mainmenu';\nimport { ContextLevel } from '@/core/constants';\n\n/**\n * Page that displays the list of competencies of a course.\n */\n@Component({\n    selector: 'page-addon-competency-coursecompetencies',\n    templateUrl: 'coursecompetencies.html',\n})\nexport class AddonCompetencyCourseCompetenciesPage implements OnInit {\n\n    competenciesLoaded = false;\n    competencies?: AddonCompetencyDataForCourseCompetenciesPageWSResponse;\n    user?: CoreUserProfile;\n    courseId!: number;\n\n    protected userId!: number;\n\n    /**\n     * View loaded.\n     */\n    ngOnInit(): void {\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.userId = CoreNavigator.getRouteNumberParam('userId')!;\n\n        this.fetchCourseCompetencies().finally(() => {\n            this.competenciesLoaded = true;\n        });\n    }\n\n    /**\n     * Fetches the competencies and updates the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchCourseCompetencies(): Promise<void> {\n        try {\n            this.competencies = await AddonCompetency.getCourseCompetencies(this.courseId, this.userId);\n\n            // Get the user profile image.\n            this.user = await AddonCompetencyHelper.getProfile(this.userId);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'Error getting course competencies data.');\n        }\n    }\n\n    /**\n     * Opens a competency.\n     *\n     * @param competencyId\n     */\n    openCompetency(competencyId: number): void {\n        CoreNavigator.navigateToSitePath(\n            '/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/competencies/' + competencyId,\n            {\n                params: { courseId: this.courseId, userId: this.userId },\n            },\n        );\n    }\n\n    /**\n     * Opens the summary of a competency.\n     *\n     * @param competencyId\n     */\n    openCompetencySummary(competencyId: number): void {\n        CoreNavigator.navigateToSitePath('/' + AddonCompetencyMainMenuHandlerService.PAGE_NAME + '/summary/' + competencyId, {\n            params: {\n                contextLevel: ContextLevel.COURSE,\n                contextInstanceId: this.courseId,\n            } });\n    }\n\n    /**\n     * Refreshes the competencies.\n     *\n     * @param refresher Refresher.\n     */\n    refreshCourseCompetencies(refresher?: IonRefresher): void {\n        AddonCompetency.invalidateCourseCompetencies(this.courseId, this.userId).finally(() => {\n            this.fetchCourseCompetencies().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n}\n"],"sourceRoot":"webpack:///"}