{"version":3,"sources":["./src/addons/mod/quiz/pages/review/review.html","./src/addons/mod/quiz/pages/review/review.module.ts","./src/addons/mod/quiz/pages/review/review.page.ts","./src/addons/mod/quiz/pages/review/review.scss"],"names":[],"mappings":"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","file":"pages-review-review-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>{{ 'addon.mod_quiz.review' | translate }}</h1>\\n\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button fill=\\\"clear\\\" *ngIf=\\\"navigation.length\\\" [attr.aria-label]=\\\"'addon.mod_quiz.opentoc' | translate\\\"\\n                (click)=\\\"openNavigation()\\\" aria-haspopup=\\\"true\\\">\\n                <ion-icon name=\\\"fas-bookmark\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n            </ion-button>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!loaded\\\" (ionRefresh)=\\\"refreshData($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n\\n        <!-- Review summary -->\\n        <ion-card *ngIf=\\\"attempt\\\">\\n            <ion-card-header class=\\\"ion-text-wrap\\\">\\n                <ion-card-title>\\n                    <ng-container *ngIf=\\\"attempt.preview\\\">{{ 'addon.mod_quiz.reviewofpreview' | translate }}</ng-container>\\n                    <ng-container *ngIf=\\\"!attempt.preview\\\">\\n                        {{ 'addon.mod_quiz.reviewofattempt' | translate:{$a: attempt.attempt} }}\\n                    </ng-container>\\n                </ion-card-title>\\n            </ion-card-header>\\n            <ion-list lines=\\\"none\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.startedon' | translate }}</h2>\\n                        <p>{{ attempt.timestart! * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.attemptstate' | translate }}</h2>\\n                        <p>{{ readableState }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"showCompleted\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.completedon' | translate }}</h2>\\n                        <p>{{ attempt.timefinish! * 1000 | coreFormatDate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"timeTaken\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.timetaken' | translate }}</h2>\\n                        <p>{{ timeTaken }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"overTime\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.overdue' | translate }}</h2>\\n                        <p>{{ overTime }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"readableMark\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.marks' | translate }}</h2>\\n                        <p>{{ readableMark }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngIf=\\\"readableGrade\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_quiz.grade' | translate }}</h2>\\n                        <p>{{ readableGrade }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ion-item class=\\\"ion-text-wrap\\\" *ngFor=\\\"let data of additionalData\\\">\\n                    <ion-label>\\n                        <p class=\\\"item-heading\\\">{{ data.title }}</p>\\n                        <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"data.content\\\"\\n                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\n                        </core-format-text>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-list>\\n        </ion-card>\\n\\n        <!-- Questions -->\\n        <div *ngIf=\\\"attempt && questions.length\\\">\\n            <!-- Arrows to go to next/previous. -->\\n            <ng-container *ngTemplateOutlet=\\\"navArrows\\\"></ng-container>\\n\\n            <!-- Questions. -->\\n            <div *ngFor=\\\"let question of questions\\\">\\n                <ion-card id=\\\"addon-mod_quiz-question-{{question.slot}}\\\">\\n                    <!-- \\\"Header\\\" of the question. -->\\n                    <ion-item-divider>\\n                        <ion-label>\\n                            <h2 *ngIf=\\\"question.number\\\">{{ 'core.question.questionno' | translate:{$a: question.number} }}</h2>\\n                            <h2 *ngIf=\\\"!question.number\\\">{{ 'core.question.information' | translate }}</h2>\\n                        </ion-label>\\n                        <div class=\\\"ion-text-wrap ion-margin-horizontal addon-mod_quiz-question-note\\\" slot=\\\"end\\\"\\n                            *ngIf=\\\"question.status || question.readableMark\\\">\\n                            <p *ngIf=\\\"question.status\\\">{{question.status}}</p>\\n                            <p *ngIf=\\\"question.readableMark\\\">{{question.readableMark}}</p>\\n                        </div>\\n                    </ion-item-divider>\\n\\n                    <!-- Body of the question. -->\\n                    <core-question class=\\\"ion-text-wrap\\\" [question]=\\\"question\\\" [component]=\\\"component\\\" [componentId]=\\\"cmId\\\"\\n                        [attemptId]=\\\"attempt.id\\\" [usageId]=\\\"attempt.uniqueid\\\" [offlineEnabled]=\\\"false\\\" contextLevel=\\\"module\\\"\\n                        [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\" [review]=\\\"true\\\"\\n                        [preferredBehaviour]=\\\"quiz?.preferredbehaviour\\\">\\n                    </core-question>\\n                </ion-card>\\n            </div>\\n\\n            <!-- Arrows to go to next/previous. -->\\n            <ng-container *ngTemplateOutlet=\\\"navArrows\\\"></ng-container>\\n        </div>\\n    </core-loading>\\n</ion-content>\\n\\n<!-- Arrows to go to next/previous. -->\\n<ng-template #navArrows>\\n    <ion-grid>\\n        <ion-row class=\\\"ion-align-items-center\\\">\\n            <ion-col class=\\\"ion-text-start\\\">\\n                <ion-button color=\\\"light\\\" *ngIf=\\\"previousPage >= 0\\\" (click)=\\\"changePage(previousPage)\\\"\\n                    [title]=\\\"'core.previous' | translate\\\">\\n                    <ion-icon name=\\\"fas-chevron-left\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                </ion-button>\\n            </ion-col>\\n            <ion-col class=\\\"ion-text-end\\\">\\n                <ion-button color=\\\"light\\\" *ngIf=\\\"nextPage >= -1\\\" (click)=\\\"changePage(nextPage)\\\"\\n                    [attr.aria-label]=\\\"'core.next' | translate\\\">\\n                    <ion-icon name=\\\"fas-chevron-right\\\" slot=\\\"icon-only\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                </ion-button>\\n            </ion-col>\\n        </ion-row>\\n    </ion-grid>\\n</ng-template>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreQuestionComponentsModule } from '@features/question/components/components.module';\nimport { AddonModQuizReviewPage } from './review.page';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonModQuizReviewPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreQuestionComponentsModule,\n    ],\n    declarations: [\n        AddonModQuizReviewPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonModQuizReviewPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { CoreQuestionQuestionParsed } from '@features/question/services/question';\nimport { CoreQuestionHelper } from '@features/question/services/question-helper';\nimport { IonContent, IonRefresher } from '@ionic/angular';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreTextUtils } from '@services/utils/text';\nimport { CoreTimeUtils } from '@services/utils/time';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Translate } from '@singletons';\nimport {\n    AddonModQuizNavigationModalComponent,\n    AddonModQuizNavigationModalReturn,\n    AddonModQuizNavigationQuestion,\n} from '../../components/navigation-modal/navigation-modal';\nimport {\n    AddonModQuiz,\n    AddonModQuizAttemptWSData,\n    AddonModQuizCombinedReviewOptions,\n    AddonModQuizGetAttemptReviewResponse,\n    AddonModQuizProvider,\n    AddonModQuizQuizWSData,\n    AddonModQuizWSAdditionalData,\n} from '../../services/quiz';\nimport { AddonModQuizHelper } from '../../services/quiz-helper';\n\n/**\n * Page that allows reviewing a quiz attempt.\n */\n@Component({\n    selector: 'page-addon-mod-quiz-review',\n    templateUrl: 'review.html',\n    styleUrls: ['review.scss'],\n})\nexport class AddonModQuizReviewPage implements OnInit {\n\n    @ViewChild(IonContent) content?: IonContent;\n\n    attempt?: AddonModQuizAttemptWSData; // The attempt being reviewed.\n    component = AddonModQuizProvider.COMPONENT; // Component to link the files to.\n    showAll = false; // Whether to view all questions in the same page.\n    numPages?: number; // Number of pages.\n    showCompleted = false; // Whether to show completed time.\n    additionalData?: AddonModQuizWSAdditionalData[]; // Additional data to display for the attempt.\n    loaded = false; // Whether data has been loaded.\n    navigation: AddonModQuizNavigationQuestion[] = []; // List of questions to navigate them.\n    questions: QuizQuestion[] = []; // Questions of the current page.\n    nextPage = -2; // Next page.\n    previousPage = -2; // Previous page.\n    readableState?: string;\n    readableGrade?: string;\n    readableMark?: string;\n    timeTaken?: string;\n    overTime?: string;\n    quiz?: AddonModQuizQuizWSData; // The quiz the attempt belongs to.\n    courseId!: number; // The course ID the quiz belongs to.\n    cmId!: number; // Course module id the attempt belongs to.\n\n    protected attemptId!: number; // The attempt being reviewed.\n    protected currentPage!: number; // The current page being reviewed.\n    protected options?: AddonModQuizCombinedReviewOptions; // Review options.\n\n    constructor(\n        protected elementRef: ElementRef,\n    ) {\n    }\n\n    /**\n     * Component being initialized.\n     */\n    async ngOnInit(): Promise<void> {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.attemptId = CoreNavigator.getRouteNumberParam('attemptId')!;\n        this.currentPage = CoreNavigator.getRouteNumberParam('page') || -1;\n        this.showAll = this.currentPage == -1;\n\n        try {\n            await this.fetchData();\n\n            CoreUtils.ignoreErrors(\n                AddonModQuiz.logViewAttemptReview(this.attemptId, this.quiz!.id, this.quiz!.name),\n            );\n        } finally {\n            this.loaded = true;\n        }\n    }\n\n    /**\n     * Change the current page. If slot is supplied, try to scroll to that question.\n     *\n     * @param page Page to load. -1 means all questions in same page.\n     * @param fromModal Whether the page was selected using the navigation modal.\n     * @param slot Slot of the question to scroll to.\n     */\n    async changePage(page: number, fromModal?: boolean, slot?: number): Promise<void> {\n        if (typeof slot != 'undefined' && (this.attempt!.currentpage == -1 || page == this.currentPage)) {\n            // Scrol to a certain question in the current page.\n            this.scrollToQuestion(slot);\n\n            return;\n        } else if (page == this.currentPage) {\n            // If the user is navigating to the current page and no question specified, we do nothing.\n            return;\n        }\n\n        this.loaded = false;\n        this.content?.scrollToTop();\n\n        try {\n            await this.loadPage(page);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetquestions', true);\n        } finally {\n            this.loaded = true;\n\n            if (typeof slot != 'undefined') {\n                // Scroll to the question. Give some time to the questions to render.\n                setTimeout(() => {\n                    this.scrollToQuestion(slot);\n                }, 2000);\n            }\n        }\n    }\n\n    /**\n     * Convenience function to get the quiz data.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.quiz = await AddonModQuiz.getQuiz(this.courseId, this.cmId);\n\n            this.options = await AddonModQuiz.getCombinedReviewOptions(this.quiz.id, { cmId: this.cmId });\n\n            // Load the navigation data.\n            await this.loadNavigation();\n\n            // Load questions.\n            await this.loadPage(this.currentPage);\n        } catch (error) {\n            CoreDomUtils.showErrorModalDefault(error, 'addon.mod_quiz.errorgetquiz', true);\n        }\n    }\n\n    /**\n     * Load a page questions.\n     *\n     * @param page The page to load.\n     * @return Promise resolved when done.\n     */\n    protected async loadPage(page: number): Promise<void> {\n        const data = await AddonModQuiz.getAttemptReview(this.attemptId, { page, cmId: this.quiz!.coursemodule });\n\n        this.attempt = data.attempt;\n        this.attempt.currentpage = page;\n        this.currentPage = page;\n\n        // Set the summary data.\n        this.setSummaryCalculatedData(data);\n\n        this.questions = data.questions;\n        this.nextPage = page == -1 ? -2 : page + 1;\n        this.previousPage = page - 1;\n\n        this.questions.forEach((question) => {\n            // Get the readable mark for each question.\n            question.readableMark = AddonModQuizHelper.getQuestionMarkFromHtml(question.html);\n\n            // Extract the question info box.\n            CoreQuestionHelper.extractQuestionInfoBox(question, '.info');\n        });\n    }\n\n    /**\n     * Load data to navigate the questions using the navigation modal.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async loadNavigation(): Promise<void> {\n        // Get all questions in single page to retrieve all the questions.\n        const data = await AddonModQuiz.getAttemptReview(this.attemptId, { page: -1, cmId: this.quiz!.coursemodule });\n\n        this.navigation = data.questions;\n\n        this.navigation.forEach((question) => {\n            question.stateClass = CoreQuestionHelper.getQuestionStateClass(question.state || '');\n        });\n\n        const lastQuestion = data.questions[data.questions.length - 1];\n        this.numPages = lastQuestion ? lastQuestion.page + 1 : 0;\n    }\n\n    /**\n     * Refreshes data.\n     *\n     * @param refresher Refresher\n     */\n    async refreshData(refresher: IonRefresher): Promise<void> {\n        const promises: Promise<void>[] = [];\n\n        promises.push(AddonModQuiz.invalidateQuizData(this.courseId));\n        promises.push(AddonModQuiz.invalidateAttemptReview(this.attemptId));\n        if (this.quiz) {\n            promises.push(AddonModQuiz.invalidateCombinedReviewOptionsForUser(this.quiz.id));\n        }\n\n        await CoreUtils.ignoreErrors(Promise.all(promises));\n\n        try {\n            await this.fetchData();\n        } finally {\n            refresher.complete();\n        }\n    }\n\n    /**\n     * Scroll to a certain question.\n     *\n     * @param slot Slot of the question to scroll to.\n     */\n    protected scrollToQuestion(slot: number): void {\n        CoreDomUtils.scrollToElementBySelector(\n            this.elementRef.nativeElement,\n            this.content,\n            `#addon-mod_quiz-question-${slot}`,\n        );\n    }\n\n    /**\n     * Calculate review summary data.\n     *\n     * @param data Result of getAttemptReview.\n     */\n    protected setSummaryCalculatedData(data: AddonModQuizGetAttemptReviewResponse): void {\n        if (!this.attempt || !this.quiz) {\n            return;\n        }\n\n        this.readableState = AddonModQuiz.getAttemptReadableStateName(this.attempt!.state || '');\n\n        if (this.attempt.state != AddonModQuizProvider.ATTEMPT_FINISHED) {\n            return;\n        }\n\n        this.showCompleted = true;\n        this.additionalData = data.additionaldata;\n\n        const timeTaken = (this.attempt.timefinish || 0) - (this.attempt.timestart || 0);\n        if (timeTaken > 0) {\n            // Format time taken.\n            this.timeTaken = CoreTimeUtils.formatTime(timeTaken);\n\n            // Calculate overdue time.\n            if (this.quiz.timelimit && timeTaken > this.quiz.timelimit + 60) {\n                this.overTime = CoreTimeUtils.formatTime(timeTaken - this.quiz.timelimit);\n            }\n        } else {\n            this.timeTaken = undefined;\n        }\n\n        // Treat grade.\n        if (this.options!.someoptions.marks >= AddonModQuizProvider.QUESTION_OPTIONS_MARK_AND_MAX &&\n                AddonModQuiz.quizHasGrades(this.quiz)) {\n\n            if (data.grade === null || typeof data.grade == 'undefined') {\n                this.readableGrade = AddonModQuiz.formatGrade(data.grade, this.quiz.decimalpoints);\n            } else {\n                // Show raw marks only if they are different from the grade (like on the entry page).\n                if (this.quiz.grade != this.quiz.sumgrades) {\n                    this.readableMark = Translate.instant('addon.mod_quiz.outofshort', { $a: {\n                        grade: AddonModQuiz.formatGrade(this.attempt.sumgrades, this.quiz.decimalpoints),\n                        maxgrade: AddonModQuiz.formatGrade(this.quiz.sumgrades, this.quiz.decimalpoints),\n                    } });\n                }\n\n                // Now the scaled grade.\n                const gradeObject: Record<string, unknown> = {\n                    grade: AddonModQuiz.formatGrade(Number(data.grade), this.quiz.decimalpoints),\n                    maxgrade: AddonModQuiz.formatGrade(this.quiz.grade, this.quiz.decimalpoints),\n                };\n\n                if (this.quiz.grade != 100) {\n                    gradeObject.percent = CoreTextUtils.roundToDecimals(\n                        this.attempt.sumgrades! * 100 / this.quiz.sumgrades!,\n                        0,\n                    );\n                    this.readableGrade = Translate.instant('addon.mod_quiz.outofpercent', { $a: gradeObject });\n                } else {\n                    this.readableGrade = Translate.instant('addon.mod_quiz.outof', { $a: gradeObject });\n                }\n            }\n        }\n\n        // Treat additional data.\n        this.additionalData.forEach((data) => {\n            // Remove help links from additional data.\n            data.content = CoreDomUtils.removeElementFromHtml(data.content, '.helptooltip');\n        });\n    }\n\n    /**\n     * Switch mode: all questions in same page OR one page at a time.\n     */\n    switchMode(): void {\n        this.showAll = !this.showAll;\n\n        // Load all questions or first page, depending on the mode.\n        this.loadPage(this.showAll ? -1 : 0);\n    }\n\n    async openNavigation(): Promise<void> {\n        // Create the navigation modal.\n        const modalData = await CoreDomUtils.openSideModal<AddonModQuizNavigationModalReturn>({\n            component: AddonModQuizNavigationModalComponent,\n            componentProps: {\n                navigation: this.navigation,\n                summaryShown: false,\n                currentPage: this.attempt?.currentpage,\n                isReview: true,\n                numPages: this.numPages,\n                showAll: this.showAll,\n            },\n        });\n\n        if (!modalData) {\n            return;\n        }\n\n        if (modalData.action == AddonModQuizNavigationModalComponent.CHANGE_PAGE) {\n            this.changePage(modalData.page!, true, modalData.slot);\n        } else if (modalData.action == AddonModQuizNavigationModalComponent.SWITCH_MODE) {\n            this.switchMode();\n        }\n    }\n\n}\n\n/**\n * Question with some calculated data for the view.\n */\ntype QuizQuestion = CoreQuestionQuestionParsed & {\n    readableMark?: string;\n};\n","export default \":host .addon-mod_quiz-question-note p {\\n  margin-top: 2px;\\n  margin-bottom: 2px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbW9kL3F1aXovcGFnZXMvcmV2aWV3L3Jldmlldy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksZUFBQTtFQUNBLGtCQUFBO0FBQVIiLCJmaWxlIjoic3JjL2FkZG9ucy9tb2QvcXVpei9wYWdlcy9yZXZpZXcvcmV2aWV3LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gICAgLmFkZG9uLW1vZF9xdWl6LXF1ZXN0aW9uLW5vdGUgcCB7XG4gICAgICAgIG1hcmdpbi10b3A6IDJweDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMnB4O1xuICAgIH1cbn1cbiJdfQ== */\";"],"sourceRoot":"webpack:///"}