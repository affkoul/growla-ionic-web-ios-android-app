{"version":3,"sources":["./src/addons/mod/feedback/pages/form/form.html","./src/addons/mod/feedback/pages/form/form.module.ts","./src/addons/mod/feedback/pages/form/form.scss","./src/addons/mod/feedback/pages/form/form.ts"],"names":[],"mappings":"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","file":"pages-form-form-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <h1>\\n            <core-format-text [text]=\\\"title\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\n            </core-format-text>\\n        </h1>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <core-loading [hideUntil]=\\\"feedbackLoaded\\\">\\n        <ng-container *ngIf=\\\"items && items.length\\\">\\n            <ion-list class=\\\"ion-no-margin\\\">\\n                <ion-item class=\\\"ion-text-wrap\\\">\\n                    <ion-label>\\n                        <h2>{{ 'addon.mod_feedback.mode' | translate }}</h2>\\n                        <p *ngIf=\\\"access!.isanonymous\\\">{{ 'addon.mod_feedback.anonymous' | translate }}</p>\\n                        <p *ngIf=\\\"!access!.isanonymous\\\">{{ 'addon.mod_feedback.non_anonymous' | translate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n                <ng-container *ngFor=\\\"let item of items\\\">\\n                    <core-spacer *ngIf=\\\"item.typ == 'pagebreak'\\\"></core-spacer>\\n                    <ng-container *ngIf=\\\"item.typ != 'pagebreak'\\\">\\n                        <ion-item class=\\\"ion-text-wrap addon-mod_feedback-item\\\" [color]=\\\"item.dependitem > 0 ? 'light' : ''\\\"\\n                            [class.core-danger-item]=\\\"item.isEmpty || item.hasError\\\">\\n                            <ion-label [position]=\\\"item.hasTextInput ? 'stacked' : undefined\\\">\\n                                <p *ngIf=\\\"item.name\\\" [core-mark-required]=\\\"item.required\\\">\\n                                    <span *ngIf=\\\"feedback!.autonumbering && item.itemnumber\\\">{{item.itemnumber}}. </span>\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"item.name\\\"\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\" [wsNotFiltered]=\\\"true\\\">\\n                                    </core-format-text>\\n                                    <span *ngIf=\\\"item.postfix\\\" class=\\\"addon-mod_feedback-postfix\\\">{{item.postfix}}</span>\\n                                </p>\\n                                <p *ngIf=\\\"item.templateName == 'label'\\\">\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\"\\n                                        [text]=\\\"item.presentation\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\"\\n                                        [wsNotFiltered]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\n                                    </core-format-text>\\n                                </p>\\n                            </ion-label>\\n\\n                            <ion-input *ngIf=\\\"item.templateName == 'textfield'\\\" type=\\\"text\\\" [(ngModel)]=\\\"item.value\\\"\\n                                autocorrect=\\\"off\\\" name=\\\"{{item.typ}}_{{item.id}}\\\" maxlength=\\\"{{item.length}}\\\"\\n                                [required]=\\\"item.required\\\">\\n                            </ion-input>\\n\\n                            <ng-container *ngIf=\\\"item.templateName == 'numeric'\\\">\\n                                <ion-input type=\\\"number\\\" [(ngModel)]=\\\"item.value\\\" name=\\\"{{item.typ}}_{{item.id}}\\\"\\n                                    [required]=\\\"item.required\\\">\\n                                </ion-input>\\n                                <ion-text *ngIf=\\\"item.hasError\\\" color=\\\"danger\\\" class=\\\"addon-mod_feedback-item-error\\\">\\n                                    {{ 'addon.mod_feedback.numberoutofrange' | translate }} [{{item.rangefrom}}\\n                                    <span *ngIf=\\\"item.rangefrom && item.rangeto\\\">, </span>{{item.rangeto}}]\\n                                </ion-text>\\n                            </ng-container>\\n\\n                            <ion-textarea *ngIf=\\\"item.templateName == 'textarea'\\\" [required]=\\\"item.required\\\"\\n                                name=\\\"{{item.typ}}_{{item.id}}\\\" [(ngModel)]=\\\"item.value\\\">\\n                            </ion-textarea>\\n\\n                            <ion-select *ngIf=\\\"item.templateName == 'multichoice-d'\\\" [required]=\\\"item.required\\\"\\n                                name=\\\"{{item.typ}}_{{item.id}}\\\" [(ngModel)]=\\\"item.value\\\" interface=\\\"action-sheet\\\"\\n                                [interfaceOptions]=\\\"{header: item.name}\\\">\\n                                <ion-select-option *ngFor=\\\"let option of item.choices\\\" [value]=\\\"option.value\\\">\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"option.label\\\"\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [wsNotFiltered]=\\\"true\\\"\\n                                        [courseId]=\\\"courseId\\\">\\n                                    </core-format-text>\\n                                </ion-select-option>\\n                            </ion-select>\\n                        </ion-item>\\n\\n                        <ion-radio-group *ngIf=\\\"item.templateName == 'multichoice-r'\\\" [(ngModel)]=\\\"item.value\\\"\\n                            [required]=\\\"item.required\\\" name=\\\"{{item.typ}}_{{item.id}}\\\">\\n                            <ion-item *ngFor=\\\"let option of item.choices\\\">\\n                                <ion-label>\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\"\\n                                        [text]=\\\"option.label\\\" contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\"\\n                                        [wsNotFiltered]=\\\"true\\\" [courseId]=\\\"courseId\\\">\\n                                    </core-format-text>\\n                                </ion-label>\\n                                <ion-radio slot=\\\"start\\\" [value]=\\\"option.value\\\"></ion-radio>\\n                            </ion-item>\\n                        </ion-radio-group>\\n\\n                        <ng-container *ngIf=\\\"item.templateName == 'multichoice-c'\\\">\\n                            <ion-item *ngFor=\\\"let option of item.choices\\\">\\n                                <ion-label>\\n                                    <core-format-text [component]=\\\"component\\\" [componentId]=\\\"cmId\\\" [text]=\\\"option.label\\\"\\n                                        contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [wsNotFiltered]=\\\"true\\\"\\n                                        [courseId]=\\\"courseId\\\">\\n                                    </core-format-text>\\n                                </ion-label>\\n                                <ion-checkbox [required]=\\\"item.required\\\" name=\\\"{{item.typ}}_{{item.id}}\\\"\\n                                    [(ngModel)]=\\\"option.checked\\\" value=\\\"option.value\\\">\\n                                </ion-checkbox>\\n                            </ion-item>\\n                        </ng-container>\\n\\n                        <ng-container *ngIf=\\\"item.templateName == 'captcha'\\\">\\n                            <core-recaptcha *ngIf=\\\"!preview && !offline\\\" [publicKey]=\\\"item.captcha.recaptchapublickey\\\"\\n                                [model]=\\\"item\\\" modelValueName=\\\"value\\\">\\n                            </core-recaptcha>\\n                            <div *ngIf=\\\"!preview && (!item.captcha || offline)\\\" class=\\\"core-warning-card\\\">\\n                                <ion-item>\\n                                    <ion-icon name=\\\"fas-exclamation-triangle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                                    <ion-label>{{ 'addon.mod_feedback.captchaofflinewarning' | translate }}</ion-label>\\n                                </ion-item>\\n                            </div>\\n                        </ng-container>\\n                    </ng-container>\\n                </ng-container>\\n                <ion-grid *ngIf=\\\"!preview\\\">\\n                    <ion-row class=\\\"ion-align-items-center\\\">\\n                        <ion-col *ngIf=\\\"hasPrevPage\\\">\\n                            <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"gotoPage(true)\\\" class=\\\"ion-text-wrap\\\">\\n                                <ion-icon name=\\\"fas-chevron-left\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                                {{ 'addon.mod_feedback.previous_page' | translate }}\\n                            </ion-button>\\n                        </ion-col>\\n                        <ion-col *ngIf=\\\"hasNextPage\\\">\\n                            <ion-button expand=\\\"block\\\" (click)=\\\"gotoPage(false)\\\" class=\\\"ion-text-wrap\\\">\\n                                {{ 'addon.mod_feedback.next_page' | translate }}\\n                                <ion-icon name=\\\"fas-chevron-right\\\" slot=\\\"end\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                            </ion-button>\\n                        </ion-col>\\n                        <ion-col *ngIf=\\\"!hasNextPage\\\">\\n                            <ion-button expand=\\\"block\\\" (click)=\\\"gotoPage(false)\\\" class=\\\"ion-text-wrap\\\">\\n                                {{ 'addon.mod_feedback.save_entries' | translate }}\\n                            </ion-button>\\n                        </ion-col>\\n                    </ion-row>\\n                </ion-grid>\\n            </ion-list>\\n        </ng-container>\\n\\n        <ion-card class=\\\"core-success-card\\\" *ngIf=\\\"completed\\\">\\n            <ion-item>\\n                <ion-icon name=\\\"fas-check\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                <ion-label>\\n                    <p *ngIf=\\\"!completionPageContents && !completedOffline\\\">\\n                        {{ 'addon.mod_feedback.this_feedback_is_already_submitted' | translate }}\\n                    </p>\\n                    <p *ngIf=\\\"!completionPageContents && completedOffline\\\">\\n                        {{ 'addon.mod_feedback.feedback_submitted_offline' | translate }}\\n                    </p>\\n                    <p *ngIf=\\\"completionPageContents\\\">\\n                        <core-format-text [component]=\\\"component\\\" componentId=\\\"componentId\\\" [text]=\\\"completionPageContents\\\"\\n                            contextLevel=\\\"module\\\" [contextInstanceId]=\\\"cmId\\\" [courseId]=\\\"courseId\\\">\\n                        </core-format-text>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n        </ion-card>\\n\\n        <ion-card *ngIf=\\\"completed && (access!.canviewanalysis || hasNextPage)\\\">\\n            <ion-grid>\\n                <ion-row class=\\\"ion-align-items-center\\\">\\n                    <ion-col *ngIf=\\\"access!.canviewanalysis\\\">\\n                        <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"showAnalysis()\\\" class=\\\"ion-text-wrap\\\">\\n                            <ion-icon name=\\\"fas-chart-bar\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                            {{ 'addon.mod_feedback.completed_feedbacks' | translate }}\\n                        </ion-button>\\n                    </ion-col>\\n                    <ion-col *ngIf=\\\"hasNextPage\\\">\\n                        <ion-button expand=\\\"block\\\" (click)=\\\"continue()\\\" class=\\\"ion-text-wrap\\\">\\n                            {{ 'core.continue' | translate }}\\n                            <ion-icon name=\\\"fas-chevron-right\\\" slot=\\\"end\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                        </ion-button>\\n                    </ion-col>\\n                </ion-row>\\n            </ion-grid>\\n        </ion-card>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CanLeaveGuard } from '@guards/can-leave';\nimport { AddonModFeedbackFormPage } from './form';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonModFeedbackFormPage,\n        canDeactivate: [CanLeaveGuard],\n    },\n];\n\n@NgModule({\n    declarations: [\n        AddonModFeedbackFormPage,\n    ],\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonModFeedbackFormPageModule {}\n","export default \":host .addon-mod_feedback-item ion-label.label-stacked {\\n  margin: 11px 0px 10px;\\n  transform: none;\\n}\\n:host .addon-mod_feedback-item-error {\\n  padding-top: 5px;\\n  padding-bottom: 8px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hZGRvbnMvbW9kL2ZlZWRiYWNrL3BhZ2VzL2Zvcm0vZm9ybS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0kscUJBQUE7RUFDQSxlQUFBO0FBQVI7QUFHSTtFQUNJLGdCQUFBO0VBQ0EsbUJBQUE7QUFEUiIsImZpbGUiOiJzcmMvYWRkb25zL21vZC9mZWVkYmFjay9wYWdlcy9mb3JtL2Zvcm0uc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcbiAgICAuYWRkb24tbW9kX2ZlZWRiYWNrLWl0ZW0gaW9uLWxhYmVsLmxhYmVsLXN0YWNrZWQge1xuICAgICAgICBtYXJnaW46IDExcHggMHB4IDEwcHg7XG4gICAgICAgIHRyYW5zZm9ybTogbm9uZTtcbiAgICB9XG5cbiAgICAuYWRkb24tbW9kX2ZlZWRiYWNrLWl0ZW0tZXJyb3Ige1xuICAgICAgICBwYWRkaW5nLXRvcDogNXB4O1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogOHB4O1xuICAgIH1cbn1cbiJdfQ== */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { CoreSite } from '@classes/site';\nimport { CoreContentLinksHelper } from '@features/contentlinks/services/contentlinks-helper';\nimport { CoreCourse, CoreCourseCommonModWSOptions, CoreCourseWSModule } from '@features/course/services/course';\nimport { CoreCourseHelper } from '@features/course/services/course-helper';\nimport { CanLeave } from '@guards/can-leave';\nimport { IonContent } from '@ionic/angular';\nimport { CoreApp } from '@services/app';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { Network, NgZone, Translate } from '@singletons';\nimport { CoreEvents } from '@singletons/events';\nimport { Subscription } from 'rxjs';\nimport {\n    AddonModFeedback,\n    AddonModFeedbackGetFeedbackAccessInformationWSResponse,\n    AddonModFeedbackPageItems,\n    AddonModFeedbackProvider,\n    AddonModFeedbackResponseValue,\n    AddonModFeedbackWSFeedback,\n} from '../../services/feedback';\nimport { AddonModFeedbackFormItem, AddonModFeedbackHelper } from '../../services/feedback-helper';\nimport { AddonModFeedbackSync } from '../../services/feedback-sync';\nimport { AddonModFeedbackModuleHandlerService } from '../../services/handlers/module';\n\n/**\n * Page that displays feedback form.\n */\n@Component({\n    selector: 'page-addon-mod-feedback-form',\n    templateUrl: 'form.html',\n    styleUrls: ['form.scss'],\n})\nexport class AddonModFeedbackFormPage implements OnInit, OnDestroy, CanLeave {\n\n    @ViewChild(IonContent) content?: IonContent;\n\n    protected module?: CoreCourseWSModule;\n    protected currentPage?: number;\n    protected siteAfterSubmit?: string;\n    protected onlineObserver: Subscription;\n    protected originalData?: Record<string, AddonModFeedbackResponseValue>;\n    protected currentSite: CoreSite;\n    protected forceLeave = false;\n\n    title?: string;\n    preview = false;\n    fromIndex = false;\n    cmId!: number;\n    courseId!: number;\n    feedback?: AddonModFeedbackWSFeedback;\n    completionPageContents?: string;\n    component = AddonModFeedbackProvider.COMPONENT;\n    offline = false;\n    feedbackLoaded = false;\n    access?: AddonModFeedbackGetFeedbackAccessInformationWSResponse;\n    items: AddonModFeedbackFormItem[] = [];\n    hasPrevPage = false;\n    hasNextPage = false;\n    completed = false;\n    completedOffline = false;\n\n    constructor() {\n        this.currentSite = CoreSites.getCurrentSite()!;\n\n        // Refresh online status when changes.\n        this.onlineObserver = Network.onChange().subscribe(() => {\n            // Execute the callback in the Angular zone, so change detection doesn't stop working.\n            NgZone.run(() => {\n                this.offline = !CoreApp.isOnline();\n            });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        this.cmId = CoreNavigator.getRouteNumberParam('cmId')!;\n        this.courseId = CoreNavigator.getRouteNumberParam('courseId')!;\n        this.currentPage = CoreNavigator.getRouteNumberParam('page');\n        this.title = CoreNavigator.getRouteParam('title');\n        this.preview = !!CoreNavigator.getRouteBooleanParam('preview');\n        this.fromIndex = !!CoreNavigator.getRouteBooleanParam('fromIndex');\n\n        await this.fetchData();\n\n        if (!this.feedback) {\n            return;\n        }\n\n        try {\n            await AddonModFeedback.logView(this.feedback.id, this.feedback.name, true);\n\n            CoreCourse.checkModuleCompletion(this.courseId, this.module!.completiondata);\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * View entered.\n     */\n    ionViewDidEnter(): void {\n        this.forceLeave = false;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    async canLeave(): Promise<boolean> {\n        if (this.forceLeave) {\n            return true;\n        }\n\n        if (!this.preview) {\n            const responses = AddonModFeedbackHelper.getPageItemsResponses(this.items);\n\n            if (this.items && !this.completed && this.originalData) {\n                // Form submitted. Check if there is any change.\n                if (!CoreUtils.basicLeftCompare(responses, this.originalData, 3)) {\n                    await CoreDomUtils.showConfirm(Translate.instant('core.confirmcanceledit'));\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Fetch all the data required for the view.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchData(): Promise<void> {\n        try {\n            this.module = await CoreCourse.getModule(this.cmId, this.courseId, undefined, true, false, this.currentSite.getId());\n\n            this.offline = !CoreApp.isOnline();\n            const options = {\n                cmId: this.cmId,\n                readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n                siteId: this.currentSite.getId(),\n            };\n\n            this.feedback = await AddonModFeedback.getFeedback(this.courseId, this.cmId);\n\n            this.title = this.feedback.name || this.title;\n\n            await this.fetchAccessData(options);\n\n            let page = 0;\n\n            if (!this.preview && this.access!.cansubmit && !this.access!.isempty) {\n                page = this.currentPage ?? await this.fetchResumePage(options);\n            } else {\n                this.preview = true;\n            }\n\n            await this.fetchFeedbackPageData(page);\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n            this.forceLeave = true;\n            CoreNavigator.back();\n        } finally {\n            this.feedbackLoaded = true;\n        }\n    }\n\n    /**\n     * Fetch access information.\n     *\n     * @param options Options.\n     * @return Promise resolved when done.\n     */\n    protected async fetchAccessData(options: CoreCourseCommonModWSOptions): Promise<void> {\n        try {\n            this.access = await AddonModFeedback.getFeedbackAccessInformation(this.feedback!.id, options);\n        } catch (error) {\n            if (this.offline || CoreUtils.isWebServiceError(error)) {\n                // Already offline or shouldn't go offline, fail.\n                throw error;\n            }\n\n            // If it fails, go offline.\n            this.offline = true;\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n            this.access = await AddonModFeedback.getFeedbackAccessInformation(this.feedback!.id, options);\n        }\n    }\n\n    /**\n     * Get resume page from WS.\n     *\n     * @param options Options.\n     * @return Promise resolved with the page to resume.\n     */\n    protected async fetchResumePage(options: CoreCourseCommonModWSOptions): Promise<number> {\n        try {\n            return await AddonModFeedback.getResumePage(this.feedback!.id, options);\n        } catch (error) {\n            if (this.offline || CoreUtils.isWebServiceError(error)) {\n                // Already offline or shouldn't go offline, fail.\n                throw error;\n            }\n\n            // Go offline.\n            this.offline = true;\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n            return AddonModFeedback.getResumePage(this.feedback!.id, options);\n        }\n    }\n\n    /**\n     * Fetch page data.\n     *\n     * @param page Page to load.\n     * @return Promise resolved when done.\n     */\n    protected async fetchFeedbackPageData(page: number = 0): Promise<void> {\n        this.items = [];\n        const response = await this.fetchPageItems(page);\n\n        this.items = <AddonModFeedbackFormItem[]> response.items\n            .map((itemData) => AddonModFeedbackHelper.getItemForm(itemData, this.preview))\n            .filter((itemData) => itemData); // Filter items with errors.\n\n        if (!this.preview) {\n            const itemsCopy = CoreUtils.clone(this.items); // Copy the array to avoid modifications.\n            this.originalData = AddonModFeedbackHelper.getPageItemsResponses(itemsCopy);\n        }\n    }\n\n    /**\n     * Fetch page items.\n     *\n     * @param page Page to get.\n     * @return Promise resolved with WS response.\n     */\n    protected async fetchPageItems(page: number): Promise<AddonModFeedbackPageItems> {\n        const options = {\n            cmId: this.cmId,\n            readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n            siteId: this.currentSite.getId(),\n        };\n\n        if (this.preview) {\n            const response = await AddonModFeedback.getItems(this.feedback!.id, options);\n\n            return {\n                items: response.items,\n                warnings: response.warnings,\n                hasnextpage: false,\n                hasprevpage: false,\n            };\n        }\n\n        this.currentPage = page;\n        let response: AddonModFeedbackPageItems;\n\n        try {\n            response = await AddonModFeedback.getPageItemsWithValues(this.feedback!.id, page, options);\n        } catch (error) {\n            if (this.offline || CoreUtils.isWebServiceError(error)) {\n                // Already offline or shouldn't go offline, fail.\n                throw error;\n            }\n\n            // Go offline.\n            this.offline = true;\n            options.readingStrategy = CoreSitesReadingStrategy.PREFER_CACHE;\n\n            response = await AddonModFeedback.getPageItemsWithValues(this.feedback!.id, page, options);\n        }\n\n        this.hasPrevPage = !!response.hasprevpage;\n        this.hasNextPage = !!response.hasnextpage;\n\n        return response;\n    }\n\n    /**\n     * Function to allow page navigation through the questions form.\n     *\n     * @param goPrevious If true it will go back to the previous page, if false, it will go forward.\n     * @return Resolved when done.\n     */\n    async gotoPage(goPrevious: boolean): Promise<void> {\n        this.content?.scrollToTop();\n        this.feedbackLoaded = false;\n\n        const responses = AddonModFeedbackHelper.getPageItemsResponses(this.items);\n        const formHasErrors = this.items.some((item) => item.isEmpty || item.hasError);\n\n        try {\n            // Sync other pages first.\n            await CoreUtils.ignoreErrors(AddonModFeedbackSync.syncFeedback(this.feedback!.id));\n\n            const response = await AddonModFeedback.processPage(this.feedback!.id, this.currentPage!, responses, {\n                goPrevious,\n                formHasErrors,\n                courseId: this.courseId,\n                cmId: this.cmId,\n            });\n\n            if (response.completed) {\n                // Form is completed, show completion message and buttons.\n                this.items = [];\n                this.completed = true;\n                this.completedOffline = !!response.offline;\n                this.completionPageContents = response.completionpagecontents;\n                this.siteAfterSubmit = response.siteaftersubmit;\n\n                CoreEvents.trigger(CoreEvents.ACTIVITY_DATA_SENT, { module: 'feedback' });\n\n                // Invalidate access information so user will see home page updated (continue form or completion messages).\n                await Promise.all([\n                    AddonModFeedback.invalidateFeedbackAccessInformationData(this.feedback!.id),\n                    AddonModFeedback.invalidateResumePageData(this.feedback!.id),\n                ]);\n\n                // If form has been submitted, the info has been already invalidated but we should update index view.\n                CoreEvents.trigger(AddonModFeedbackProvider.FORM_SUBMITTED, {\n                    feedbackId: this.feedback!.id,\n                    tab: 'overview',\n                    offline: this.completedOffline,\n                });\n\n                await this.fetchAccessData({\n                    cmId: this.cmId,\n                    readingStrategy: this.offline ? CoreSitesReadingStrategy.PREFER_CACHE : CoreSitesReadingStrategy.ONLY_NETWORK,\n                    siteId: this.currentSite.getId(),\n                });\n            } else if (typeof response.jumpto != 'number' || response.jumpto == this.currentPage) {\n                // Errors on questions, stay in page.\n            } else {\n                // Invalidate access information so user will see home page updated (continue form).\n                await AddonModFeedback.invalidateResumePageData(this.feedback!.id);\n\n                CoreEvents.trigger(AddonModFeedbackProvider.FORM_SUBMITTED, {\n                    feedbackId: this.feedback!.id,\n                    tab: 'overview',\n                    offline: this.completedOffline,\n                });\n\n                // Fetch the new page.\n                await this.fetchFeedbackPageData(response.jumpto);\n            }\n        } catch (message) {\n            CoreDomUtils.showErrorModalDefault(message, 'core.course.errorgetmodule', true);\n        } finally {\n            this.feedbackLoaded = true;\n        }\n    }\n\n    /**\n     * Function to link implemented features.\n     */\n    showAnalysis(): void {\n        if (this.fromIndex) {\n            // Previous page is the index page, go back.\n            CoreEvents.trigger(AddonModFeedbackProvider.FORM_SUBMITTED, {\n                feedbackId: this.feedback!.id,\n                tab: 'analysis',\n                offline: this.completedOffline,\n            });\n\n            CoreNavigator.back();\n\n            return;\n        }\n\n        CoreNavigator.navigateToSitePath(AddonModFeedbackModuleHandlerService.PAGE_NAME + `/${this.courseId}/${this.cmId}`, {\n            params: {\n                module: this.module,\n                tab: 'analysis',\n            },\n        });\n    }\n\n    /**\n     * Function to go to the page after submit.\n     */\n    async continue(): Promise<void> {\n        if (!this.siteAfterSubmit) {\n            return CoreCourseHelper.getAndOpenCourse(this.courseId, {}, this.currentSite.getId());\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            const treated = await CoreContentLinksHelper.handleLink(this.siteAfterSubmit);\n\n            if (!treated) {\n                await this.currentSite.openInBrowserWithAutoLoginIfSameSite(this.siteAfterSubmit);\n            }\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Component being destroyed.\n     */\n    ngOnDestroy(): void {\n        this.onlineObserver.unsubscribe();\n    }\n\n}\n"],"sourceRoot":"webpack:///"}