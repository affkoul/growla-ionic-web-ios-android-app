{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * @hidden\n */\nexport declare class MediaObject {\n    private _objectInstance;\n    /**\n     * An observable that notifies you on actions success\n     */\n    onSuccess: Observable<any>;\n    /**\n     * An observable that notifies you when an error occurs\n     */\n    onError: Observable<MEDIA_ERROR>;\n    /**\n     * An observable that notifies you when the file status changes\n     */\n    onStatusUpdate: Observable<MEDIA_STATUS>;\n    /**\n     * @hidden\n     */\n    successCallback: Function;\n    /**\n     * @hidden\n     */\n    errorCallback: Function;\n    /**\n     * @hidden\n     */\n    statusCallback: Function;\n    constructor(_objectInstance: any);\n    /**\n     * Get the current amplitude of the current recording.\n     * @returns {Promise<any>} Returns a promise with the amplitude of the current recording\n     */\n    getCurrentAmplitude(): Promise<any>;\n    /**\n     * Get the current position within an audio file. Also updates the Media object's position parameter.\n     * @returns {Promise<any>} Returns a promise with the position of the current recording\n     */\n    getCurrentPosition(): Promise<any>;\n    /**\n     * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\n     * @returns {number} Returns a promise with the duration of the current recording\n     */\n    getDuration(): number;\n    /**\n     * Starts or resumes playing an audio file.\n     */\n    play(iosOptions?: {\n        numberOfLoops?: number;\n        playAudioWhenScreenIsLocked?: boolean;\n    }): void;\n    /**\n     * Pauses playing an audio file.\n     */\n    pause(): void;\n    /**\n     * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\n     */\n    release(): void;\n    /**\n     * Sets the current position within an audio file.\n     * @param {number} milliseconds The time position you want to set for the current audio file\n     */\n    seekTo(milliseconds: number): void;\n    /**\n     * Set the volume for an audio file.\n     * @param volume {number} The volume to set for playback. The value must be within the range of 0.0 to 1.0.\n     */\n    setVolume(volume: number): void;\n    setRate(speedRate: number): void;\n    /**\n     * Starts recording an audio file.\n     */\n    startRecord(): void;\n    /**\n     * Stops recording\n     */\n    stopRecord(): void;\n    /**\n     * Pauses recording\n     */\n    pauseRecord(): void;\n    /**\n     * Resumes recording\n     */\n    resumeRecord(): void;\n    /**\n     * Stops playing an audio file.\n     */\n    stop(): void;\n}\nexport declare type MediaStatusUpdateCallback = (statusCode: number) => void;\nexport interface MediaError {\n    /**\n     * Error message\n     */\n    message: string;\n    /**\n     * Error code\n     */\n    code: number;\n}\nexport declare enum MEDIA_STATUS {\n    NONE = 0,\n    STARTING = 1,\n    RUNNING = 2,\n    PAUSED = 3,\n    STOPPED = 4\n}\nexport declare enum MEDIA_ERROR {\n    ABORTED = 1,\n    NETWORK = 2,\n    DECODE = 3,\n    SUPPORTED = 4\n}\nexport declare type MediaErrorCallback = (error: MediaError) => void;\n/**\n * @name Media\n * @premier media\n * @description\n * This plugin provides the ability to record and play back audio files on a device.\n *\n * @usage\n * ```typescript\n * import { Media, MediaObject } from '@ionic-native/media/ngx';\n *\n *\n * constructor(private media: Media) { }\n *\n *\n * ...\n *\n *\n * // Create a Media instance.  Expects path to file or url as argument\n * // We can optionally pass a second argument to track the status of the media\n *\n * const file: MediaObject = this.media.create('file.mp3');\n *\n * // to listen to plugin events:\n *\n * file.onStatusUpdate.subscribe(status => console.log(status)); // fires when file status changes\n *\n * file.onSuccess.subscribe(() => console.log('Action is successful'));\n *\n * file.onError.subscribe(error => console.log('Error!', error));\n *\n * // play the file\n * file.play();\n *\n * // pause the file\n * file.pause();\n *\n * // get current playback position\n * file.getCurrentPosition().then((position) => {\n *   console.log(position);\n * });\n *\n * // get file duration\n * let duration = file.getDuration();\n * console.log(duration);\n *\n * // skip to 10 seconds (expects int value in ms)\n * file.seekTo(10000);\n *\n * // stop playing the file\n * file.stop();\n *\n * // release the native audio resource\n * // Platform Quirks:\n * // iOS simply create a new instance and the old one will be overwritten\n * // Android you must call release() to destroy instances of media when you are done\n * file.release();\n *\n *\n *\n * // Recording to a file\n * const file: MediaObject = this.media.create('path/to/file.mp3');\n *\n * file.startRecord();\n *\n * file.stopRecord();\n *\n *\n * ```\n *\n * Some hints if you are using iOS and recording doesn't work:\n * 1.) Try to use a absolute file path but remove beginning \"file://\".\n * Then it looks like: `/var/mobile/Containers/Data/Application/AF438B8B-7724-4FBB-8E69-083463224FC4/tmp/my_file.m4a`\n * Example: `this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a')`\n * 2.) If that's not working, too, create the file before using.\n * Example:\n * ```typescript\n * import { Media, MediaObject } from '@ionic-native/media/ngx';\n * import { File } from '@ionic-native/file/ngx';\n *\n * ...\n *\n * constructor(private media: Media, private file: File) { }\n *\n * ...\n *\n * this.file.createFile(this.file.tempDirectory, 'my_file.m4a', true).then(() => {\n *   let file = this.media.create(this.file.tempDirectory.replace(/^file:\\/\\//, '') + 'my_file.m4a');\n *   file.startRecord();\n *   window.setTimeout(() => file.stopRecord(), 10000);\n * });\n * ```\n *\n * You can find the reasons here: https://github.com/ionic-team/ionic-native/issues/1452#issuecomment-299605906\n * @classes\n * MediaObject\n * @interfaces\n * MediaError\n */\nexport declare class Media extends IonicNativePlugin {\n    /**\n     * @hidden\n     */\n    MEDIA_NONE: number;\n    /**\n     * @hidden\n     */\n    MEDIA_STARTING: number;\n    /**\n     * @hidden\n     */\n    MEDIA_RUNNING: number;\n    /**\n     * @hidden\n     */\n    MEDIA_PAUSED: number;\n    /**\n     * @hidden\n     */\n    MEDIA_STOPPED: number;\n    /**\n     * @hidden\n     */\n    MEDIA_ERR_ABORTED: number;\n    /**\n     * @hidden\n     */\n    MEDIA_ERR_NETWORK: number;\n    /**\n     * @hidden\n     */\n    MEDIA_ERR_DECODE: number;\n    /**\n     * @hidden\n     */\n    MEDIA_ERR_NONE_SUPPORTED: number;\n    /**\n     * Open a media file\n     * @param src {string} A URI containing the audio content.\n     * @return {MediaObject}\n     */\n    create(src: string): MediaObject;\n}\n"]}