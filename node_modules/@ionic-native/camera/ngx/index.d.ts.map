{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface CameraOptions {\n    /** Picture quality in range 0-100. Default is 50 */\n    quality?: number;\n    /**\n     * Choose the format of the return value.\n     * Defined in Camera.DestinationType. Default is FILE_URI.\n     *      DATA_URL : 0,   Return image as base64-encoded string (DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible),\n     *      FILE_URI : 1,   Return image file URI,\n     *      NATIVE_URI : 2  Return image native URI\n     *          (e.g., assets-library:// on iOS or content:// on Android)\n     */\n    destinationType?: number;\n    /**\n     * Set the source of the picture.\n     * Defined in Camera.PictureSourceType. Default is CAMERA.\n     *      PHOTOLIBRARY : 0,\n     *      CAMERA : 1,\n     *      SAVEDPHOTOALBUM : 2\n     */\n    sourceType?: number;\n    /** Allow simple editing of image before selection. */\n    allowEdit?: boolean;\n    /**\n     * Choose the returned image file's encoding.\n     * Defined in Camera.EncodingType. Default is JPEG\n     *      JPEG : 0    Return JPEG encoded image\n     *      PNG : 1     Return PNG encoded image\n     */\n    encodingType?: number;\n    /**\n     * Width in pixels to scale image. Must be used with targetHeight.\n     * Aspect ratio remains constant.\n     */\n    targetWidth?: number;\n    /**\n     * Height in pixels to scale image. Must be used with targetWidth.\n     * Aspect ratio remains constant.\n     */\n    targetHeight?: number;\n    /**\n     * Set the type of media to select from. Only works when PictureSourceType\n     * is PHOTOLIBRARY or SAVEDPHOTOALBUM. Defined in Camera.MediaType\n     *      PICTURE: 0      allow selection of still pictures only. DEFAULT.\n     *          Will return format specified via DestinationType\n     *      VIDEO: 1        allow selection of video only, WILL ALWAYS RETURN FILE_URI\n     *      ALLMEDIA : 2    allow selection from all media types\n     */\n    mediaType?: number;\n    /** Rotate the image to correct for the orientation of the device during capture. */\n    correctOrientation?: boolean;\n    /** Save the image to the photo album on the device after capture. */\n    saveToPhotoAlbum?: boolean;\n    /**\n     * Choose the camera to use (front- or back-facing).\n     * Defined in Camera.Direction. Default is BACK.\n     *      BACK: 0\n     *      FRONT: 1\n     */\n    cameraDirection?: number;\n    /** iOS-only options that specify popover location in iPad. Defined in CameraPopoverOptions. */\n    popoverOptions?: CameraPopoverOptions;\n}\n/**\n * iOS-only parameters that specify the anchor element location and arrow direction\n * of the popover when selecting images from an iPad's library or album.\n */\nexport interface CameraPopoverOptions {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    /**\n     * Direction the arrow on the popover should point. Defined in Camera.PopoverArrowDirection\n     * Matches iOS UIPopoverArrowDirection constants.\n     *      ARROW_UP : 1,\n     *      ARROW_DOWN : 2,\n     *      ARROW_LEFT : 4,\n     *      ARROW_RIGHT : 8,\n     *      ARROW_ANY : 15\n     */\n    arrowDir: number;\n}\nexport declare enum DestinationType {\n    DATA_URL = 0,\n    FILE_URL = 1,\n    NATIVE_URI = 2\n}\nexport declare enum EncodingType {\n    JPEG = 0,\n    PNG = 1\n}\nexport declare enum MediaType {\n    PICTURE = 0,\n    VIDEO = 1,\n    ALLMEDIA = 2\n}\nexport declare enum PictureSourceType {\n    PHOTOLIBRARY = 0,\n    CAMERA = 1,\n    SAVEDPHOTOALBUM = 2\n}\nexport declare enum PopoverArrowDirection {\n    ARROW_UP = 1,\n    ARROW_DOWN = 2,\n    ARROW_LEFT = 3,\n    ARROW_RIGHT = 4,\n    ARROW_ANY = 5\n}\nexport declare enum Direction {\n    BACK = 0,\n    FRONT = 1\n}\n/**\n * @name Camera\n * @premier camera\n * @description\n * Take a photo or capture video.\n *\n * Requires the Cordova plugin: `cordova-plugin-camera`. For more info, please see the [Cordova Camera Plugin Docs](https://github.com/apache/cordova-plugin-camera).\n *\n * [Warning] Since IOS 10 the camera requires permissions to be placed in your config.xml add\n * ```xml\n * <config-file parent=\"NSCameraUsageDescription\" platform=\"ios\" target=\"*-Info.plist\">\n *  <string>You can take photos</string>\n * </config-file>\n * ```\n * inside of the <platform name='ios> section\n *\n * @usage\n * ```typescript\n * import { Camera, CameraOptions } from '@ionic-native/camera/ngx';\n *\n * constructor(private camera: Camera) { }\n *\n * ...\n *\n *\n * const options: CameraOptions = {\n *   quality: 100,\n *   destinationType: this.camera.DestinationType.FILE_URI,\n *   encodingType: this.camera.EncodingType.JPEG,\n *   mediaType: this.camera.MediaType.PICTURE\n * }\n *\n * this.camera.getPicture(options).then((imageData) => {\n *  // imageData is either a base64 encoded string or a file URI\n *  // If it's base64 (DATA_URL):\n *  let base64Image = 'data:image/jpeg;base64,' + imageData;\n * }, (err) => {\n *  // Handle error\n * });\n * ```\n * @interfaces\n * CameraOptions\n * CameraPopoverOptions\n */\nexport declare class Camera extends IonicNativePlugin {\n    /**\n     * Constant for possible destination types\n     */\n    DestinationType: {\n        /** Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible */\n        DATA_URL: number;\n        /** Return file uri (content://media/external/images/media/2 for Android) */\n        FILE_URI: number;\n        /** Return native uri (eg. asset-library://... for iOS) */\n        NATIVE_URI: number;\n    };\n    /**\n     * Convenience constant\n     */\n    EncodingType: {\n        /** Return JPEG encoded image */\n        JPEG: number;\n        /** Return PNG encoded image */\n        PNG: number;\n    };\n    /**\n     * Convenience constant\n     */\n    MediaType: {\n        /** Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType */\n        PICTURE: number;\n        /** Allow selection of video only, ONLY RETURNS URL */\n        VIDEO: number;\n        /** Allow selection from all media types */\n        ALLMEDIA: number;\n    };\n    /**\n     * Convenience constant\n     */\n    PictureSourceType: {\n        /** Choose image from picture library (same as PHOTOLIBRARY for Android) */\n        PHOTOLIBRARY: number;\n        /** Take picture from camera */\n        CAMERA: number;\n        /** Choose image from picture library (same as SAVEDPHOTOALBUM for Android) */\n        SAVEDPHOTOALBUM: number;\n    };\n    /**\n     * Convenience constant\n     */\n    PopoverArrowDirection: {\n        ARROW_UP: number;\n        ARROW_DOWN: number;\n        ARROW_LEFT: number;\n        ARROW_RIGHT: number;\n        ARROW_ANY: number;\n    };\n    /**\n     * Convenience constant\n     */\n    Direction: {\n        /** Use the back-facing camera */\n        BACK: number;\n        /** Use the front-facing camera */\n        FRONT: number;\n    };\n    /**\n     * Take a picture or video, or load one from the library.\n     * @param {CameraOptions} [options] Options that you want to pass to the camera. Encoding type, quality, etc. Platform-specific quirks are described in the [Cordova plugin docs](https://github.com/apache/cordova-plugin-camera#cameraoptions-errata-).\n     * @returns {Promise<any>} Returns a Promise that resolves with Base64 encoding of the image data, or the image file URI, depending on cameraOptions, otherwise rejects with an error.\n     */\n    getPicture(options?: CameraOptions): Promise<any>;\n    /**\n     * Remove intermediate image files that are kept in temporary storage after calling camera.getPicture.\n     * Applies only when the value of Camera.sourceType equals Camera.PictureSourceType.CAMERA and the Camera.destinationType equals Camera.DestinationType.FILE_URI.\n     * @returns {Promise<any>}\n     */\n    cleanup(): Promise<any>;\n}\n"]}