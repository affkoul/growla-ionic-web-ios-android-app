{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface MediaFile {\n    /**\n     * The name of the file, without path information.\n     */\n    name: string;\n    /**\n     * The full path of the file, including the name.\n     */\n    fullPath: string;\n    /**\n     * The file's mime type\n     */\n    type: string;\n    /**\n     * The date and time when the file was last modified.\n     */\n    lastModifiedDate: Date;\n    /**\n     * The size of the file, in bytes.\n     */\n    size: number;\n    /**\n     * Retrieves the format information of the media file.\n     * @param {Function} successCallback\n     * @param {Function} errorCallback\n     */\n    getFormatData(successCallback: (data: MediaFileData) => any, errorCallback?: (err: any) => any): void;\n}\nexport interface MediaFileData {\n    /**\n     * The actual format of the audio and video content.\n     */\n    codecs: string;\n    /**\n     * The average bitrate of the content. The value is zero for images.\n     */\n    bitrate: number;\n    /**\n     * The height of the image or video in pixels. The value is zero for audio clips.\n     */\n    height: number;\n    /**\n     * The width of the image or video in pixels. The value is zero for audio clips.\n     */\n    width: number;\n    /**\n     * The length of the video or sound clip in seconds. The value is zero for images.\n     */\n    duration: number;\n}\nexport interface CaptureError {\n    code: string;\n}\nexport interface CaptureAudioOptions {\n    /**\n     * Maximum number of audio clips. Defaults to 1.\n     * On iOS you can only record one file.\n     */\n    limit?: number;\n    /**\n     * Maximum duration of an audio sound clip, in seconds. This does not work on Android devices.\n     */\n    duration?: number;\n}\nexport interface CaptureImageOptions {\n    /**\n     * Maximum number of images to capture. This limit is not supported on iOS, only one image will be taken per invocation.\n     */\n    limit?: number;\n}\nexport interface CaptureVideoOptions {\n    /**\n     * Maximum number of video clips to record. This value is ignored on iOS, only one video clip can be taken per invocation.\n     */\n    limit?: number;\n    /**\n     * Maximum duration per video clip. This will be ignored on BlackBerry.\n     */\n    duration?: number;\n    /**\n     * Quality of the video. This parameter can only be used with Android.\n     */\n    quality?: number;\n}\nexport interface ConfigurationData {\n    /**\n     * The ASCII-encoded lowercase string representing the media type.\n     */\n    type: string;\n    /**\n     * The height of the image or video in pixels. The value is zero for sound clips.\n     */\n    height: number;\n    /**\n     * The width of the image or video in pixels. The value is zero for sound clips.\n     */\n    width: number;\n}\n/**\n * @name Media Capture\n * @premier media-capture\n * @description\n * This plugin provides access to the device's audio, image, and video capture capabilities.\n *\n * Requires Cordova plugin: `cordova-plugin-media-capture`. For more info, please see the [Media Capture plugin docs](https://github.com/apache/cordova-plugin-media-capture).\n *\n * @usage\n * ```typescript\n * import { MediaCapture, MediaFile, CaptureError, CaptureImageOptions } from '@ionic-native/media-capture/ngx';\n *\n *\n * constructor(private mediaCapture: MediaCapture) { }\n *\n * ...\n *\n *\n * let options: CaptureImageOptions = { limit: 3 }\n * this.mediaCapture.captureImage(options)\n *   .then(\n *     (data: MediaFile[]) => console.log(data),\n *     (err: CaptureError) => console.error(err)\n *   );\n *\n * ```\n * @interfaces\n * MediaFile\n * MediaFileData\n * CaptureError\n * CaptureAudioOptions\n * CaptureImageOptions\n * CaptureVideoOptions\n * ConfigurationData\n */\nexport declare class MediaCapture extends IonicNativePlugin {\n    /**\n     * The recording image sizes and formats supported by the device.\n     * @returns {ConfigurationData[]}\n     */\n    supportedImageModes: ConfigurationData[];\n    /**\n     * The audio recording formats supported by the device.\n     * @returns {ConfigurationData[]}\n     */\n    supportedAudioModes: ConfigurationData[];\n    /**\n     * The recording video resolutions and formats supported by the device.\n     * @returns {ConfigurationData[]}\n     */\n    supportedVideoModes: ConfigurationData[];\n    /**\n     * Start the audio recorder application and return information about captured audio clip files.\n     * @param options\n     * @returns {Promise<MediaFile[]>}\n     */\n    captureAudio(options?: CaptureAudioOptions): Promise<MediaFile[] | CaptureError>;\n    /**\n     * Start the camera application and return information about captured image files.\n     * @param options\n     * @returns {Promise<MediaFile[]>}\n     */\n    captureImage(options?: CaptureImageOptions): Promise<MediaFile[] | CaptureError>;\n    /**\n     * Start the video recorder application and return information about captured video clip files.\n     * @param options\n     * @returns {Promise<MediaFile[]>}\n     */\n    captureVideo(options?: CaptureVideoOptions): Promise<MediaFile[] | CaptureError>;\n    /**\n     * is fired if the capture call is successful\n     * @returns {Observable<MediaFile[]>}\n     */\n    onPendingCaptureResult(): Observable<MediaFile[]>;\n    /**\n     * is fired if the capture call is unsuccessful\n     * @returns {Observable<CaptureError>}\n     */\n    onPendingCaptureError(): Observable<CaptureError>;\n}\n"]}