import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var Badge = /** @class */ (function (_super) {
    __extends(Badge, _super);
    function Badge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Badge.prototype.clear = function () { return cordova(this, "clear", {}, arguments); };
    Badge.prototype.set = function (badgeNumber) { return cordova(this, "set", {}, arguments); };
    Badge.prototype.get = function () { return cordova(this, "get", {}, arguments); };
    Badge.prototype.increase = function (increaseBy) { return cordova(this, "increase", {}, arguments); };
    Badge.prototype.decrease = function (decreaseBy) { return cordova(this, "decrease", {}, arguments); };
    Badge.prototype.isSupported = function () { return cordova(this, "isSupported", {}, arguments); };
    Badge.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    Badge.prototype.requestPermission = function () { return cordova(this, "requestPermission", {}, arguments); };
    Badge.pluginName = "Badge";
    Badge.plugin = "cordova-plugin-badge";
    Badge.pluginRef = "cordova.plugins.notification.badge";
    Badge.repo = "https://github.com/katzer/cordova-plugin-badge";
    Badge.platforms = ["Android", "Browser", "iOS", "Windows"];
Badge.ɵfac = function Badge_Factory(t) { return ɵBadge_BaseFactory(t || Badge); };
Badge.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Badge, factory: function (t) { return Badge.ɵfac(t); } });
var ɵBadge_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Badge);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Badge, [{
        type: Injectable
    }], null, null); })();
    return Badge;
}(IonicNativePlugin));
export { Badge };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvYmFkZ2Uvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0FBSVMsSUE0QmtCLHlCQUFpQjtBQUFDO0FBRTlCO0FBR0o7QUFDUCxJQUFGLHFCQUFLO0FBS2EsSUFLbEIsbUJBQUcsYUFBQyxXQUFtQjtBQUtmLElBSVIsbUJBQUc7QUFLaUIsSUFLcEIsd0JBQVEsYUFBQyxVQUFrQjtBQUtkLElBS2Isd0JBQVEsYUFBQyxVQUFrQjtBQUtkLElBSWIsMkJBQVc7QUFLaUIsSUFJNUIsNkJBQWE7QUFLaUIsSUFJOUIsaUNBQWlCO0FBSXNCO0FBQWdDO0FBQTJDO0FBQTREO0FBQW1FO3lDQTdFbFAsVUFBVTs7Ozs7MEJBQ0w7QUFBQyxnQkFsQ1A7QUFBRSxFQWtDeUIsaUJBQWlCO0FBQzNDLFNBRFksS0FBSztBQUFJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgQmFkZ2VcbiAqIEBwcmVtaWVyIGJhZGdlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBlc3NlbnRpYWwgcHVycG9zZSBvZiBiYWRnZSBudW1iZXJzIGlzIHRvIGVuYWJsZSBhbiBhcHBsaWNhdGlvbiB0byBpbmZvcm0gaXRzIHVzZXJzIHRoYXQgaXQgaGFzIHNvbWV0aGluZyBmb3IgdGhlbSDigJQgZm9yIGV4YW1wbGUsIHVucmVhZCBtZXNzYWdlcyDigJQgd2hlbiB0aGUgYXBwbGljYXRpb24gaXNu4oCZdCBydW5uaW5nIGluIHRoZSBmb3JlZ3JvdW5kLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1iYWRnZS4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0JhZGdlIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20va2F0emVyL2NvcmRvdmEtcGx1Z2luLWJhZGdlKS5cbiAqXG4gKiBBbmRyb2lkIE5vdGU6IEJhZGdlcyBoYXZlIGhpc3RvcmljYWxseSBvbmx5IGJlZW4gYSBmZWF0dXJlIGltcGxlbWVudGVkIGJ5IHRoaXJkIHBhcnR5IGxhdW5jaGVycyBhbmQgbm90IHZpc2libGUgdW5sZXNzIG9uZSBvZiB0aG9zZSBsYXVuY2hlcnMgd2FzIGJlaW5nIHVzZWQgKEUuRy4gU2Ftc3VuZyBvciBOb3ZhIExhdW5jaGVyKSBhbmQgaWYgZW5hYmxlZCBieSB0aGUgdXNlci4gQXMgb2YgQW5kcm9pZCA4IChPcmVvKSwgW25vdGlmaWNhdGlvbiBiYWRnZXNdKGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL3RyYWluaW5nL25vdGlmeS11c2VyL2JhZGdlcykgd2VyZSBpbnRyb2R1Y2VkIG9mZmljaWFsbHkgdG8gcmVmbGVjdCB1bnJlYWQgbm90aWZpY2F0aW9ucy4gVGhpcyBwbHVnaW4gaXMgdW5saWtlbHkgdG8gd29yayBhcyBleHBlY3RlZCBvbiBkZXZpY2VzIHJ1bm5pbmcgQW5kcm9pZCA4IG9yIG5ld2VyLiBQbGVhc2Ugc2VlIHRoZSBbbG9jYWwgbm90aWZpY2F0aW9ucyBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2thdHplci9jb3Jkb3ZhLXBsdWdpbi1sb2NhbC1ub3RpZmljYXRpb25zKSBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBiYWRnZSB1c2Ugd2l0aCBub3RpZmljYXRpb25zLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQmFkZ2UgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JhZGdlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYWRnZTogQmFkZ2UpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuYmFkZ2Uuc2V0KDEwKTtcbiAqIHRoaXMuYmFkZ2UuaW5jcmVhc2UoMSk7XG4gKiB0aGlzLmJhZGdlLmNsZWFyKCk7XG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCYWRnZScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJhZGdlJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLm5vdGlmaWNhdGlvbi5iYWRnZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20va2F0emVyL2NvcmRvdmEtcGx1Z2luLWJhZGdlJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnLCAnV2luZG93cyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYWRnZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIENsZWFyIHRoZSBiYWRnZSBvZiB0aGUgYXBwIGljb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhcigpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBiYWRnZSBvZiB0aGUgYXBwIGljb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiYWRnZU51bWJlciAgVGhlIG5ldyBiYWRnZSBudW1iZXIuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldChiYWRnZU51bWJlcjogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBiYWRnZSBvZiB0aGUgYXBwIGljb24uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZWFzZSB0aGUgYmFkZ2UgbnVtYmVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5jcmVhc2VCeSAgQ291bnQgdG8gYWRkIHRvIHRoZSBjdXJyZW50IGJhZGdlIG51bWJlclxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbmNyZWFzZShpbmNyZWFzZUJ5OiBudW1iZXIpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNyZWFzZSB0aGUgYmFkZ2UgbnVtYmVyLlxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVjcmVhc2VCeSAgQ291bnQgdG8gc3VidHJhY3QgZnJvbSB0aGUgY3VycmVudCBiYWRnZSBudW1iZXJcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVjcmVhc2UoZGVjcmVhc2VCeTogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgc3VwcG9ydCB0byBzaG93IGJhZGdlcy5cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNTdXBwb3J0ZWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIGlmIHRoZSBhcHAgaGFzIHBlcm1pc3Npb24gdG8gc2hvdyBiYWRnZXMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhhc1Blcm1pc3Npb24oKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgcGVybWlzc2lvbiB0byBzZXQgYmFkZ2Ugbm90aWZpY2F0aW9uc1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXF1ZXN0UGVybWlzc2lvbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19