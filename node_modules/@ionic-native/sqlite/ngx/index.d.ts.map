{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface SQLiteDatabaseConfig {\n    /**\n     * Name of the database. Example: 'my.db'\n     */\n    name: string;\n    /**\n     * Location of the database. Example: 'default'\n     */\n    location?: string;\n    /**\n     * iOS Database Location. Example: 'Library'\n     */\n    iosDatabaseLocation?: string;\n    /**\n     * support arbitrary database location on android with https://github.com/litehelpers/cordova-sqlite-evcore-extbuild-free\n     */\n    androidDatabaseLocation?: string;\n    /**\n     * support opening pre-filled databases with https://github.com/litehelpers/cordova-sqlite-ext\n     */\n    createFromLocation?: number;\n    /**\n     * support encrypted databases with https://github.com/litehelpers/Cordova-sqlcipher-adapter\n     */\n    key?: string;\n}\n/**\n * @hidden\n */\nexport interface DbTransaction {\n    executeSql: (sql: any, values?: any[], success?: Function, error?: Function) => void;\n}\n/**\n * @hidden\n */\nexport interface SQLiteTransaction extends DbTransaction {\n    start: () => void;\n    addStatement: DbTransaction['executeSql'];\n    handleStatementSuccess: (handler: Function, response: any) => void;\n    handleStatementFailure: (handler: Function, response: any) => void;\n    run: () => void;\n    abort: (txFailure: any) => void;\n    finish: () => void;\n    abortFromQ: (sqlerror: any) => void;\n}\n/**\n * @hidden\n */\nexport declare class SQLiteObject {\n    _objectInstance: any;\n    constructor(_objectInstance: any);\n    databaseFeatures: {\n        isSQLitePluginDatabase: boolean;\n    };\n    openDBs: any;\n    addTransaction(transaction: (tx: SQLiteTransaction) => void): void;\n    /**\n     * @param fn {Function}\n     * @returns {Promise<any>}\n     */\n    transaction(fn: (tx: DbTransaction) => void): Promise<any>;\n    /**\n     * @param fn {Function}\n     * @returns {Promise<any>}\n     */\n    readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any>;\n    startNextTransaction(): void;\n    /**\n     * @returns {Promise<any>}\n     */\n    open(): Promise<any>;\n    /**\n     * @returns {Promise<any>}\n     */\n    close(): Promise<any>;\n    /**\n     * Execute SQL on the opened database. Note, you must call `create` first, and\n     * ensure it resolved and successfully opened the database.\n     */\n    executeSql(statement: string, params?: any[]): Promise<any>;\n    /**\n     * @param sqlStatements {string[] | string[][] | any[]}\n     * @returns {Promise<any>}\n     */\n    sqlBatch(sqlStatements: (string | string[] | any)[]): Promise<any>;\n    abortallPendingTransactions(): void;\n}\n/**\n * @name SQLite\n *\n * @description\n * Access SQLite databases on the device.\n *\n * @usage\n *\n * ```typescript\n * import { SQLite, SQLiteObject } from '@ionic-native/sqlite/ngx';\n *\n * constructor(private sqlite: SQLite) { }\n *\n * ...\n *\n * this.sqlite.create({\n *   name: 'data.db',\n *   location: 'default'\n * })\n *   .then((db: SQLiteObject) => {\n *\n *\n *     db.executeSql('create table danceMoves(name VARCHAR(32))', [])\n *       .then(() => console.log('Executed SQL'))\n *       .catch(e => console.log(e));\n *\n *\n *   })\n *   .catch(e => console.log(e));\n *\n * ```\n *\n * @classes\n * SQLiteObject\n * @interfaces\n * SQLiteDatabaseConfig\n * SQLiteTransaction\n */\nexport declare class SQLite extends IonicNativePlugin {\n    /**\n     * Open or create a SQLite database file.\n     *\n     * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\n     *\n     * @param config {SQLiteDatabaseConfig} database configuration\n     * @return Promise<SQLiteObject>\n     */\n    create(config: SQLiteDatabaseConfig): Promise<SQLiteObject>;\n    /**\n     * Verify that both the Javascript and native part of this plugin are installed in your application\n     * @returns {Promise<any>}\n     */\n    echoTest(): Promise<any>;\n    /**\n     * Automatically verify basic database access operations including opening a database\n     * @returns {Promise<any>}\n     */\n    selfTest(): Promise<any>;\n    /**\n     * Deletes a database\n     * @param config {SQLiteDatabaseConfig} database configuration\n     * @returns {Promise<any>}\n     */\n    deleteDatabase(config: SQLiteDatabaseConfig): Promise<any>;\n}\n"]}