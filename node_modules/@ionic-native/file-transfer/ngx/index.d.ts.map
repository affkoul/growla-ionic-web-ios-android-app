{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface FileUploadOptions {\n    /**\n     * The name of the form element.\n     * Defaults to 'file'.\n     */\n    fileKey?: string;\n    /**\n     * The file name to use when saving the file on the server.\n     * Defaults to 'image.jpg'.\n     */\n    fileName?: string;\n    /**\n     * The HTTP method to use - either PUT or POST.\n     * Defaults to POST.\n     */\n    httpMethod?: string;\n    /**\n     * The mime type of the data to upload.\n     * Defaults to image/jpeg.\n     */\n    mimeType?: string;\n    /**\n     * A set of optional key/value pairs to pass in the HTTP request.\n     */\n    params?: {\n        [s: string]: any;\n    };\n    /**\n     * Whether to upload the data in chunked streaming mode.\n     * Defaults to true.\n     */\n    chunkedMode?: boolean;\n    /**\n     * A map of header name/header values. Use an array to specify more\n     * than one value. On iOS, FireOS, and Android, if a header named\n     * Content-Type is present, multipart form data will NOT be used.\n     */\n    headers?: {\n        [s: string]: any;\n    };\n}\nexport interface FileUploadResult {\n    /**\n     * The number of bytes sent to the server as part of the upload.\n     */\n    bytesSent: number;\n    /**\n     * The HTTP response code returned by the server.\n     */\n    responseCode: number;\n    /**\n     * The HTTP response returned by the server.\n     */\n    response: string;\n    /**\n     * The HTTP response headers by the server.\n     */\n    headers: {\n        [s: string]: any;\n    };\n}\nexport interface FileTransferError {\n    /**\n     * One of the predefined error codes listed below.\n     */\n    code: number;\n    /**\n     * URL to the source.\n     */\n    source: string;\n    /**\n     * URL to the target.\n     */\n    target: string;\n    /**\n     * HTTP status code. This attribute is only available when a response\n     * code is received from the HTTP connection.\n     */\n    http_status: number;\n    /**\n     * Response body. This attribute is only available when a response is received from the HTTP connection.\n     */\n    body: string;\n    /**\n     * Either e.getMessage or e.toString.\n     */\n    exception: string;\n}\n/**\n * @name File Transfer\n *\n * @description\n * This plugin allows you to upload and download files.\n *\n * @usage\n * ```typescript\n * import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer/ngx';\n * import { File } from '@ionic-native/file';\n *\n * constructor(private transfer: FileTransfer, private file: File) { }\n *\n * ...\n *\n * const fileTransfer: FileTransferObject = this.transfer.create();\n *\n * // Upload a file:\n * fileTransfer.upload(..).then(..).catch(..);\n *\n * // Download a file:\n * fileTransfer.download(..).then(..).catch(..);\n *\n * // Abort active transfer:\n * fileTransfer.abort();\n *\n * // full example\n * upload() {\n *   let options: FileUploadOptions = {\n *      fileKey: 'file',\n *      fileName: 'name.jpg',\n *      headers: {}\n *      .....\n *   }\n *\n *   fileTransfer.upload('<file path>', '<api endpoint>', options)\n *    .then((data) => {\n *      // success\n *    }, (err) => {\n *      // error\n *    })\n * }\n *\n * download() {\n *   const url = 'http://www.example.com/file.pdf';\n *   fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\n *     console.log('download complete: ' + entry.toURL());\n *   }, (error) => {\n *     // handle error\n *   });\n * }\n *\n * ```\n *\n * To store files in a different/publicly accessible directory, please refer to the following link\n * https://github.com/apache/cordova-plugin-file#where-to-store-files\n *\n * @interfaces\n * FileUploadOptions\n * FileUploadResult\n * FileTransferError\n * @classes\n * FileTransferObject\n */\nexport declare class FileTransfer extends IonicNativePlugin {\n    /**\n     * Error code rejected from upload with FileTransferError\n     * Defined in FileTransferError.\n     *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\n     *      INVALID_URL_ERR: 2,     Return when url was invalid\n     *      CONNECTION_ERR: 3,      Return on connection error\n     *      ABORT_ERR: 4,           Return on aborting\n     *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\n     * @enum {number}\n     */\n    FileTransferErrorCode: {\n        FILE_NOT_FOUND_ERR: number;\n        INVALID_URL_ERR: number;\n        CONNECTION_ERR: number;\n        ABORT_ERR: number;\n        NOT_MODIFIED_ERR: number;\n    };\n    /**\n     * Creates a new FileTransfer object\n     * @return {FileTransferObject}\n     */\n    create(): FileTransferObject;\n}\n/**\n * @hidden\n */\nexport declare class FileTransferObject {\n    private _objectInstance;\n    constructor();\n    /**\n     * Sends a file to a server.\n     *\n     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n     * @param {FileUploadOptions} [options]  Optional parameters.\n     * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n     */\n    upload(fileUrl: string, url: string, options?: FileUploadOptions, trustAllHosts?: boolean): Promise<FileUploadResult>;\n    /**\n     * Downloads a file from server.\n     *\n     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n     * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @param {object} [Optional] parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n     * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\n     */\n    download(source: string, target: string, trustAllHosts?: boolean, options?: {\n        [s: string]: any;\n    }): Promise<any>;\n    /**\n     * Registers a listener that gets called whenever a new chunk of data is transferred.\n     * @param {Function} listener Listener that takes a progress event.\n     */\n    onProgress(listener: (event: ProgressEvent) => any): void;\n    /**\n     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n     * object which has an error code of FileTransferError.ABORT_ERR.\n     */\n    abort(): void;\n}\n"]}