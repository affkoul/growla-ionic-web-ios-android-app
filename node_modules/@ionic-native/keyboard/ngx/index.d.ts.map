{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport declare enum KeyboardStyle {\n    Light = \"light\",\n    Dark = \"dark\"\n}\nexport declare enum KeyboardResizeMode {\n    Native = \"native\",\n    Ionic = \"ionic\",\n    Body = \"body\",\n    None = \"none\"\n}\n/**\n * @name Keyboard\n * @premier keyboard\n * @capacitorincompatible true\n * @description\n * Keyboard plugin for Cordova.\n *\n * Requires Cordova plugin: `cordova-plugin-ionic-keyboard`. For more info, please see the [Keyboard plugin docs](https://github.com/ionic-team/cordova-plugin-ionic-keyboard).\n *\n * @usage\n * ```typescript\n * import { Keyboard } from '@ionic-native/keyboard/ngx';\n *\n * constructor(private keyboard: Keyboard) { }\n *\n * ...\n *\n * this.keyboard.show();\n *\n * this.keyboard.hide();\n *\n * ```\n */\nexport declare class Keyboard extends IonicNativePlugin {\n    /**\n     * Check keyboard status visible or not.\n     * @returns {boolean}\n     */\n    isVisible: boolean;\n    /**\n     * Hide the keyboard accessory bar with the next, previous and done buttons.\n     * @param hide {boolean}\n     */\n    hideFormAccessoryBar(hide: boolean): void;\n    /**\n     * Hide the keyboard if shown.\n     */\n    hide(): void;\n    /**\n     * Force keyboard to be shown.\n     */\n    show(): void;\n    /**\n     * Programatically set the resize mode\n     * @param mode {string}\n     */\n    setResizeMode(mode: KeyboardResizeMode): void;\n    /**\n     * Programatically set Keyboard style\n     * @param mode {string}\n     */\n    setKeyboardStyle(style: KeyboardStyle): void;\n    /**\n     * Programatically enable or disable the WebView scroll\n     * @param mode {string}\n     */\n    disableScroll(disable: boolean): void;\n    /**\n     * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.\n     * @returns {Observable<any>}\n     */\n    onKeyboardShow(): Observable<any>;\n    /**\n     * Creates an observable that notifies you when the keyboard will show. Unsubscribe to observable to cancel event watch.\n     * @returns {Observable<any>}\n     */\n    onKeyboardWillShow(): Observable<any>;\n    /**\n     * Creates an observable that notifies you when the keyboard did show. Unsubscribe to observable to cancel event watch.\n     * @returns {Observable<any>}\n     */\n    onKeyboardDidShow(): Observable<any>;\n    /**\n     * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.\n     * @returns {Observable<any>}\n     */\n    onKeyboardHide(): Observable<any>;\n    /**\n     * Creates an observable that notifies you when the keyboard will hide. Unsubscribe to observable to cancel event watch.\n     * @returns {Observable<any>}\n     */\n    onKeyboardWillHide(): Observable<any>;\n    /**\n     * Creates an observable that notifies you when the keyboard did hide. Unsubscribe to observable to cancel event watch.\n     * @returns {Observable<any>}\n     */\n    onKeyboardDidHide(): Observable<any>;\n}\n"]}