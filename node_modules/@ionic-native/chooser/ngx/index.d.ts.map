{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nexport interface ChooserResult {\n    data?: Uint8Array;\n    dataURI?: string;\n    mediaType: string;\n    name: string;\n    uri: string;\n}\n/**\n * @name Chooser\n * @description\n * File chooser plugin for Cordova.\n *\n * The following must be added to config.xml to prevent crashing when selecting large files on Android:\n * ```xml\n * <platform name=\"android\">\n *  <edit-config\n *    file=\"app/src/main/AndroidManifest.xml\"\n *    mode=\"merge\"\n *    target=\"/manifest/application\">\n *    <application android:largeHeap=\"true\" />\n *  </edit-config>\n * </platform>\n * ```\n *\n * @usage\n * ```typescript\n * import { Chooser } from '@ionic-native/chooser/ngx';\n *\n *\n * constructor(private chooser: Chooser) { }\n *\n * ...\n *\n *\n * this.chooser.getFile()\n *   .then(file => console.log(file ? file.name : 'canceled'))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n *\n * @interfaces\n * ChooserResult\n */\nexport declare class Chooser extends IonicNativePlugin {\n    /**\n     * Displays native prompt for user to select a file.\n     * @param {string} [accept] Optional MIME type filter (e.g. 'image/gif,video/*').\n     * @return {Promise<any>} Promise containing selected file's raw binary data,\n     * base64-encoded data: URI, MIME type, display name, and original URI.\n     */\n    getFile(accept?: string): Promise<ChooserResult | undefined>;\n    /**\n     * Displays native prompt for user to select a file.\n     * @param {string} [accept] Optional MIME type filter (e.g. 'image/gif,video/*').\n     * @returns {Promise<any>} Promise containing selected file's MIME type, display name, and original URI.\n     * If user cancels, promise will be resolved as undefined.\n     * If error occurs, promise will be rejected.\n     */\n    getFileMetadata(accept?: string): Promise<ChooserResult | undefined>;\n}\n"]}